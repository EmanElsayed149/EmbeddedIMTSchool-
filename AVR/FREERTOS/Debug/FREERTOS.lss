
FREERTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002d0a  00002d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fa  00800068  00800068  00002da6  2**0
                  ALLOC
  3 .stab         00004938  00000000  00000000  00002da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002dea  00000000  00000000  000076e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 07 	call	0xef8	; 0xef8 <main>
      8a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <M_DIO_Vid_WrtPinDir>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <M_DIO_Vid_WrtPinDir+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <M_DIO_Vid_WrtPinDir+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	6a 83       	std	Y+2, r22	; 0x02
      a4:	4b 83       	std	Y+3, r20	; 0x03
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	28 2f       	mov	r18, r24
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	3d 83       	std	Y+5, r19	; 0x05
      ae:	2c 83       	std	Y+4, r18	; 0x04
      b0:	6c 81       	ldd	r22, Y+4	; 0x04
      b2:	7d 81       	ldd	r23, Y+5	; 0x05
      b4:	61 30       	cpi	r22, 0x01	; 1
      b6:	71 05       	cpc	r23, r1
      b8:	d1 f1       	breq	.+116    	; 0x12e <M_DIO_Vid_WrtPinDir+0x9c>
      ba:	8c 81       	ldd	r24, Y+4	; 0x04
      bc:	9d 81       	ldd	r25, Y+5	; 0x05
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	91 05       	cpc	r25, r1
      c2:	34 f4       	brge	.+12     	; 0xd0 <M_DIO_Vid_WrtPinDir+0x3e>
      c4:	2c 81       	ldd	r18, Y+4	; 0x04
      c6:	3d 81       	ldd	r19, Y+5	; 0x05
      c8:	21 15       	cp	r18, r1
      ca:	31 05       	cpc	r19, r1
      cc:	71 f0       	breq	.+28     	; 0xea <M_DIO_Vid_WrtPinDir+0x58>
      ce:	94 c0       	rjmp	.+296    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
      d0:	6c 81       	ldd	r22, Y+4	; 0x04
      d2:	7d 81       	ldd	r23, Y+5	; 0x05
      d4:	62 30       	cpi	r22, 0x02	; 2
      d6:	71 05       	cpc	r23, r1
      d8:	09 f4       	brne	.+2      	; 0xdc <M_DIO_Vid_WrtPinDir+0x4a>
      da:	4b c0       	rjmp	.+150    	; 0x172 <M_DIO_Vid_WrtPinDir+0xe0>
      dc:	8c 81       	ldd	r24, Y+4	; 0x04
      de:	9d 81       	ldd	r25, Y+5	; 0x05
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	91 05       	cpc	r25, r1
      e4:	09 f4       	brne	.+2      	; 0xe8 <M_DIO_Vid_WrtPinDir+0x56>
      e6:	67 c0       	rjmp	.+206    	; 0x1b6 <M_DIO_Vid_WrtPinDir+0x124>
      e8:	87 c0       	rjmp	.+270    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
      ea:	aa e3       	ldi	r26, 0x3A	; 58
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	ea e3       	ldi	r30, 0x3A	; 58
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	48 2f       	mov	r20, r24
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	28 2f       	mov	r18, r24
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <M_DIO_Vid_WrtPinDir+0x74>
     102:	88 0f       	add	r24, r24
     104:	99 1f       	adc	r25, r25
     106:	2a 95       	dec	r18
     108:	e2 f7       	brpl	.-8      	; 0x102 <M_DIO_Vid_WrtPinDir+0x70>
     10a:	80 95       	com	r24
     10c:	48 23       	and	r20, r24
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	28 2f       	mov	r18, r24
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	88 2f       	mov	r24, r24
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	b9 01       	movw	r22, r18
     11c:	02 c0       	rjmp	.+4      	; 0x122 <M_DIO_Vid_WrtPinDir+0x90>
     11e:	66 0f       	add	r22, r22
     120:	77 1f       	adc	r23, r23
     122:	8a 95       	dec	r24
     124:	e2 f7       	brpl	.-8      	; 0x11e <M_DIO_Vid_WrtPinDir+0x8c>
     126:	cb 01       	movw	r24, r22
     128:	84 2b       	or	r24, r20
     12a:	8c 93       	st	X, r24
     12c:	65 c0       	rjmp	.+202    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
     12e:	a7 e3       	ldi	r26, 0x37	; 55
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e7 e3       	ldi	r30, 0x37	; 55
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	48 2f       	mov	r20, r24
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <M_DIO_Vid_WrtPinDir+0xb8>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	2a 95       	dec	r18
     14c:	e2 f7       	brpl	.-8      	; 0x146 <M_DIO_Vid_WrtPinDir+0xb4>
     14e:	80 95       	com	r24
     150:	48 23       	and	r20, r24
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	28 2f       	mov	r18, r24
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	8a 81       	ldd	r24, Y+2	; 0x02
     15a:	88 2f       	mov	r24, r24
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	b9 01       	movw	r22, r18
     160:	02 c0       	rjmp	.+4      	; 0x166 <M_DIO_Vid_WrtPinDir+0xd4>
     162:	66 0f       	add	r22, r22
     164:	77 1f       	adc	r23, r23
     166:	8a 95       	dec	r24
     168:	e2 f7       	brpl	.-8      	; 0x162 <M_DIO_Vid_WrtPinDir+0xd0>
     16a:	cb 01       	movw	r24, r22
     16c:	84 2b       	or	r24, r20
     16e:	8c 93       	st	X, r24
     170:	43 c0       	rjmp	.+134    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
     172:	a4 e3       	ldi	r26, 0x34	; 52
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	e4 e3       	ldi	r30, 0x34	; 52
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	48 2f       	mov	r20, r24
     17e:	8a 81       	ldd	r24, Y+2	; 0x02
     180:	28 2f       	mov	r18, r24
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	02 c0       	rjmp	.+4      	; 0x18e <M_DIO_Vid_WrtPinDir+0xfc>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	2a 95       	dec	r18
     190:	e2 f7       	brpl	.-8      	; 0x18a <M_DIO_Vid_WrtPinDir+0xf8>
     192:	80 95       	com	r24
     194:	48 23       	and	r20, r24
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	88 2f       	mov	r24, r24
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	b9 01       	movw	r22, r18
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <M_DIO_Vid_WrtPinDir+0x118>
     1a6:	66 0f       	add	r22, r22
     1a8:	77 1f       	adc	r23, r23
     1aa:	8a 95       	dec	r24
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <M_DIO_Vid_WrtPinDir+0x114>
     1ae:	cb 01       	movw	r24, r22
     1b0:	84 2b       	or	r24, r20
     1b2:	8c 93       	st	X, r24
     1b4:	21 c0       	rjmp	.+66     	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
     1b6:	a1 e3       	ldi	r26, 0x31	; 49
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e1 e3       	ldi	r30, 0x31	; 49
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	48 2f       	mov	r20, r24
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <M_DIO_Vid_WrtPinDir+0x140>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	2a 95       	dec	r18
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <M_DIO_Vid_WrtPinDir+0x13c>
     1d6:	80 95       	com	r24
     1d8:	48 23       	and	r20, r24
     1da:	8b 81       	ldd	r24, Y+3	; 0x03
     1dc:	28 2f       	mov	r18, r24
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	88 2f       	mov	r24, r24
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	b9 01       	movw	r22, r18
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <M_DIO_Vid_WrtPinDir+0x15c>
     1ea:	66 0f       	add	r22, r22
     1ec:	77 1f       	adc	r23, r23
     1ee:	8a 95       	dec	r24
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <M_DIO_Vid_WrtPinDir+0x158>
     1f2:	cb 01       	movw	r24, r22
     1f4:	84 2b       	or	r24, r20
     1f6:	8c 93       	st	X, r24
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	cf 91       	pop	r28
     204:	df 91       	pop	r29
     206:	08 95       	ret

00000208 <M_DIO_Vid_wrtPinVal>:
		case M_DIO_PORTD: WRT_BIT(DDRD,copy_u8_pin,copy_u8_direcrion); break;
		default:break;
	}
}
void M_DIO_Vid_wrtPinVal(u8 copy_u8_Port,u8 copy_u8_Pin,u8 copy_u8_pinVal)
{
     208:	df 93       	push	r29
     20a:	cf 93       	push	r28
     20c:	00 d0       	rcall	.+0      	; 0x20e <M_DIO_Vid_wrtPinVal+0x6>
     20e:	00 d0       	rcall	.+0      	; 0x210 <M_DIO_Vid_wrtPinVal+0x8>
     210:	0f 92       	push	r0
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	89 83       	std	Y+1, r24	; 0x01
     218:	6a 83       	std	Y+2, r22	; 0x02
     21a:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8_Port)
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	3d 83       	std	Y+5, r19	; 0x05
     224:	2c 83       	std	Y+4, r18	; 0x04
     226:	6c 81       	ldd	r22, Y+4	; 0x04
     228:	7d 81       	ldd	r23, Y+5	; 0x05
     22a:	61 30       	cpi	r22, 0x01	; 1
     22c:	71 05       	cpc	r23, r1
     22e:	d1 f1       	breq	.+116    	; 0x2a4 <M_DIO_Vid_wrtPinVal+0x9c>
     230:	8c 81       	ldd	r24, Y+4	; 0x04
     232:	9d 81       	ldd	r25, Y+5	; 0x05
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	91 05       	cpc	r25, r1
     238:	34 f4       	brge	.+12     	; 0x246 <M_DIO_Vid_wrtPinVal+0x3e>
     23a:	2c 81       	ldd	r18, Y+4	; 0x04
     23c:	3d 81       	ldd	r19, Y+5	; 0x05
     23e:	21 15       	cp	r18, r1
     240:	31 05       	cpc	r19, r1
     242:	71 f0       	breq	.+28     	; 0x260 <M_DIO_Vid_wrtPinVal+0x58>
     244:	94 c0       	rjmp	.+296    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
     246:	6c 81       	ldd	r22, Y+4	; 0x04
     248:	7d 81       	ldd	r23, Y+5	; 0x05
     24a:	62 30       	cpi	r22, 0x02	; 2
     24c:	71 05       	cpc	r23, r1
     24e:	09 f4       	brne	.+2      	; 0x252 <M_DIO_Vid_wrtPinVal+0x4a>
     250:	4b c0       	rjmp	.+150    	; 0x2e8 <M_DIO_Vid_wrtPinVal+0xe0>
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	9d 81       	ldd	r25, Y+5	; 0x05
     256:	83 30       	cpi	r24, 0x03	; 3
     258:	91 05       	cpc	r25, r1
     25a:	09 f4       	brne	.+2      	; 0x25e <M_DIO_Vid_wrtPinVal+0x56>
     25c:	67 c0       	rjmp	.+206    	; 0x32c <M_DIO_Vid_wrtPinVal+0x124>
     25e:	87 c0       	rjmp	.+270    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
	{
		case M_DIO_PORTA: WRT_BIT(PORTA,copy_u8_Pin,copy_u8_pinVal); break;
     260:	ab e3       	ldi	r26, 0x3B	; 59
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	eb e3       	ldi	r30, 0x3B	; 59
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	48 2f       	mov	r20, r24
     26c:	8a 81       	ldd	r24, Y+2	; 0x02
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <M_DIO_Vid_wrtPinVal+0x74>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	2a 95       	dec	r18
     27e:	e2 f7       	brpl	.-8      	; 0x278 <M_DIO_Vid_wrtPinVal+0x70>
     280:	80 95       	com	r24
     282:	48 23       	and	r20, r24
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	28 2f       	mov	r18, r24
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	8a 81       	ldd	r24, Y+2	; 0x02
     28c:	88 2f       	mov	r24, r24
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	b9 01       	movw	r22, r18
     292:	02 c0       	rjmp	.+4      	; 0x298 <M_DIO_Vid_wrtPinVal+0x90>
     294:	66 0f       	add	r22, r22
     296:	77 1f       	adc	r23, r23
     298:	8a 95       	dec	r24
     29a:	e2 f7       	brpl	.-8      	; 0x294 <M_DIO_Vid_wrtPinVal+0x8c>
     29c:	cb 01       	movw	r24, r22
     29e:	84 2b       	or	r24, r20
     2a0:	8c 93       	st	X, r24
     2a2:	65 c0       	rjmp	.+202    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
		case M_DIO_PORTB: WRT_BIT(PORTB,copy_u8_Pin,copy_u8_pinVal); break;
     2a4:	a8 e3       	ldi	r26, 0x38	; 56
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e8 e3       	ldi	r30, 0x38	; 56
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	48 2f       	mov	r20, r24
     2b0:	8a 81       	ldd	r24, Y+2	; 0x02
     2b2:	28 2f       	mov	r18, r24
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <M_DIO_Vid_wrtPinVal+0xb8>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	2a 95       	dec	r18
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <M_DIO_Vid_wrtPinVal+0xb4>
     2c4:	80 95       	com	r24
     2c6:	48 23       	and	r20, r24
     2c8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ca:	28 2f       	mov	r18, r24
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	b9 01       	movw	r22, r18
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <M_DIO_Vid_wrtPinVal+0xd4>
     2d8:	66 0f       	add	r22, r22
     2da:	77 1f       	adc	r23, r23
     2dc:	8a 95       	dec	r24
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <M_DIO_Vid_wrtPinVal+0xd0>
     2e0:	cb 01       	movw	r24, r22
     2e2:	84 2b       	or	r24, r20
     2e4:	8c 93       	st	X, r24
     2e6:	43 c0       	rjmp	.+134    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
		case M_DIO_PORTC: WRT_BIT(PORTC,copy_u8_Pin,copy_u8_pinVal); break;
     2e8:	a5 e3       	ldi	r26, 0x35	; 53
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	e5 e3       	ldi	r30, 0x35	; 53
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	48 2f       	mov	r20, r24
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	28 2f       	mov	r18, r24
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <M_DIO_Vid_wrtPinVal+0xfc>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	2a 95       	dec	r18
     306:	e2 f7       	brpl	.-8      	; 0x300 <M_DIO_Vid_wrtPinVal+0xf8>
     308:	80 95       	com	r24
     30a:	48 23       	and	r20, r24
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	8a 81       	ldd	r24, Y+2	; 0x02
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	b9 01       	movw	r22, r18
     31a:	02 c0       	rjmp	.+4      	; 0x320 <M_DIO_Vid_wrtPinVal+0x118>
     31c:	66 0f       	add	r22, r22
     31e:	77 1f       	adc	r23, r23
     320:	8a 95       	dec	r24
     322:	e2 f7       	brpl	.-8      	; 0x31c <M_DIO_Vid_wrtPinVal+0x114>
     324:	cb 01       	movw	r24, r22
     326:	84 2b       	or	r24, r20
     328:	8c 93       	st	X, r24
     32a:	21 c0       	rjmp	.+66     	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
		case M_DIO_PORTD: WRT_BIT(PORTD,copy_u8_Pin,copy_u8_pinVal); break;
     32c:	a2 e3       	ldi	r26, 0x32	; 50
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e2 e3       	ldi	r30, 0x32	; 50
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	48 2f       	mov	r20, r24
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <M_DIO_Vid_wrtPinVal+0x140>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	2a 95       	dec	r18
     34a:	e2 f7       	brpl	.-8      	; 0x344 <M_DIO_Vid_wrtPinVal+0x13c>
     34c:	80 95       	com	r24
     34e:	48 23       	and	r20, r24
     350:	8b 81       	ldd	r24, Y+3	; 0x03
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	88 2f       	mov	r24, r24
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	b9 01       	movw	r22, r18
     35e:	02 c0       	rjmp	.+4      	; 0x364 <M_DIO_Vid_wrtPinVal+0x15c>
     360:	66 0f       	add	r22, r22
     362:	77 1f       	adc	r23, r23
     364:	8a 95       	dec	r24
     366:	e2 f7       	brpl	.-8      	; 0x360 <M_DIO_Vid_wrtPinVal+0x158>
     368:	cb 01       	movw	r24, r22
     36a:	84 2b       	or	r24, r20
     36c:	8c 93       	st	X, r24
		default:break;
	}
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <M_DIO_u8_READPinVal>:
u8  M_DIO_u8_READPinVal (u8 copy_u8_Port,u8 copy_u8_Pin)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <M_DIO_u8_READPinVal+0x6>
     384:	00 d0       	rcall	.+0      	; 0x386 <M_DIO_u8_READPinVal+0x8>
     386:	0f 92       	push	r0
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	8a 83       	std	Y+2, r24	; 0x02
     38e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8_pinval=0;
     390:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8_Port)
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	28 2f       	mov	r18, r24
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	3d 83       	std	Y+5, r19	; 0x05
     39a:	2c 83       	std	Y+4, r18	; 0x04
     39c:	4c 81       	ldd	r20, Y+4	; 0x04
     39e:	5d 81       	ldd	r21, Y+5	; 0x05
     3a0:	41 30       	cpi	r20, 0x01	; 1
     3a2:	51 05       	cpc	r21, r1
     3a4:	41 f1       	breq	.+80     	; 0x3f6 <M_DIO_u8_READPinVal+0x78>
     3a6:	8c 81       	ldd	r24, Y+4	; 0x04
     3a8:	9d 81       	ldd	r25, Y+5	; 0x05
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	91 05       	cpc	r25, r1
     3ae:	34 f4       	brge	.+12     	; 0x3bc <M_DIO_u8_READPinVal+0x3e>
     3b0:	2c 81       	ldd	r18, Y+4	; 0x04
     3b2:	3d 81       	ldd	r19, Y+5	; 0x05
     3b4:	21 15       	cp	r18, r1
     3b6:	31 05       	cpc	r19, r1
     3b8:	61 f0       	breq	.+24     	; 0x3d2 <M_DIO_u8_READPinVal+0x54>
     3ba:	52 c0       	rjmp	.+164    	; 0x460 <M_DIO_u8_READPinVal+0xe2>
     3bc:	4c 81       	ldd	r20, Y+4	; 0x04
     3be:	5d 81       	ldd	r21, Y+5	; 0x05
     3c0:	42 30       	cpi	r20, 0x02	; 2
     3c2:	51 05       	cpc	r21, r1
     3c4:	51 f1       	breq	.+84     	; 0x41a <M_DIO_u8_READPinVal+0x9c>
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ca:	83 30       	cpi	r24, 0x03	; 3
     3cc:	91 05       	cpc	r25, r1
     3ce:	b9 f1       	breq	.+110    	; 0x43e <M_DIO_u8_READPinVal+0xc0>
     3d0:	47 c0       	rjmp	.+142    	; 0x460 <M_DIO_u8_READPinVal+0xe2>
	{
		case M_DIO_PORTA: local_u8_pinval = GIT_BIT(PINA,copy_u8_Pin); break;
     3d2:	e9 e3       	ldi	r30, 0x39	; 57
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	a9 01       	movw	r20, r18
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <M_DIO_u8_READPinVal+0x6c>
     3e6:	55 95       	asr	r21
     3e8:	47 95       	ror	r20
     3ea:	8a 95       	dec	r24
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <M_DIO_u8_READPinVal+0x68>
     3ee:	ca 01       	movw	r24, r20
     3f0:	81 70       	andi	r24, 0x01	; 1
     3f2:	89 83       	std	Y+1, r24	; 0x01
     3f4:	35 c0       	rjmp	.+106    	; 0x460 <M_DIO_u8_READPinVal+0xe2>
		case M_DIO_PORTB: local_u8_pinval = GIT_BIT(PINB,copy_u8_Pin); break;
     3f6:	e6 e3       	ldi	r30, 0x36	; 54
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	28 2f       	mov	r18, r24
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	8b 81       	ldd	r24, Y+3	; 0x03
     402:	88 2f       	mov	r24, r24
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	a9 01       	movw	r20, r18
     408:	02 c0       	rjmp	.+4      	; 0x40e <M_DIO_u8_READPinVal+0x90>
     40a:	55 95       	asr	r21
     40c:	47 95       	ror	r20
     40e:	8a 95       	dec	r24
     410:	e2 f7       	brpl	.-8      	; 0x40a <M_DIO_u8_READPinVal+0x8c>
     412:	ca 01       	movw	r24, r20
     414:	81 70       	andi	r24, 0x01	; 1
     416:	89 83       	std	Y+1, r24	; 0x01
     418:	23 c0       	rjmp	.+70     	; 0x460 <M_DIO_u8_READPinVal+0xe2>
		case M_DIO_PORTC: local_u8_pinval = GIT_BIT(PINC,copy_u8_Pin); break;
     41a:	e3 e3       	ldi	r30, 0x33	; 51
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	28 2f       	mov	r18, r24
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	02 c0       	rjmp	.+4      	; 0x432 <M_DIO_u8_READPinVal+0xb4>
     42e:	55 95       	asr	r21
     430:	47 95       	ror	r20
     432:	8a 95       	dec	r24
     434:	e2 f7       	brpl	.-8      	; 0x42e <M_DIO_u8_READPinVal+0xb0>
     436:	ca 01       	movw	r24, r20
     438:	81 70       	andi	r24, 0x01	; 1
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	11 c0       	rjmp	.+34     	; 0x460 <M_DIO_u8_READPinVal+0xe2>
		case M_DIO_PORTD: local_u8_pinval = GIT_BIT(PIND,copy_u8_Pin); break;
     43e:	e0 e3       	ldi	r30, 0x30	; 48
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	88 2f       	mov	r24, r24
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	a9 01       	movw	r20, r18
     450:	02 c0       	rjmp	.+4      	; 0x456 <M_DIO_u8_READPinVal+0xd8>
     452:	55 95       	asr	r21
     454:	47 95       	ror	r20
     456:	8a 95       	dec	r24
     458:	e2 f7       	brpl	.-8      	; 0x452 <M_DIO_u8_READPinVal+0xd4>
     45a:	ca 01       	movw	r24, r20
     45c:	81 70       	andi	r24, 0x01	; 1
     45e:	89 83       	std	Y+1, r24	; 0x01
		default:break;
	}
	return local_u8_pinval;
     460:	89 81       	ldd	r24, Y+1	; 0x01
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	08 95       	ret

00000472 <M_DIO_Vid_WrtPortDir>:
void M_DIO_Vid_WrtPortDir(u8 copy_u8_port,u8 copy_u8_Portdirecrion)
{
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	00 d0       	rcall	.+0      	; 0x478 <M_DIO_Vid_WrtPortDir+0x6>
     478:	00 d0       	rcall	.+0      	; 0x47a <M_DIO_Vid_WrtPortDir+0x8>
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8_port)
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	28 2f       	mov	r18, r24
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	3c 83       	std	Y+4, r19	; 0x04
     48a:	2b 83       	std	Y+3, r18	; 0x03
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	91 05       	cpc	r25, r1
     494:	d1 f0       	breq	.+52     	; 0x4ca <M_DIO_Vid_WrtPortDir+0x58>
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	3c 81       	ldd	r19, Y+4	; 0x04
     49a:	22 30       	cpi	r18, 0x02	; 2
     49c:	31 05       	cpc	r19, r1
     49e:	2c f4       	brge	.+10     	; 0x4aa <M_DIO_Vid_WrtPortDir+0x38>
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	61 f0       	breq	.+24     	; 0x4c0 <M_DIO_Vid_WrtPortDir+0x4e>
     4a8:	1e c0       	rjmp	.+60     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
     4aa:	2b 81       	ldd	r18, Y+3	; 0x03
     4ac:	3c 81       	ldd	r19, Y+4	; 0x04
     4ae:	22 30       	cpi	r18, 0x02	; 2
     4b0:	31 05       	cpc	r19, r1
     4b2:	81 f0       	breq	.+32     	; 0x4d4 <M_DIO_Vid_WrtPortDir+0x62>
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	83 30       	cpi	r24, 0x03	; 3
     4ba:	91 05       	cpc	r25, r1
     4bc:	81 f0       	breq	.+32     	; 0x4de <M_DIO_Vid_WrtPortDir+0x6c>
     4be:	13 c0       	rjmp	.+38     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
	{
		case M_DIO_PORTA: DDRA = copy_u8_Portdirecrion; break;
     4c0:	ea e3       	ldi	r30, 0x3A	; 58
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	80 83       	st	Z, r24
     4c8:	0e c0       	rjmp	.+28     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
		case M_DIO_PORTB: DDRB = copy_u8_Portdirecrion; break;
     4ca:	e7 e3       	ldi	r30, 0x37	; 55
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	80 83       	st	Z, r24
     4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
		case M_DIO_PORTC: DDRC = copy_u8_Portdirecrion; break;
     4d4:	e4 e3       	ldi	r30, 0x34	; 52
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	80 83       	st	Z, r24
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
		case M_DIO_PORTD: DDRD = copy_u8_Portdirecrion; break;
     4de:	e1 e3       	ldi	r30, 0x31	; 49
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	80 83       	st	Z, r24
	}
}
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <M_DIO_Vid_WrtPortVal>:
void M_DIO_Vid_WrtPortVal(u8 copy_u8_port,u8 copy_u8_PortVal)
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <M_DIO_Vid_WrtPortVal+0x6>
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <M_DIO_Vid_WrtPortVal+0x8>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8_port)
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	28 2f       	mov	r18, r24
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	3c 83       	std	Y+4, r19	; 0x04
     50c:	2b 83       	std	Y+3, r18	; 0x03
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	91 05       	cpc	r25, r1
     516:	d1 f0       	breq	.+52     	; 0x54c <M_DIO_Vid_WrtPortVal+0x58>
     518:	2b 81       	ldd	r18, Y+3	; 0x03
     51a:	3c 81       	ldd	r19, Y+4	; 0x04
     51c:	22 30       	cpi	r18, 0x02	; 2
     51e:	31 05       	cpc	r19, r1
     520:	2c f4       	brge	.+10     	; 0x52c <M_DIO_Vid_WrtPortVal+0x38>
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	61 f0       	breq	.+24     	; 0x542 <M_DIO_Vid_WrtPortVal+0x4e>
     52a:	1e c0       	rjmp	.+60     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
     52c:	2b 81       	ldd	r18, Y+3	; 0x03
     52e:	3c 81       	ldd	r19, Y+4	; 0x04
     530:	22 30       	cpi	r18, 0x02	; 2
     532:	31 05       	cpc	r19, r1
     534:	81 f0       	breq	.+32     	; 0x556 <M_DIO_Vid_WrtPortVal+0x62>
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	9c 81       	ldd	r25, Y+4	; 0x04
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	91 05       	cpc	r25, r1
     53e:	81 f0       	breq	.+32     	; 0x560 <M_DIO_Vid_WrtPortVal+0x6c>
     540:	13 c0       	rjmp	.+38     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
	{
		case M_DIO_PORTA: PORTA = copy_u8_PortVal ; break;
     542:	eb e3       	ldi	r30, 0x3B	; 59
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	80 83       	st	Z, r24
     54a:	0e c0       	rjmp	.+28     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
		case M_DIO_PORTB: PORTB = copy_u8_PortVal ; break;
     54c:	e8 e3       	ldi	r30, 0x38	; 56
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	80 83       	st	Z, r24
     554:	09 c0       	rjmp	.+18     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
		case M_DIO_PORTC: PORTC = copy_u8_PortVal ; break;
     556:	e5 e3       	ldi	r30, 0x35	; 53
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	80 83       	st	Z, r24
     55e:	04 c0       	rjmp	.+8      	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
		case M_DIO_PORTD: PORTD = copy_u8_PortVal ; break;
     560:	e2 e3       	ldi	r30, 0x32	; 50
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	80 83       	st	Z, r24
	}
}
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <M_DIO_u8_ReadPortVal>:
u8 M_DIO_u8_ReadPortVal(u8 copy_u8_Port)
{
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	00 d0       	rcall	.+0      	; 0x57c <M_DIO_u8_ReadPortVal+0x6>
     57c:	00 d0       	rcall	.+0      	; 0x57e <M_DIO_u8_ReadPortVal+0x8>
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8_portVal=0;
     584:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8_Port)
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	3c 83       	std	Y+4, r19	; 0x04
     58e:	2b 83       	std	Y+3, r18	; 0x03
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	9c 81       	ldd	r25, Y+4	; 0x04
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	91 05       	cpc	r25, r1
     598:	d1 f0       	breq	.+52     	; 0x5ce <M_DIO_u8_ReadPortVal+0x58>
     59a:	2b 81       	ldd	r18, Y+3	; 0x03
     59c:	3c 81       	ldd	r19, Y+4	; 0x04
     59e:	22 30       	cpi	r18, 0x02	; 2
     5a0:	31 05       	cpc	r19, r1
     5a2:	2c f4       	brge	.+10     	; 0x5ae <M_DIO_u8_ReadPortVal+0x38>
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	61 f0       	breq	.+24     	; 0x5c4 <M_DIO_u8_ReadPortVal+0x4e>
     5ac:	1e c0       	rjmp	.+60     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
     5ae:	2b 81       	ldd	r18, Y+3	; 0x03
     5b0:	3c 81       	ldd	r19, Y+4	; 0x04
     5b2:	22 30       	cpi	r18, 0x02	; 2
     5b4:	31 05       	cpc	r19, r1
     5b6:	81 f0       	breq	.+32     	; 0x5d8 <M_DIO_u8_ReadPortVal+0x62>
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	91 05       	cpc	r25, r1
     5c0:	81 f0       	breq	.+32     	; 0x5e2 <M_DIO_u8_ReadPortVal+0x6c>
     5c2:	13 c0       	rjmp	.+38     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
	{
		case M_DIO_PORTA: local_u8_portVal = PINA ; break;
     5c4:	e9 e3       	ldi	r30, 0x39	; 57
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	0e c0       	rjmp	.+28     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
		case M_DIO_PORTB: local_u8_portVal = PINB ; break;
     5ce:	e6 e3       	ldi	r30, 0x36	; 54
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
		case M_DIO_PORTC: local_u8_portVal = PINC ; break;
     5d8:	e3 e3       	ldi	r30, 0x33	; 51
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
		case M_DIO_PORTD: local_u8_portVal = PIND ; break;
     5e2:	e0 e3       	ldi	r30, 0x30	; 48
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8_portVal;
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	cf 91       	pop	r28
     5f6:	df 91       	pop	r29
     5f8:	08 95       	ret

000005fa <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	27 97       	sbiw	r28, 0x07	; 7
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	9d 83       	std	Y+5, r25	; 0x05
     610:	8c 83       	std	Y+4, r24	; 0x04
     612:	6e 83       	std	Y+6, r22	; 0x06
     614:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     616:	8a e1       	ldi	r24, 0x1A	; 26
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	09 f4       	brne	.+2      	; 0x62c <xCoRoutineCreate+0x32>
     62a:	6f c0       	rjmp	.+222    	; 0x70a <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     62c:	80 91 68 00 	lds	r24, 0x0068
     630:	90 91 69 00 	lds	r25, 0x0069
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	41 f4       	brne	.+16     	; 0x648 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	90 93 69 00 	sts	0x0069, r25
     640:	80 93 68 00 	sts	0x0068, r24
			prvInitialiseCoRoutineLists();
     644:	0e 94 64 05 	call	0xac8	; 0xac8 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     648:	8e 81       	ldd	r24, Y+6	; 0x06
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	10 f0       	brcs	.+4      	; 0x652 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     652:	e9 81       	ldd	r30, Y+1	; 0x01
     654:	fa 81       	ldd	r31, Y+2	; 0x02
     656:	11 8e       	std	Z+25, r1	; 0x19
     658:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     65a:	e9 81       	ldd	r30, Y+1	; 0x01
     65c:	fa 81       	ldd	r31, Y+2	; 0x02
     65e:	8e 81       	ldd	r24, Y+6	; 0x06
     660:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     662:	e9 81       	ldd	r30, Y+1	; 0x01
     664:	fa 81       	ldd	r31, Y+2	; 0x02
     666:	8f 81       	ldd	r24, Y+7	; 0x07
     668:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     66a:	e9 81       	ldd	r30, Y+1	; 0x01
     66c:	fa 81       	ldd	r31, Y+2	; 0x02
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	9d 81       	ldd	r25, Y+5	; 0x05
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	02 96       	adiw	r24, 0x02	; 2
     67c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	0c 96       	adiw	r24, 0x0c	; 12
     686:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     68a:	e9 81       	ldd	r30, Y+1	; 0x01
     68c:	fa 81       	ldd	r31, Y+2	; 0x02
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	91 87       	std	Z+9, r25	; 0x09
     694:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     696:	e9 81       	ldd	r30, Y+1	; 0x01
     698:	fa 81       	ldd	r31, Y+2	; 0x02
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	93 8b       	std	Z+19, r25	; 0x13
     6a0:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     6a2:	8e 81       	ldd	r24, Y+6	; 0x06
     6a4:	28 2f       	mov	r18, r24
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	85 e0       	ldi	r24, 0x05	; 5
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	82 1b       	sub	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	e9 81       	ldd	r30, Y+1	; 0x01
     6b2:	fa 81       	ldd	r31, Y+2	; 0x02
     6b4:	95 87       	std	Z+13, r25	; 0x0d
     6b6:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     6b8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ba:	fa 81       	ldd	r31, Y+2	; 0x02
     6bc:	96 89       	ldd	r25, Z+22	; 0x16
     6be:	80 91 6a 00 	lds	r24, 0x006A
     6c2:	89 17       	cp	r24, r25
     6c4:	28 f4       	brcc	.+10     	; 0x6d0 <xCoRoutineCreate+0xd6>
     6c6:	e9 81       	ldd	r30, Y+1	; 0x01
     6c8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ca:	86 89       	ldd	r24, Z+22	; 0x16
     6cc:	80 93 6a 00 	sts	0x006A, r24
     6d0:	e9 81       	ldd	r30, Y+1	; 0x01
     6d2:	fa 81       	ldd	r31, Y+2	; 0x02
     6d4:	86 89       	ldd	r24, Z+22	; 0x16
     6d6:	28 2f       	mov	r18, r24
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	c9 01       	movw	r24, r18
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	82 0f       	add	r24, r18
     6ea:	93 1f       	adc	r25, r19
     6ec:	ac 01       	movw	r20, r24
     6ee:	4f 58       	subi	r20, 0x8F	; 143
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	9c 01       	movw	r18, r24
     6f8:	2e 5f       	subi	r18, 0xFE	; 254
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	ca 01       	movw	r24, r20
     6fe:	b9 01       	movw	r22, r18
     700:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

		xReturn = pdPASS;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	02 c0       	rjmp	.+4      	; 0x70e <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     710:	27 96       	adiw	r28, 0x07	; 7
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	cf 91       	pop	r28
     71e:	df 91       	pop	r29
     720:	08 95       	ret

00000722 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     722:	df 93       	push	r29
     724:	cf 93       	push	r28
     726:	00 d0       	rcall	.+0      	; 0x728 <vCoRoutineAddToDelayedList+0x6>
     728:	00 d0       	rcall	.+0      	; 0x72a <vCoRoutineAddToDelayedList+0x8>
     72a:	00 d0       	rcall	.+0      	; 0x72c <vCoRoutineAddToDelayedList+0xa>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9c 83       	std	Y+4, r25	; 0x04
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	7e 83       	std	Y+6, r23	; 0x06
     736:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     738:	20 91 6b 00 	lds	r18, 0x006B
     73c:	30 91 6c 00 	lds	r19, 0x006C
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	82 0f       	add	r24, r18
     746:	93 1f       	adc	r25, r19
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     74c:	80 91 68 00 	lds	r24, 0x0068
     750:	90 91 69 00 	lds	r25, 0x0069
     754:	02 96       	adiw	r24, 0x02	; 2
     756:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     75a:	e0 91 68 00 	lds	r30, 0x0068
     75e:	f0 91 69 00 	lds	r31, 0x0069
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	93 83       	std	Z+3, r25	; 0x03
     768:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     76a:	20 91 6b 00 	lds	r18, 0x006B
     76e:	30 91 6c 00 	lds	r19, 0x006C
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	70 f4       	brcc	.+28     	; 0x798 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     77c:	80 91 97 00 	lds	r24, 0x0097
     780:	90 91 98 00 	lds	r25, 0x0098
     784:	20 91 68 00 	lds	r18, 0x0068
     788:	30 91 69 00 	lds	r19, 0x0069
     78c:	2e 5f       	subi	r18, 0xFE	; 254
     78e:	3f 4f       	sbci	r19, 0xFF	; 255
     790:	b9 01       	movw	r22, r18
     792:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
     796:	0d c0       	rjmp	.+26     	; 0x7b2 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     798:	80 91 95 00 	lds	r24, 0x0095
     79c:	90 91 96 00 	lds	r25, 0x0096
     7a0:	20 91 68 00 	lds	r18, 0x0068
     7a4:	30 91 69 00 	lds	r19, 0x0069
     7a8:	2e 5f       	subi	r18, 0xFE	; 254
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	b9 01       	movw	r22, r18
     7ae:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
	}

	if( pxEventList )
     7b2:	8d 81       	ldd	r24, Y+5	; 0x05
     7b4:	9e 81       	ldd	r25, Y+6	; 0x06
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	61 f0       	breq	.+24     	; 0x7d2 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     7ba:	80 91 68 00 	lds	r24, 0x0068
     7be:	90 91 69 00 	lds	r25, 0x0069
     7c2:	9c 01       	movw	r18, r24
     7c4:	24 5f       	subi	r18, 0xF4	; 244
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	9e 81       	ldd	r25, Y+6	; 0x06
     7cc:	b9 01       	movw	r22, r18
     7ce:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
	}
}
     7d2:	26 96       	adiw	r28, 0x06	; 6
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <prvCheckPendingReadyList+0x6>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	3a c0       	rjmp	.+116    	; 0x864 <__stack+0x5>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     7f0:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     7f2:	e0 91 9e 00 	lds	r30, 0x009E
     7f6:	f0 91 9f 00 	lds	r31, 0x009F
     7fa:	86 81       	ldd	r24, Z+6	; 0x06
     7fc:	97 81       	ldd	r25, Z+7	; 0x07
     7fe:	9a 83       	std	Y+2, r25	; 0x02
     800:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	0c 96       	adiw	r24, 0x0c	; 12
     808:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     80c:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	02 96       	adiw	r24, 0x02	; 2
     814:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     818:	e9 81       	ldd	r30, Y+1	; 0x01
     81a:	fa 81       	ldd	r31, Y+2	; 0x02
     81c:	96 89       	ldd	r25, Z+22	; 0x16
     81e:	80 91 6a 00 	lds	r24, 0x006A
     822:	89 17       	cp	r24, r25
     824:	28 f4       	brcc	.+10     	; 0x830 <prvCheckPendingReadyList+0x4c>
     826:	e9 81       	ldd	r30, Y+1	; 0x01
     828:	fa 81       	ldd	r31, Y+2	; 0x02
     82a:	86 89       	ldd	r24, Z+22	; 0x16
     82c:	80 93 6a 00 	sts	0x006A, r24
     830:	e9 81       	ldd	r30, Y+1	; 0x01
     832:	fa 81       	ldd	r31, Y+2	; 0x02
     834:	86 89       	ldd	r24, Z+22	; 0x16
     836:	28 2f       	mov	r18, r24
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	c9 01       	movw	r24, r18
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	ac 01       	movw	r20, r24
     84e:	4f 58       	subi	r20, 0x8F	; 143
     850:	5f 4f       	sbci	r21, 0xFF	; 255
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	9c 01       	movw	r18, r24
     858:	2e 5f       	subi	r18, 0xFE	; 254
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	ca 01       	movw	r24, r20
     85e:	b9 01       	movw	r22, r18
     860:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     864:	80 91 99 00 	lds	r24, 0x0099
     868:	88 23       	and	r24, r24
     86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
     86c:	c1 cf       	rjmp	.-126    	; 0x7f0 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	08 95       	ret

00000878 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	00 d0       	rcall	.+0      	; 0x87e <prvCheckDelayedList+0x6>
     87e:	00 d0       	rcall	.+0      	; 0x880 <prvCheckDelayedList+0x8>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     884:	0e 94 4b 12 	call	0x2496	; 0x2496 <xTaskGetTickCount>
     888:	20 91 6d 00 	lds	r18, 0x006D
     88c:	30 91 6e 00 	lds	r19, 0x006E
     890:	82 1b       	sub	r24, r18
     892:	93 0b       	sbc	r25, r19
     894:	90 93 70 00 	sts	0x0070, r25
     898:	80 93 6f 00 	sts	0x006F, r24
     89c:	85 c0       	rjmp	.+266    	; 0x9a8 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     89e:	80 91 6b 00 	lds	r24, 0x006B
     8a2:	90 91 6c 00 	lds	r25, 0x006C
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	90 93 6c 00 	sts	0x006C, r25
     8ac:	80 93 6b 00 	sts	0x006B, r24
		xPassedTicks--;
     8b0:	80 91 6f 00 	lds	r24, 0x006F
     8b4:	90 91 70 00 	lds	r25, 0x0070
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	90 93 70 00 	sts	0x0070, r25
     8be:	80 93 6f 00 	sts	0x006F, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     8c2:	80 91 6b 00 	lds	r24, 0x006B
     8c6:	90 91 6c 00 	lds	r25, 0x006C
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <prvCheckDelayedList+0x58>
     8ce:	64 c0       	rjmp	.+200    	; 0x998 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     8d0:	80 91 95 00 	lds	r24, 0x0095
     8d4:	90 91 96 00 	lds	r25, 0x0096
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     8dc:	80 91 97 00 	lds	r24, 0x0097
     8e0:	90 91 98 00 	lds	r25, 0x0098
     8e4:	90 93 96 00 	sts	0x0096, r25
     8e8:	80 93 95 00 	sts	0x0095, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	90 93 98 00 	sts	0x0098, r25
     8f4:	80 93 97 00 	sts	0x0097, r24
     8f8:	4f c0       	rjmp	.+158    	; 0x998 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     8fa:	e0 91 95 00 	lds	r30, 0x0095
     8fe:	f0 91 96 00 	lds	r31, 0x0096
     902:	05 80       	ldd	r0, Z+5	; 0x05
     904:	f6 81       	ldd	r31, Z+6	; 0x06
     906:	e0 2d       	mov	r30, r0
     908:	86 81       	ldd	r24, Z+6	; 0x06
     90a:	97 81       	ldd	r25, Z+7	; 0x07
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     910:	eb 81       	ldd	r30, Y+3	; 0x03
     912:	fc 81       	ldd	r31, Y+4	; 0x04
     914:	22 81       	ldd	r18, Z+2	; 0x02
     916:	33 81       	ldd	r19, Z+3	; 0x03
     918:	80 91 6b 00 	lds	r24, 0x006B
     91c:	90 91 6c 00 	lds	r25, 0x006C
     920:	82 17       	cp	r24, r18
     922:	93 07       	cpc	r25, r19
     924:	08 f4       	brcc	.+2      	; 0x928 <prvCheckDelayedList+0xb0>
     926:	40 c0       	rjmp	.+128    	; 0x9a8 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     928:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	9c 81       	ldd	r25, Y+4	; 0x04
     92e:	02 96       	adiw	r24, 0x02	; 2
     930:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     934:	eb 81       	ldd	r30, Y+3	; 0x03
     936:	fc 81       	ldd	r31, Y+4	; 0x04
     938:	84 89       	ldd	r24, Z+20	; 0x14
     93a:	95 89       	ldd	r25, Z+21	; 0x15
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	29 f0       	breq	.+10     	; 0x94a <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	9c 81       	ldd	r25, Y+4	; 0x04
     944:	0c 96       	adiw	r24, 0x0c	; 12
     946:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     94a:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     94c:	eb 81       	ldd	r30, Y+3	; 0x03
     94e:	fc 81       	ldd	r31, Y+4	; 0x04
     950:	96 89       	ldd	r25, Z+22	; 0x16
     952:	80 91 6a 00 	lds	r24, 0x006A
     956:	89 17       	cp	r24, r25
     958:	28 f4       	brcc	.+10     	; 0x964 <prvCheckDelayedList+0xec>
     95a:	eb 81       	ldd	r30, Y+3	; 0x03
     95c:	fc 81       	ldd	r31, Y+4	; 0x04
     95e:	86 89       	ldd	r24, Z+22	; 0x16
     960:	80 93 6a 00 	sts	0x006A, r24
     964:	eb 81       	ldd	r30, Y+3	; 0x03
     966:	fc 81       	ldd	r31, Y+4	; 0x04
     968:	86 89       	ldd	r24, Z+22	; 0x16
     96a:	28 2f       	mov	r18, r24
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	c9 01       	movw	r24, r18
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	ac 01       	movw	r20, r24
     982:	4f 58       	subi	r20, 0x8F	; 143
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	9c 81       	ldd	r25, Y+4	; 0x04
     98a:	9c 01       	movw	r18, r24
     98c:	2e 5f       	subi	r18, 0xFE	; 254
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	ca 01       	movw	r24, r20
     992:	b9 01       	movw	r22, r18
     994:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     998:	e0 91 95 00 	lds	r30, 0x0095
     99c:	f0 91 96 00 	lds	r31, 0x0096
     9a0:	80 81       	ld	r24, Z
     9a2:	88 23       	and	r24, r24
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <prvCheckDelayedList+0x130>
     9a6:	a9 cf       	rjmp	.-174    	; 0x8fa <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     9a8:	80 91 6f 00 	lds	r24, 0x006F
     9ac:	90 91 70 00 	lds	r25, 0x0070
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <prvCheckDelayedList+0x13e>
     9b4:	74 cf       	rjmp	.-280    	; 0x89e <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     9b6:	80 91 6b 00 	lds	r24, 0x006B
     9ba:	90 91 6c 00 	lds	r25, 0x006C
     9be:	90 93 6e 00 	sts	0x006E, r25
     9c2:	80 93 6d 00 	sts	0x006D, r24
}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	00 d0       	rcall	.+0      	; 0x9da <vCoRoutineSchedule+0x6>
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     9de:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     9e2:	0e 94 3c 04 	call	0x878	; 0x878 <prvCheckDelayedList>
     9e6:	0a c0       	rjmp	.+20     	; 0x9fc <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     9e8:	80 91 6a 00 	lds	r24, 0x006A
     9ec:	88 23       	and	r24, r24
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <vCoRoutineSchedule+0x1e>
     9f0:	66 c0       	rjmp	.+204    	; 0xabe <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     9f2:	80 91 6a 00 	lds	r24, 0x006A
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	80 93 6a 00 	sts	0x006A, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     9fc:	80 91 6a 00 	lds	r24, 0x006A
     a00:	28 2f       	mov	r18, r24
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	c9 01       	movw	r24, r18
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	fc 01       	movw	r30, r24
     a18:	ef 58       	subi	r30, 0x8F	; 143
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	80 81       	ld	r24, Z
     a1e:	88 23       	and	r24, r24
     a20:	19 f3       	breq	.-58     	; 0x9e8 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     a22:	80 91 6a 00 	lds	r24, 0x006A
     a26:	28 2f       	mov	r18, r24
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	c9 01       	movw	r24, r18
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	82 0f       	add	r24, r18
     a3a:	93 1f       	adc	r25, r19
     a3c:	8f 58       	subi	r24, 0x8F	; 143
     a3e:	9f 4f       	sbci	r25, 0xFF	; 255
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	e9 81       	ldd	r30, Y+1	; 0x01
     a46:	fa 81       	ldd	r31, Y+2	; 0x02
     a48:	01 80       	ldd	r0, Z+1	; 0x01
     a4a:	f2 81       	ldd	r31, Z+2	; 0x02
     a4c:	e0 2d       	mov	r30, r0
     a4e:	82 81       	ldd	r24, Z+2	; 0x02
     a50:	93 81       	ldd	r25, Z+3	; 0x03
     a52:	e9 81       	ldd	r30, Y+1	; 0x01
     a54:	fa 81       	ldd	r31, Y+2	; 0x02
     a56:	92 83       	std	Z+2, r25	; 0x02
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	e9 81       	ldd	r30, Y+1	; 0x01
     a5c:	fa 81       	ldd	r31, Y+2	; 0x02
     a5e:	21 81       	ldd	r18, Z+1	; 0x01
     a60:	32 81       	ldd	r19, Z+2	; 0x02
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	03 96       	adiw	r24, 0x03	; 3
     a68:	28 17       	cp	r18, r24
     a6a:	39 07       	cpc	r19, r25
     a6c:	59 f4       	brne	.+22     	; 0xa84 <vCoRoutineSchedule+0xb0>
     a6e:	e9 81       	ldd	r30, Y+1	; 0x01
     a70:	fa 81       	ldd	r31, Y+2	; 0x02
     a72:	01 80       	ldd	r0, Z+1	; 0x01
     a74:	f2 81       	ldd	r31, Z+2	; 0x02
     a76:	e0 2d       	mov	r30, r0
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	e9 81       	ldd	r30, Y+1	; 0x01
     a7e:	fa 81       	ldd	r31, Y+2	; 0x02
     a80:	92 83       	std	Z+2, r25	; 0x02
     a82:	81 83       	std	Z+1, r24	; 0x01
     a84:	e9 81       	ldd	r30, Y+1	; 0x01
     a86:	fa 81       	ldd	r31, Y+2	; 0x02
     a88:	01 80       	ldd	r0, Z+1	; 0x01
     a8a:	f2 81       	ldd	r31, Z+2	; 0x02
     a8c:	e0 2d       	mov	r30, r0
     a8e:	86 81       	ldd	r24, Z+6	; 0x06
     a90:	97 81       	ldd	r25, Z+7	; 0x07
     a92:	90 93 69 00 	sts	0x0069, r25
     a96:	80 93 68 00 	sts	0x0068, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     a9a:	e0 91 68 00 	lds	r30, 0x0068
     a9e:	f0 91 69 00 	lds	r31, 0x0069
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	80 91 68 00 	lds	r24, 0x0068
     aaa:	90 91 69 00 	lds	r25, 0x0069
     aae:	e0 91 68 00 	lds	r30, 0x0068
     ab2:	f0 91 69 00 	lds	r31, 0x0069
     ab6:	27 89       	ldd	r18, Z+23	; 0x17
     ab8:	62 2f       	mov	r22, r18
     aba:	fa 01       	movw	r30, r20
     abc:	09 95       	icall

	return;
}
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	08 95       	ret

00000ac8 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	0f 92       	push	r0
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     ad2:	19 82       	std	Y+1, r1	; 0x01
     ad4:	13 c0       	rjmp	.+38     	; 0xafc <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	c9 01       	movw	r24, r18
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	8f 58       	subi	r24, 0x8F	; 143
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	50 f3       	brcs	.-44     	; 0xad6 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     b02:	83 e8       	ldi	r24, 0x83	; 131
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     b0a:	8c e8       	ldi	r24, 0x8C	; 140
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     b12:	89 e9       	ldi	r24, 0x99	; 153
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     b1a:	83 e8       	ldi	r24, 0x83	; 131
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 96 00 	sts	0x0096, r25
     b22:	80 93 95 00 	sts	0x0095, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     b26:	8c e8       	ldi	r24, 0x8C	; 140
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 98 00 	sts	0x0098, r25
     b2e:	80 93 97 00 	sts	0x0097, r24
}
     b32:	0f 90       	pop	r0
     b34:	cf 91       	pop	r28
     b36:	df 91       	pop	r29
     b38:	08 95       	ret

00000b3a <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <xCoRoutineRemoveFromEventList+0x6>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <xCoRoutineRemoveFromEventList+0x8>
     b42:	0f 92       	push	r0
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	9d 83       	std	Y+5, r25	; 0x05
     b4a:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     b4c:	ec 81       	ldd	r30, Y+4	; 0x04
     b4e:	fd 81       	ldd	r31, Y+5	; 0x05
     b50:	05 80       	ldd	r0, Z+5	; 0x05
     b52:	f6 81       	ldd	r31, Z+6	; 0x06
     b54:	e0 2d       	mov	r30, r0
     b56:	86 81       	ldd	r24, Z+6	; 0x06
     b58:	97 81       	ldd	r25, Z+7	; 0x07
     b5a:	9b 83       	std	Y+3, r25	; 0x03
     b5c:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	0c 96       	adiw	r24, 0x0c	; 12
     b64:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	9b 81       	ldd	r25, Y+3	; 0x03
     b6c:	9c 01       	movw	r18, r24
     b6e:	24 5f       	subi	r18, 0xF4	; 244
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	89 e9       	ldi	r24, 0x99	; 153
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	b9 01       	movw	r22, r18
     b78:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     b7c:	ea 81       	ldd	r30, Y+2	; 0x02
     b7e:	fb 81       	ldd	r31, Y+3	; 0x03
     b80:	96 89       	ldd	r25, Z+22	; 0x16
     b82:	e0 91 68 00 	lds	r30, 0x0068
     b86:	f0 91 69 00 	lds	r31, 0x0069
     b8a:	86 89       	ldd	r24, Z+22	; 0x16
     b8c:	98 17       	cp	r25, r24
     b8e:	18 f0       	brcs	.+6      	; 0xb96 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     b96:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     b98:	89 81       	ldd	r24, Y+1	; 0x01
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <pvPortMalloc+0x6>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <pvPortMalloc+0x8>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	9c 83       	std	Y+4, r25	; 0x04
     bb8:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     bba:	1a 82       	std	Y+2, r1	; 0x02
     bbc:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     bbe:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     bc2:	80 91 a2 00 	lds	r24, 0x00A2
     bc6:	90 91 a3 00 	lds	r25, 0x00A3
     bca:	2b 81       	ldd	r18, Y+3	; 0x03
     bcc:	3c 81       	ldd	r19, Y+4	; 0x04
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	22 e0       	ldi	r18, 0x02	; 2
     bd4:	88 35       	cpi	r24, 0x58	; 88
     bd6:	92 07       	cpc	r25, r18
     bd8:	18 f5       	brcc	.+70     	; 0xc20 <pvPortMalloc+0x76>
     bda:	20 91 a2 00 	lds	r18, 0x00A2
     bde:	30 91 a3 00 	lds	r19, 0x00A3
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	28 0f       	add	r18, r24
     be8:	39 1f       	adc	r19, r25
     bea:	80 91 a2 00 	lds	r24, 0x00A2
     bee:	90 91 a3 00 	lds	r25, 0x00A3
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a0 f4       	brcc	.+40     	; 0xc20 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     bf8:	80 91 a2 00 	lds	r24, 0x00A2
     bfc:	90 91 a3 00 	lds	r25, 0x00A3
     c00:	8c 55       	subi	r24, 0x5C	; 92
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     c08:	20 91 a2 00 	lds	r18, 0x00A2
     c0c:	30 91 a3 00 	lds	r19, 0x00A3
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	90 93 a3 00 	sts	0x00A3, r25
     c1c:	80 93 a2 00 	sts	0x00A2, r24
		}	
	}
	xTaskResumeAll();
     c20:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <vPortFree+0x6>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     c56:	10 92 a3 00 	sts	0x00A3, r1
     c5a:	10 92 a2 00 	sts	0x00A2, r1
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     c6c:	20 91 a2 00 	lds	r18, 0x00A2
     c70:	30 91 a3 00 	lds	r19, 0x00A3
     c74:	88 e5       	ldi	r24, 0x58	; 88
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	82 1b       	sub	r24, r18
     c7a:	93 0b       	sbc	r25, r19
}
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <vListInitialise+0x6>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	03 96       	adiw	r24, 0x03	; 3
     c96:	e9 81       	ldd	r30, Y+1	; 0x01
     c98:	fa 81       	ldd	r31, Y+2	; 0x02
     c9a:	92 83       	std	Z+2, r25	; 0x02
     c9c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ca0:	fa 81       	ldd	r31, Y+2	; 0x02
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	9f ef       	ldi	r25, 0xFF	; 255
     ca6:	94 83       	std	Z+4, r25	; 0x04
     ca8:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	03 96       	adiw	r24, 0x03	; 3
     cb0:	e9 81       	ldd	r30, Y+1	; 0x01
     cb2:	fa 81       	ldd	r31, Y+2	; 0x02
     cb4:	96 83       	std	Z+6, r25	; 0x06
     cb6:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	03 96       	adiw	r24, 0x03	; 3
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	90 87       	std	Z+8, r25	; 0x08
     cc4:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     cc6:	e9 81       	ldd	r30, Y+1	; 0x01
     cc8:	fa 81       	ldd	r31, Y+2	; 0x02
     cca:	10 82       	st	Z, r1
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <vListInitialiseItem+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     ce4:	e9 81       	ldd	r30, Y+1	; 0x01
     ce6:	fa 81       	ldd	r31, Y+2	; 0x02
     ce8:	11 86       	std	Z+9, r1	; 0x09
     cea:	10 86       	std	Z+8, r1	; 0x08
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <vListInsertEnd+0x6>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <vListInsertEnd+0x8>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <vListInsertEnd+0xa>
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	7e 83       	std	Y+6, r23	; 0x06
     d0a:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     d0c:	eb 81       	ldd	r30, Y+3	; 0x03
     d0e:	fc 81       	ldd	r31, Y+4	; 0x04
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	92 81       	ldd	r25, Z+2	; 0x02
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     d18:	e9 81       	ldd	r30, Y+1	; 0x01
     d1a:	fa 81       	ldd	r31, Y+2	; 0x02
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	ed 81       	ldd	r30, Y+5	; 0x05
     d22:	fe 81       	ldd	r31, Y+6	; 0x06
     d24:	93 83       	std	Z+3, r25	; 0x03
     d26:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     d28:	eb 81       	ldd	r30, Y+3	; 0x03
     d2a:	fc 81       	ldd	r31, Y+4	; 0x04
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	92 81       	ldd	r25, Z+2	; 0x02
     d30:	ed 81       	ldd	r30, Y+5	; 0x05
     d32:	fe 81       	ldd	r31, Y+6	; 0x06
     d34:	95 83       	std	Z+5, r25	; 0x05
     d36:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     d38:	e9 81       	ldd	r30, Y+1	; 0x01
     d3a:	fa 81       	ldd	r31, Y+2	; 0x02
     d3c:	02 80       	ldd	r0, Z+2	; 0x02
     d3e:	f3 81       	ldd	r31, Z+3	; 0x03
     d40:	e0 2d       	mov	r30, r0
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	95 83       	std	Z+5, r25	; 0x05
     d48:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	93 83       	std	Z+3, r25	; 0x03
     d54:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	eb 81       	ldd	r30, Y+3	; 0x03
     d5c:	fc 81       	ldd	r31, Y+4	; 0x04
     d5e:	92 83       	std	Z+2, r25	; 0x02
     d60:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d62:	ed 81       	ldd	r30, Y+5	; 0x05
     d64:	fe 81       	ldd	r31, Y+6	; 0x06
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	91 87       	std	Z+9, r25	; 0x09
     d6c:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	80 81       	ld	r24, Z
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	eb 81       	ldd	r30, Y+3	; 0x03
     d78:	fc 81       	ldd	r31, Y+4	; 0x04
     d7a:	80 83       	st	Z, r24
}
     d7c:	26 96       	adiw	r28, 0x06	; 6
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	28 97       	sbiw	r28, 0x08	; 8
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
     da6:	78 87       	std	Y+8, r23	; 0x08
     da8:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     daa:	ef 81       	ldd	r30, Y+7	; 0x07
     dac:	f8 85       	ldd	r31, Y+8	; 0x08
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	8f 3f       	cpi	r24, 0xFF	; 255
     dbe:	92 07       	cpc	r25, r18
     dc0:	39 f4       	brne	.+14     	; 0xdd0 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     dc2:	ed 81       	ldd	r30, Y+5	; 0x05
     dc4:	fe 81       	ldd	r31, Y+6	; 0x06
     dc6:	87 81       	ldd	r24, Z+7	; 0x07
     dc8:	90 85       	ldd	r25, Z+8	; 0x08
     dca:	9c 83       	std	Y+4, r25	; 0x04
     dcc:	8b 83       	std	Y+3, r24	; 0x03
     dce:	18 c0       	rjmp	.+48     	; 0xe00 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	03 96       	adiw	r24, 0x03	; 3
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	06 c0       	rjmp	.+12     	; 0xde8 <vListInsert+0x5a>
     ddc:	eb 81       	ldd	r30, Y+3	; 0x03
     dde:	fc 81       	ldd	r31, Y+4	; 0x04
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	02 80       	ldd	r0, Z+2	; 0x02
     dee:	f3 81       	ldd	r31, Z+3	; 0x03
     df0:	e0 2d       	mov	r30, r0
     df2:	20 81       	ld	r18, Z
     df4:	31 81       	ldd	r19, Z+1	; 0x01
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	70 f7       	brcc	.-36     	; 0xddc <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     e00:	eb 81       	ldd	r30, Y+3	; 0x03
     e02:	fc 81       	ldd	r31, Y+4	; 0x04
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	ef 81       	ldd	r30, Y+7	; 0x07
     e0a:	f8 85       	ldd	r31, Y+8	; 0x08
     e0c:	93 83       	std	Z+3, r25	; 0x03
     e0e:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     e10:	ef 81       	ldd	r30, Y+7	; 0x07
     e12:	f8 85       	ldd	r31, Y+8	; 0x08
     e14:	02 80       	ldd	r0, Z+2	; 0x02
     e16:	f3 81       	ldd	r31, Z+3	; 0x03
     e18:	e0 2d       	mov	r30, r0
     e1a:	8f 81       	ldd	r24, Y+7	; 0x07
     e1c:	98 85       	ldd	r25, Y+8	; 0x08
     e1e:	95 83       	std	Z+5, r25	; 0x05
     e20:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     e22:	ef 81       	ldd	r30, Y+7	; 0x07
     e24:	f8 85       	ldd	r31, Y+8	; 0x08
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	95 83       	std	Z+5, r25	; 0x05
     e2c:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     e2e:	8f 81       	ldd	r24, Y+7	; 0x07
     e30:	98 85       	ldd	r25, Y+8	; 0x08
     e32:	eb 81       	ldd	r30, Y+3	; 0x03
     e34:	fc 81       	ldd	r31, Y+4	; 0x04
     e36:	93 83       	std	Z+3, r25	; 0x03
     e38:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e3a:	ef 81       	ldd	r30, Y+7	; 0x07
     e3c:	f8 85       	ldd	r31, Y+8	; 0x08
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	91 87       	std	Z+9, r25	; 0x09
     e44:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     e46:	ed 81       	ldd	r30, Y+5	; 0x05
     e48:	fe 81       	ldd	r31, Y+6	; 0x06
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	ed 81       	ldd	r30, Y+5	; 0x05
     e50:	fe 81       	ldd	r31, Y+6	; 0x06
     e52:	80 83       	st	Z, r24
}
     e54:	28 96       	adiw	r28, 0x08	; 8
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <vListRemove+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <vListRemove+0x8>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e76:	eb 81       	ldd	r30, Y+3	; 0x03
     e78:	fc 81       	ldd	r31, Y+4	; 0x04
     e7a:	a2 81       	ldd	r26, Z+2	; 0x02
     e7c:	b3 81       	ldd	r27, Z+3	; 0x03
     e7e:	eb 81       	ldd	r30, Y+3	; 0x03
     e80:	fc 81       	ldd	r31, Y+4	; 0x04
     e82:	84 81       	ldd	r24, Z+4	; 0x04
     e84:	95 81       	ldd	r25, Z+5	; 0x05
     e86:	15 96       	adiw	r26, 0x05	; 5
     e88:	9c 93       	st	X, r25
     e8a:	8e 93       	st	-X, r24
     e8c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e8e:	eb 81       	ldd	r30, Y+3	; 0x03
     e90:	fc 81       	ldd	r31, Y+4	; 0x04
     e92:	a4 81       	ldd	r26, Z+4	; 0x04
     e94:	b5 81       	ldd	r27, Z+5	; 0x05
     e96:	eb 81       	ldd	r30, Y+3	; 0x03
     e98:	fc 81       	ldd	r31, Y+4	; 0x04
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	13 96       	adiw	r26, 0x03	; 3
     ea0:	9c 93       	st	X, r25
     ea2:	8e 93       	st	-X, r24
     ea4:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	80 85       	ldd	r24, Z+8	; 0x08
     eac:	91 85       	ldd	r25, Z+9	; 0x09
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	21 81       	ldd	r18, Z+1	; 0x01
     eb8:	32 81       	ldd	r19, Z+2	; 0x02
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	41 f4       	brne	.+16     	; 0xed4 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ec4:	eb 81       	ldd	r30, Y+3	; 0x03
     ec6:	fc 81       	ldd	r31, Y+4	; 0x04
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	95 81       	ldd	r25, Z+5	; 0x05
     ecc:	e9 81       	ldd	r30, Y+1	; 0x01
     ece:	fa 81       	ldd	r31, Y+2	; 0x02
     ed0:	92 83       	std	Z+2, r25	; 0x02
     ed2:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     ed4:	eb 81       	ldd	r30, Y+3	; 0x03
     ed6:	fc 81       	ldd	r31, Y+4	; 0x04
     ed8:	11 86       	std	Z+9, r1	; 0x09
     eda:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     edc:	e9 81       	ldd	r30, Y+1	; 0x01
     ede:	fa 81       	ldd	r31, Y+2	; 0x02
     ee0:	80 81       	ld	r24, Z
     ee2:	81 50       	subi	r24, 0x01	; 1
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	fa 81       	ldd	r31, Y+2	; 0x02
     ee8:	80 83       	st	Z, r24
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <main>:

void LED1(void *ptr);
void LED2(void *ptr);
void LED3(void *ptr);
int main(void)
{
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate(LED1,0,100,0,0,0);
     f0e:	8d eb       	ldi	r24, 0xBD	; 189
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	44 e6       	ldi	r20, 0x64	; 100
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	00 e0       	ldi	r16, 0x00	; 0
     f20:	ee 24       	eor	r14, r14
     f22:	ff 24       	eor	r15, r15
     f24:	cc 24       	eor	r12, r12
     f26:	dd 24       	eor	r13, r13
     f28:	aa 24       	eor	r10, r10
     f2a:	bb 24       	eor	r11, r11
     f2c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskGenericCreate>
	xTaskCreate(LED2,0,100,0,1,0);
     f30:	80 ee       	ldi	r24, 0xE0	; 224
     f32:	97 e0       	ldi	r25, 0x07	; 7
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	44 e6       	ldi	r20, 0x64	; 100
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	01 e0       	ldi	r16, 0x01	; 1
     f42:	ee 24       	eor	r14, r14
     f44:	ff 24       	eor	r15, r15
     f46:	cc 24       	eor	r12, r12
     f48:	dd 24       	eor	r13, r13
     f4a:	aa 24       	eor	r10, r10
     f4c:	bb 24       	eor	r11, r11
     f4e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskGenericCreate>
	xTaskCreate(LED3,0,100,0,2,0);
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	98 e0       	ldi	r25, 0x08	; 8
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	44 e6       	ldi	r20, 0x64	; 100
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	02 e0       	ldi	r16, 0x02	; 2
     f64:	ee 24       	eor	r14, r14
     f66:	ff 24       	eor	r15, r15
     f68:	cc 24       	eor	r12, r12
     f6a:	dd 24       	eor	r13, r13
     f6c:	aa 24       	eor	r10, r10
     f6e:	bb 24       	eor	r11, r11
     f70:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskGenericCreate>
	vTaskStartScheduler();
     f74:	0e 94 72 11 	call	0x22e4	; 0x22e4 <vTaskStartScheduler>
     f78:	ff cf       	rjmp	.-2      	; 0xf78 <main+0x80>

00000f7a <LED1>:
	{

	}
}
void LED1(void *ptr)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <LED1+0x6>
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Vid_WrtPinDir(M_DIO_PORTA,M_DIO_PIN0,M_DIO_OUTPUT);
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 49 00 	call	0x92	; 0x92 <M_DIO_Vid_WrtPinDir>
	static u8 state=0;
	while(1)
	{
		M_DIO_Vid_wrtPinVal(M_DIO_PORTA,M_DIO_PIN0,state);
     f94:	90 91 fc 02 	lds	r25, 0x02FC
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	49 2f       	mov	r20, r25
     f9e:	0e 94 04 01 	call	0x208	; 0x208 <M_DIO_Vid_wrtPinVal>
		state =!state;
     fa2:	80 91 fc 02 	lds	r24, 0x02FC
     fa6:	1b 82       	std	Y+3, r1	; 0x03
     fa8:	88 23       	and	r24, r24
     faa:	11 f4       	brne	.+4      	; 0xfb0 <LED1+0x36>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	80 93 fc 02 	sts	0x02FC, r24
		vTaskDelay(1000);
     fb6:	88 ee       	ldi	r24, 0xE8	; 232
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 3d 11 	call	0x227a	; 0x227a <vTaskDelay>
     fbe:	ea cf       	rjmp	.-44     	; 0xf94 <LED1+0x1a>

00000fc0 <LED2>:
	}

}
void LED2(void *ptr)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <LED2+0x6>
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Vid_WrtPinDir(M_DIO_PORTA,M_DIO_PIN1,M_DIO_OUTPUT);
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	0e 94 49 00 	call	0x92	; 0x92 <M_DIO_Vid_WrtPinDir>
	static u8 state=0;
	while(1)
	{
		M_DIO_Vid_wrtPinVal(M_DIO_PORTA,M_DIO_PIN1,state);
     fda:	90 91 fd 02 	lds	r25, 0x02FD
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	49 2f       	mov	r20, r25
     fe4:	0e 94 04 01 	call	0x208	; 0x208 <M_DIO_Vid_wrtPinVal>
		state =!state;
     fe8:	80 91 fd 02 	lds	r24, 0x02FD
     fec:	1b 82       	std	Y+3, r1	; 0x03
     fee:	88 23       	and	r24, r24
     ff0:	11 f4       	brne	.+4      	; 0xff6 <LED2+0x36>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8b 83       	std	Y+3, r24	; 0x03
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	80 93 fd 02 	sts	0x02FD, r24
		vTaskDelay(2000);
     ffc:	80 ed       	ldi	r24, 0xD0	; 208
     ffe:	97 e0       	ldi	r25, 0x07	; 7
    1000:	0e 94 3d 11 	call	0x227a	; 0x227a <vTaskDelay>
    1004:	ea cf       	rjmp	.-44     	; 0xfda <LED2+0x1a>

00001006 <LED3>:
	}
}
void LED3(void *ptr)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <LED3+0x6>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Vid_WrtPinDir(M_DIO_PORTA,M_DIO_PIN2,M_DIO_OUTPUT);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	62 e0       	ldi	r22, 0x02	; 2
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	0e 94 49 00 	call	0x92	; 0x92 <M_DIO_Vid_WrtPinDir>
	static u8 state=0;
	while(1)
	{
		M_DIO_Vid_wrtPinVal(M_DIO_PORTA,M_DIO_PIN2,state);
    1020:	90 91 fe 02 	lds	r25, 0x02FE
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	49 2f       	mov	r20, r25
    102a:	0e 94 04 01 	call	0x208	; 0x208 <M_DIO_Vid_wrtPinVal>
		state =!state;
    102e:	80 91 fe 02 	lds	r24, 0x02FE
    1032:	1b 82       	std	Y+3, r1	; 0x03
    1034:	88 23       	and	r24, r24
    1036:	11 f4       	brne	.+4      	; 0x103c <LED3+0x36>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	80 93 fe 02 	sts	0x02FE, r24
		vTaskDelay(3000);
    1042:	88 eb       	ldi	r24, 0xB8	; 184
    1044:	9b e0       	ldi	r25, 0x0B	; 11
    1046:	0e 94 3d 11 	call	0x227a	; 0x227a <vTaskDelay>
    104a:	ea cf       	rjmp	.-44     	; 0x1020 <LED3+0x1a>

0000104c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	28 97       	sbiw	r28, 0x08	; 8
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	7e 83       	std	Y+6, r23	; 0x06
    1066:	6d 83       	std	Y+5, r22	; 0x05
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    106c:	eb 81       	ldd	r30, Y+3	; 0x03
    106e:	fc 81       	ldd	r31, Y+4	; 0x04
    1070:	81 e1       	ldi	r24, 0x11	; 17
    1072:	80 83       	st	Z, r24
	pxTopOfStack--;
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    107e:	eb 81       	ldd	r30, Y+3	; 0x03
    1080:	fc 81       	ldd	r31, Y+4	; 0x04
    1082:	82 e2       	ldi	r24, 0x22	; 34
    1084:	80 83       	st	Z, r24
	pxTopOfStack--;
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1090:	eb 81       	ldd	r30, Y+3	; 0x03
    1092:	fc 81       	ldd	r31, Y+4	; 0x04
    1094:	83 e3       	ldi	r24, 0x33	; 51
    1096:	80 83       	st	Z, r24
	pxTopOfStack--;
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	eb 81       	ldd	r30, Y+3	; 0x03
    10ae:	fc 81       	ldd	r31, Y+4	; 0x04
    10b0:	80 83       	st	Z, r24
	pxTopOfStack--;
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	9c 83       	std	Y+4, r25	; 0x04
    10ba:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	89 2f       	mov	r24, r25
    10c2:	99 27       	eor	r25, r25
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	eb 81       	ldd	r30, Y+3	; 0x03
    10cc:	fc 81       	ldd	r31, Y+4	; 0x04
    10ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    10da:	eb 81       	ldd	r30, Y+3	; 0x03
    10dc:	fc 81       	ldd	r31, Y+4	; 0x04
    10de:	10 82       	st	Z, r1
	pxTopOfStack--;
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    10ea:	eb 81       	ldd	r30, Y+3	; 0x03
    10ec:	fc 81       	ldd	r31, Y+4	; 0x04
    10ee:	80 e8       	ldi	r24, 0x80	; 128
    10f0:	80 83       	st	Z, r24
	pxTopOfStack--;
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    10fc:	eb 81       	ldd	r30, Y+3	; 0x03
    10fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1100:	10 82       	st	Z, r1
	pxTopOfStack--;
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    110c:	eb 81       	ldd	r30, Y+3	; 0x03
    110e:	fc 81       	ldd	r31, Y+4	; 0x04
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	80 83       	st	Z, r24
	pxTopOfStack--;
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    111e:	eb 81       	ldd	r30, Y+3	; 0x03
    1120:	fc 81       	ldd	r31, Y+4	; 0x04
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	80 83       	st	Z, r24
	pxTopOfStack--;
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1130:	eb 81       	ldd	r30, Y+3	; 0x03
    1132:	fc 81       	ldd	r31, Y+4	; 0x04
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	80 83       	st	Z, r24
	pxTopOfStack--;
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    1142:	eb 81       	ldd	r30, Y+3	; 0x03
    1144:	fc 81       	ldd	r31, Y+4	; 0x04
    1146:	85 e0       	ldi	r24, 0x05	; 5
    1148:	80 83       	st	Z, r24
	pxTopOfStack--;
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    1154:	eb 81       	ldd	r30, Y+3	; 0x03
    1156:	fc 81       	ldd	r31, Y+4	; 0x04
    1158:	86 e0       	ldi	r24, 0x06	; 6
    115a:	80 83       	st	Z, r24
	pxTopOfStack--;
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    1166:	eb 81       	ldd	r30, Y+3	; 0x03
    1168:	fc 81       	ldd	r31, Y+4	; 0x04
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	80 83       	st	Z, r24
	pxTopOfStack--;
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    1178:	eb 81       	ldd	r30, Y+3	; 0x03
    117a:	fc 81       	ldd	r31, Y+4	; 0x04
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    118a:	eb 81       	ldd	r30, Y+3	; 0x03
    118c:	fc 81       	ldd	r31, Y+4	; 0x04
    118e:	89 e0       	ldi	r24, 0x09	; 9
    1190:	80 83       	st	Z, r24
	pxTopOfStack--;
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    119c:	eb 81       	ldd	r30, Y+3	; 0x03
    119e:	fc 81       	ldd	r31, Y+4	; 0x04
    11a0:	80 e1       	ldi	r24, 0x10	; 16
    11a2:	80 83       	st	Z, r24
	pxTopOfStack--;
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    11ae:	eb 81       	ldd	r30, Y+3	; 0x03
    11b0:	fc 81       	ldd	r31, Y+4	; 0x04
    11b2:	81 e1       	ldi	r24, 0x11	; 17
    11b4:	80 83       	st	Z, r24
	pxTopOfStack--;
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    11c0:	eb 81       	ldd	r30, Y+3	; 0x03
    11c2:	fc 81       	ldd	r31, Y+4	; 0x04
    11c4:	82 e1       	ldi	r24, 0x12	; 18
    11c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    11d2:	eb 81       	ldd	r30, Y+3	; 0x03
    11d4:	fc 81       	ldd	r31, Y+4	; 0x04
    11d6:	83 e1       	ldi	r24, 0x13	; 19
    11d8:	80 83       	st	Z, r24
	pxTopOfStack--;
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    11e4:	eb 81       	ldd	r30, Y+3	; 0x03
    11e6:	fc 81       	ldd	r31, Y+4	; 0x04
    11e8:	84 e1       	ldi	r24, 0x14	; 20
    11ea:	80 83       	st	Z, r24
	pxTopOfStack--;
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    11f6:	eb 81       	ldd	r30, Y+3	; 0x03
    11f8:	fc 81       	ldd	r31, Y+4	; 0x04
    11fa:	85 e1       	ldi	r24, 0x15	; 21
    11fc:	80 83       	st	Z, r24
	pxTopOfStack--;
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    1208:	eb 81       	ldd	r30, Y+3	; 0x03
    120a:	fc 81       	ldd	r31, Y+4	; 0x04
    120c:	86 e1       	ldi	r24, 0x16	; 22
    120e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    121a:	eb 81       	ldd	r30, Y+3	; 0x03
    121c:	fc 81       	ldd	r31, Y+4	; 0x04
    121e:	87 e1       	ldi	r24, 0x17	; 23
    1220:	80 83       	st	Z, r24
	pxTopOfStack--;
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    122c:	eb 81       	ldd	r30, Y+3	; 0x03
    122e:	fc 81       	ldd	r31, Y+4	; 0x04
    1230:	88 e1       	ldi	r24, 0x18	; 24
    1232:	80 83       	st	Z, r24
	pxTopOfStack--;
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	9c 83       	std	Y+4, r25	; 0x04
    123c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    123e:	eb 81       	ldd	r30, Y+3	; 0x03
    1240:	fc 81       	ldd	r31, Y+4	; 0x04
    1242:	89 e1       	ldi	r24, 0x19	; 25
    1244:	80 83       	st	Z, r24
	pxTopOfStack--;
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    1250:	eb 81       	ldd	r30, Y+3	; 0x03
    1252:	fc 81       	ldd	r31, Y+4	; 0x04
    1254:	80 e2       	ldi	r24, 0x20	; 32
    1256:	80 83       	st	Z, r24
	pxTopOfStack--;
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    1262:	eb 81       	ldd	r30, Y+3	; 0x03
    1264:	fc 81       	ldd	r31, Y+4	; 0x04
    1266:	81 e2       	ldi	r24, 0x21	; 33
    1268:	80 83       	st	Z, r24
	pxTopOfStack--;
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	82 e2       	ldi	r24, 0x22	; 34
    127a:	80 83       	st	Z, r24
	pxTopOfStack--;
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    1286:	eb 81       	ldd	r30, Y+3	; 0x03
    1288:	fc 81       	ldd	r31, Y+4	; 0x04
    128a:	83 e2       	ldi	r24, 0x23	; 35
    128c:	80 83       	st	Z, r24
	pxTopOfStack--;
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    1298:	8f 81       	ldd	r24, Y+7	; 0x07
    129a:	98 85       	ldd	r25, Y+8	; 0x08
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	eb 81       	ldd	r30, Y+3	; 0x03
    12a4:	fc 81       	ldd	r31, Y+4	; 0x04
    12a6:	80 83       	st	Z, r24
	pxTopOfStack--;
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	89 2f       	mov	r24, r25
    12b8:	99 27       	eor	r25, r25
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	80 83       	st	Z, r24
	pxTopOfStack--;
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    12d0:	eb 81       	ldd	r30, Y+3	; 0x03
    12d2:	fc 81       	ldd	r31, Y+4	; 0x04
    12d4:	86 e2       	ldi	r24, 0x26	; 38
    12d6:	80 83       	st	Z, r24
	pxTopOfStack--;
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	9c 83       	std	Y+4, r25	; 0x04
    12e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    12e2:	eb 81       	ldd	r30, Y+3	; 0x03
    12e4:	fc 81       	ldd	r31, Y+4	; 0x04
    12e6:	87 e2       	ldi	r24, 0x27	; 39
    12e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    12f4:	eb 81       	ldd	r30, Y+3	; 0x03
    12f6:	fc 81       	ldd	r31, Y+4	; 0x04
    12f8:	88 e2       	ldi	r24, 0x28	; 40
    12fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    1306:	eb 81       	ldd	r30, Y+3	; 0x03
    1308:	fc 81       	ldd	r31, Y+4	; 0x04
    130a:	89 e2       	ldi	r24, 0x29	; 41
    130c:	80 83       	st	Z, r24
	pxTopOfStack--;
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	9c 83       	std	Y+4, r25	; 0x04
    1316:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    1318:	eb 81       	ldd	r30, Y+3	; 0x03
    131a:	fc 81       	ldd	r31, Y+4	; 0x04
    131c:	80 e3       	ldi	r24, 0x30	; 48
    131e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    132a:	eb 81       	ldd	r30, Y+3	; 0x03
    132c:	fc 81       	ldd	r31, Y+4	; 0x04
    132e:	81 e3       	ldi	r24, 0x31	; 49
    1330:	80 83       	st	Z, r24
	pxTopOfStack--;
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1340:	28 96       	adiw	r28, 0x08	; 8
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    135a:	0e 94 99 0a 	call	0x1532	; 0x1532 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    135e:	a0 91 ff 02 	lds	r26, 0x02FF
    1362:	b0 91 00 03 	lds	r27, 0x0300
    1366:	cd 91       	ld	r28, X+
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	dd 91       	ld	r29, X+
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	ff 91       	pop	r31
    1370:	ef 91       	pop	r30
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	8f 90       	pop	r8
    139e:	7f 90       	pop	r7
    13a0:	6f 90       	pop	r6
    13a2:	5f 90       	pop	r5
    13a4:	4f 90       	pop	r4
    13a6:	3f 90       	pop	r3
    13a8:	2f 90       	pop	r2
    13aa:	1f 90       	pop	r1
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    13b2:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	0f 92       	push	r0
    13d2:	1f 92       	push	r1
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 92       	push	r2
    13d8:	3f 92       	push	r3
    13da:	4f 92       	push	r4
    13dc:	5f 92       	push	r5
    13de:	6f 92       	push	r6
    13e0:	7f 92       	push	r7
    13e2:	8f 92       	push	r8
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	ef 93       	push	r30
    1410:	ff 93       	push	r31
    1412:	a0 91 ff 02 	lds	r26, 0x02FF
    1416:	b0 91 00 03 	lds	r27, 0x0300
    141a:	0d b6       	in	r0, 0x3d	; 61
    141c:	0d 92       	st	X+, r0
    141e:	0e b6       	in	r0, 0x3e	; 62
    1420:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1422:	0e 94 55 13 	call	0x26aa	; 0x26aa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1426:	a0 91 ff 02 	lds	r26, 0x02FF
    142a:	b0 91 00 03 	lds	r27, 0x0300
    142e:	cd 91       	ld	r28, X+
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	dd 91       	ld	r29, X+
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	ff 91       	pop	r31
    1438:	ef 91       	pop	r30
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	bf 91       	pop	r27
    1440:	af 91       	pop	r26
    1442:	9f 91       	pop	r25
    1444:	8f 91       	pop	r24
    1446:	7f 91       	pop	r23
    1448:	6f 91       	pop	r22
    144a:	5f 91       	pop	r21
    144c:	4f 91       	pop	r20
    144e:	3f 91       	pop	r19
    1450:	2f 91       	pop	r18
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	4f 90       	pop	r4
    146e:	3f 90       	pop	r3
    1470:	2f 90       	pop	r2
    1472:	1f 90       	pop	r1
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0

	asm volatile ( "ret" );
    147a:	08 95       	ret

0000147c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	0f 92       	push	r0
    1484:	1f 92       	push	r1
    1486:	11 24       	eor	r1, r1
    1488:	2f 92       	push	r2
    148a:	3f 92       	push	r3
    148c:	4f 92       	push	r4
    148e:	5f 92       	push	r5
    1490:	6f 92       	push	r6
    1492:	7f 92       	push	r7
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	2f 93       	push	r18
    14aa:	3f 93       	push	r19
    14ac:	4f 93       	push	r20
    14ae:	5f 93       	push	r21
    14b0:	6f 93       	push	r22
    14b2:	7f 93       	push	r23
    14b4:	8f 93       	push	r24
    14b6:	9f 93       	push	r25
    14b8:	af 93       	push	r26
    14ba:	bf 93       	push	r27
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	ef 93       	push	r30
    14c2:	ff 93       	push	r31
    14c4:	a0 91 ff 02 	lds	r26, 0x02FF
    14c8:	b0 91 00 03 	lds	r27, 0x0300
    14cc:	0d b6       	in	r0, 0x3d	; 61
    14ce:	0d 92       	st	X+, r0
    14d0:	0e b6       	in	r0, 0x3e	; 62
    14d2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    14d4:	0e 94 80 12 	call	0x2500	; 0x2500 <vTaskIncrementTick>
	vTaskSwitchContext();
    14d8:	0e 94 55 13 	call	0x26aa	; 0x26aa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14dc:	a0 91 ff 02 	lds	r26, 0x02FF
    14e0:	b0 91 00 03 	lds	r27, 0x0300
    14e4:	cd 91       	ld	r28, X+
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	dd 91       	ld	r29, X+
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	ff 91       	pop	r31
    14ee:	ef 91       	pop	r30
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	bf 91       	pop	r27
    14f6:	af 91       	pop	r26
    14f8:	9f 91       	pop	r25
    14fa:	8f 91       	pop	r24
    14fc:	7f 91       	pop	r23
    14fe:	6f 91       	pop	r22
    1500:	5f 91       	pop	r21
    1502:	4f 91       	pop	r20
    1504:	3f 91       	pop	r19
    1506:	2f 91       	pop	r18
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	7f 90       	pop	r7
    151e:	6f 90       	pop	r6
    1520:	5f 90       	pop	r5
    1522:	4f 90       	pop	r4
    1524:	3f 90       	pop	r3
    1526:	2f 90       	pop	r2
    1528:	1f 90       	pop	r1
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1530:	08 95       	ret

00001532 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <prvSetupTimerInterrupt+0x6>
    1538:	00 d0       	rcall	.+0      	; 0x153a <prvSetupTimerInterrupt+0x8>
    153a:	00 d0       	rcall	.+0      	; 0x153c <prvSetupTimerInterrupt+0xa>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1540:	80 e4       	ldi	r24, 0x40	; 64
    1542:	9f e1       	ldi	r25, 0x1F	; 31
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	ad 83       	std	Y+5, r26	; 0x05
    154e:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	ad 81       	ldd	r26, Y+5	; 0x05
    1556:	be 81       	ldd	r27, Y+6	; 0x06
    1558:	68 94       	set
    155a:	15 f8       	bld	r1, 5
    155c:	b6 95       	lsr	r27
    155e:	a7 95       	ror	r26
    1560:	97 95       	ror	r25
    1562:	87 95       	ror	r24
    1564:	16 94       	lsr	r1
    1566:	d1 f7       	brne	.-12     	; 0x155c <prvSetupTimerInterrupt+0x2a>
    1568:	8b 83       	std	Y+3, r24	; 0x03
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	ad 83       	std	Y+5, r26	; 0x05
    156e:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	ad 81       	ldd	r26, Y+5	; 0x05
    1576:	be 81       	ldd	r27, Y+6	; 0x06
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	a1 09       	sbc	r26, r1
    157c:	b1 09       	sbc	r27, r1
    157e:	8b 83       	std	Y+3, r24	; 0x03
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	ad 83       	std	Y+5, r26	; 0x05
    1584:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	ad 81       	ldd	r26, Y+5	; 0x05
    1590:	be 81       	ldd	r27, Y+6	; 0x06
    1592:	89 2f       	mov	r24, r25
    1594:	9a 2f       	mov	r25, r26
    1596:	ab 2f       	mov	r26, r27
    1598:	bb 27       	eor	r27, r27
    159a:	8b 83       	std	Y+3, r24	; 0x03
    159c:	9c 83       	std	Y+4, r25	; 0x04
    159e:	ad 83       	std	Y+5, r26	; 0x05
    15a0:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    15a6:	eb e4       	ldi	r30, 0x4B	; 75
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    15ae:	ea e4       	ldi	r30, 0x4A	; 74
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    15b6:	8b e0       	ldi	r24, 0x0B	; 11
    15b8:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    15ba:	ee e4       	ldi	r30, 0x4E	; 78
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    15c2:	e9 e5       	ldi	r30, 0x59	; 89
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	80 61       	ori	r24, 0x10	; 16
    15ce:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    15d0:	e9 e5       	ldi	r30, 0x59	; 89
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	80 83       	st	Z, r24
}
    15d8:	26 96       	adiw	r28, 0x06	; 6
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    15ea:	0e 94 3e 0a 	call	0x147c	; 0x147c <vPortYieldFromTick>
		asm volatile ( "reti" );
    15ee:	18 95       	reti

000015f0 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	28 97       	sbiw	r28, 0x08	; 8
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	8f 83       	std	Y+7, r24	; 0x07
    1606:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1608:	1a 82       	std	Y+2, r1	; 0x02
    160a:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    160c:	8f 81       	ldd	r24, Y+7	; 0x07
    160e:	88 23       	and	r24, r24
    1610:	09 f4       	brne	.+2      	; 0x1614 <xQueueCreate+0x24>
    1612:	8c c0       	rjmp	.+280    	; 0x172c <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1614:	8f e1       	ldi	r24, 0x1F	; 31
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	09 f4       	brne	.+2      	; 0x162a <xQueueCreate+0x3a>
    1628:	81 c0       	rjmp	.+258    	; 0x172c <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    162a:	8f 81       	ldd	r24, Y+7	; 0x07
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	88 85       	ldd	r24, Y+8	; 0x08
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	ac 01       	movw	r20, r24
    1638:	24 9f       	mul	r18, r20
    163a:	c0 01       	movw	r24, r0
    163c:	25 9f       	mul	r18, r21
    163e:	90 0d       	add	r25, r0
    1640:	34 9f       	mul	r19, r20
    1642:	90 0d       	add	r25, r0
    1644:	11 24       	eor	r1, r1
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	9c 83       	std	Y+4, r25	; 0x04
    164a:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    1654:	ed 81       	ldd	r30, Y+5	; 0x05
    1656:	fe 81       	ldd	r31, Y+6	; 0x06
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    165c:	ed 81       	ldd	r30, Y+5	; 0x05
    165e:	fe 81       	ldd	r31, Y+6	; 0x06
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	09 f4       	brne	.+2      	; 0x166a <xQueueCreate+0x7a>
    1668:	5d c0       	rjmp	.+186    	; 0x1724 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    166a:	ed 81       	ldd	r30, Y+5	; 0x05
    166c:	fe 81       	ldd	r31, Y+6	; 0x06
    166e:	40 81       	ld	r20, Z
    1670:	51 81       	ldd	r21, Z+1	; 0x01
    1672:	8f 81       	ldd	r24, Y+7	; 0x07
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	88 85       	ldd	r24, Y+8	; 0x08
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	bc 01       	movw	r22, r24
    1680:	26 9f       	mul	r18, r22
    1682:	c0 01       	movw	r24, r0
    1684:	27 9f       	mul	r18, r23
    1686:	90 0d       	add	r25, r0
    1688:	36 9f       	mul	r19, r22
    168a:	90 0d       	add	r25, r0
    168c:	11 24       	eor	r1, r1
    168e:	84 0f       	add	r24, r20
    1690:	95 1f       	adc	r25, r21
    1692:	ed 81       	ldd	r30, Y+5	; 0x05
    1694:	fe 81       	ldd	r31, Y+6	; 0x06
    1696:	93 83       	std	Z+3, r25	; 0x03
    1698:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    169a:	ed 81       	ldd	r30, Y+5	; 0x05
    169c:	fe 81       	ldd	r31, Y+6	; 0x06
    169e:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    16a0:	ed 81       	ldd	r30, Y+5	; 0x05
    16a2:	fe 81       	ldd	r31, Y+6	; 0x06
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	ed 81       	ldd	r30, Y+5	; 0x05
    16aa:	fe 81       	ldd	r31, Y+6	; 0x06
    16ac:	95 83       	std	Z+5, r25	; 0x05
    16ae:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    16b0:	ed 81       	ldd	r30, Y+5	; 0x05
    16b2:	fe 81       	ldd	r31, Y+6	; 0x06
    16b4:	40 81       	ld	r20, Z
    16b6:	51 81       	ldd	r21, Z+1	; 0x01
    16b8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9c 01       	movw	r18, r24
    16c0:	21 50       	subi	r18, 0x01	; 1
    16c2:	30 40       	sbci	r19, 0x00	; 0
    16c4:	88 85       	ldd	r24, Y+8	; 0x08
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	bc 01       	movw	r22, r24
    16cc:	26 9f       	mul	r18, r22
    16ce:	c0 01       	movw	r24, r0
    16d0:	27 9f       	mul	r18, r23
    16d2:	90 0d       	add	r25, r0
    16d4:	36 9f       	mul	r19, r22
    16d6:	90 0d       	add	r25, r0
    16d8:	11 24       	eor	r1, r1
    16da:	84 0f       	add	r24, r20
    16dc:	95 1f       	adc	r25, r21
    16de:	ed 81       	ldd	r30, Y+5	; 0x05
    16e0:	fe 81       	ldd	r31, Y+6	; 0x06
    16e2:	97 83       	std	Z+7, r25	; 0x07
    16e4:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    16e6:	ed 81       	ldd	r30, Y+5	; 0x05
    16e8:	fe 81       	ldd	r31, Y+6	; 0x06
    16ea:	8f 81       	ldd	r24, Y+7	; 0x07
    16ec:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    16ee:	ed 81       	ldd	r30, Y+5	; 0x05
    16f0:	fe 81       	ldd	r31, Y+6	; 0x06
    16f2:	88 85       	ldd	r24, Y+8	; 0x08
    16f4:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    16f6:	ed 81       	ldd	r30, Y+5	; 0x05
    16f8:	fe 81       	ldd	r31, Y+6	; 0x06
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    16fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1700:	fe 81       	ldd	r31, Y+6	; 0x06
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	08 96       	adiw	r24, 0x08	; 8
    170c:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	41 96       	adiw	r24, 0x11	; 17
    1716:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	04 c0       	rjmp	.+8      	; 0x172c <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1730:	28 96       	adiw	r28, 0x08	; 8
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	2c 97       	sbiw	r28, 0x0c	; 12
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	78 87       	std	Y+8, r23	; 0x08
    175c:	6f 83       	std	Y+7, r22	; 0x07
    175e:	5a 87       	std	Y+10, r21	; 0x0a
    1760:	49 87       	std	Y+9, r20	; 0x09
    1762:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1764:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    176c:	ed 81       	ldd	r30, Y+5	; 0x05
    176e:	fe 81       	ldd	r31, Y+6	; 0x06
    1770:	92 8d       	ldd	r25, Z+26	; 0x1a
    1772:	ed 81       	ldd	r30, Y+5	; 0x05
    1774:	fe 81       	ldd	r31, Y+6	; 0x06
    1776:	83 8d       	ldd	r24, Z+27	; 0x1b
    1778:	98 17       	cp	r25, r24
    177a:	d8 f4       	brcc	.+54     	; 0x17b2 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	2f 81       	ldd	r18, Y+7	; 0x07
    1782:	38 85       	ldd	r19, Y+8	; 0x08
    1784:	b9 01       	movw	r22, r18
    1786:	4b 85       	ldd	r20, Y+11	; 0x0b
    1788:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    178c:	ed 81       	ldd	r30, Y+5	; 0x05
    178e:	fe 81       	ldd	r31, Y+6	; 0x06
    1790:	81 89       	ldd	r24, Z+17	; 0x11
    1792:	88 23       	and	r24, r24
    1794:	49 f0       	breq	.+18     	; 0x17a8 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	41 96       	adiw	r24, 0x11	; 17
    179c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <xTaskRemoveFromEventList>
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	11 f4       	brne	.+4      	; 0x17a8 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    17a4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8c 87       	std	Y+12, r24	; 0x0c
    17b0:	5c c0       	rjmp	.+184    	; 0x186a <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    17be:	1c 86       	std	Y+12, r1	; 0x0c
    17c0:	54 c0       	rjmp	.+168    	; 0x186a <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	88 23       	and	r24, r24
    17c6:	31 f4       	brne	.+12     	; 0x17d4 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    17c8:	ce 01       	movw	r24, r28
    17ca:	02 96       	adiw	r24, 0x02	; 2
    17cc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    17d8:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	0f 92       	push	r0
    17e2:	ed 81       	ldd	r30, Y+5	; 0x05
    17e4:	fe 81       	ldd	r31, Y+6	; 0x06
    17e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    17e8:	8f 3f       	cpi	r24, 0xFF	; 255
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <xQueueGenericSend+0xb0>
    17ec:	ed 81       	ldd	r30, Y+5	; 0x05
    17ee:	fe 81       	ldd	r31, Y+6	; 0x06
    17f0:	15 8e       	std	Z+29, r1	; 0x1d
    17f2:	ed 81       	ldd	r30, Y+5	; 0x05
    17f4:	fe 81       	ldd	r31, Y+6	; 0x06
    17f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    17f8:	8f 3f       	cpi	r24, 0xFF	; 255
    17fa:	19 f4       	brne	.+6      	; 0x1802 <xQueueGenericSend+0xc0>
    17fc:	ed 81       	ldd	r30, Y+5	; 0x05
    17fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1800:	16 8e       	std	Z+30, r1	; 0x1e
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1806:	ce 01       	movw	r24, r28
    1808:	02 96       	adiw	r24, 0x02	; 2
    180a:	9e 01       	movw	r18, r28
    180c:	27 5f       	subi	r18, 0xF7	; 247
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	b9 01       	movw	r22, r18
    1812:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskCheckForTimeOut>
    1816:	88 23       	and	r24, r24
    1818:	09 f5       	brne	.+66     	; 0x185c <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <prvIsQueueFull>
    1822:	88 23       	and	r24, r24
    1824:	a1 f0       	breq	.+40     	; 0x184e <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	08 96       	adiw	r24, 0x08	; 8
    182c:	29 85       	ldd	r18, Y+9	; 0x09
    182e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1830:	b9 01       	movw	r22, r18
    1832:	0e 94 bb 13 	call	0x2776	; 0x2776 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    183e:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
    1842:	88 23       	and	r24, r24
    1844:	09 f0       	breq	.+2      	; 0x1848 <xQueueGenericSend+0x106>
    1846:	8f cf       	rjmp	.-226    	; 0x1766 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1848:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
    184c:	8c cf       	rjmp	.-232    	; 0x1766 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1856:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
    185a:	85 cf       	rjmp	.-246    	; 0x1766 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1864:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1868:	1c 86       	std	Y+12, r1	; 0x0c
    186a:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    186c:	2c 96       	adiw	r28, 0x0c	; 12
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	29 97       	sbiw	r28, 0x09	; 9
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	7e 83       	std	Y+6, r23	; 0x06
    1898:	6d 83       	std	Y+5, r22	; 0x05
    189a:	58 87       	std	Y+8, r21	; 0x08
    189c:	4f 83       	std	Y+7, r20	; 0x07
    189e:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    18a0:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    18a2:	eb 81       	ldd	r30, Y+3	; 0x03
    18a4:	fc 81       	ldd	r31, Y+4	; 0x04
    18a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    18a8:	eb 81       	ldd	r30, Y+3	; 0x03
    18aa:	fc 81       	ldd	r31, Y+4	; 0x04
    18ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    18ae:	98 17       	cp	r25, r24
    18b0:	40 f5       	brcc	.+80     	; 0x1902 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	2d 81       	ldd	r18, Y+5	; 0x05
    18b8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ba:	b9 01       	movw	r22, r18
    18bc:	49 85       	ldd	r20, Y+9	; 0x09
    18be:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    18c2:	eb 81       	ldd	r30, Y+3	; 0x03
    18c4:	fc 81       	ldd	r31, Y+4	; 0x04
    18c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    18c8:	8f 3f       	cpi	r24, 0xFF	; 255
    18ca:	89 f4       	brne	.+34     	; 0x18ee <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18cc:	eb 81       	ldd	r30, Y+3	; 0x03
    18ce:	fc 81       	ldd	r31, Y+4	; 0x04
    18d0:	81 89       	ldd	r24, Z+17	; 0x11
    18d2:	88 23       	and	r24, r24
    18d4:	99 f0       	breq	.+38     	; 0x18fc <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	41 96       	adiw	r24, 0x11	; 17
    18dc:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <xTaskRemoveFromEventList>
    18e0:	88 23       	and	r24, r24
    18e2:	61 f0       	breq	.+24     	; 0x18fc <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    18e4:	ef 81       	ldd	r30, Y+7	; 0x07
    18e6:	f8 85       	ldd	r31, Y+8	; 0x08
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 83       	st	Z, r24
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    18ee:	eb 81       	ldd	r30, Y+3	; 0x03
    18f0:	fc 81       	ldd	r31, Y+4	; 0x04
    18f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	eb 81       	ldd	r30, Y+3	; 0x03
    18f8:	fc 81       	ldd	r31, Y+4	; 0x04
    18fa:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	8a 83       	std	Y+2, r24	; 0x02
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1902:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1906:	29 96       	adiw	r28, 0x09	; 9
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	2e 97       	sbiw	r28, 0x0e	; 14
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	98 87       	std	Y+8, r25	; 0x08
    192e:	8f 83       	std	Y+7, r24	; 0x07
    1930:	7a 87       	std	Y+10, r23	; 0x0a
    1932:	69 87       	std	Y+9, r22	; 0x09
    1934:	5c 87       	std	Y+12, r21	; 0x0c
    1936:	4b 87       	std	Y+11, r20	; 0x0b
    1938:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    193a:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1942:	ef 81       	ldd	r30, Y+7	; 0x07
    1944:	f8 85       	ldd	r31, Y+8	; 0x08
    1946:	82 8d       	ldd	r24, Z+26	; 0x1a
    1948:	88 23       	and	r24, r24
    194a:	09 f4       	brne	.+2      	; 0x194e <xQueueGenericReceive+0x36>
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    194e:	ef 81       	ldd	r30, Y+7	; 0x07
    1950:	f8 85       	ldd	r31, Y+8	; 0x08
    1952:	86 81       	ldd	r24, Z+6	; 0x06
    1954:	97 81       	ldd	r25, Z+7	; 0x07
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    195a:	8f 81       	ldd	r24, Y+7	; 0x07
    195c:	98 85       	ldd	r25, Y+8	; 0x08
    195e:	29 85       	ldd	r18, Y+9	; 0x09
    1960:	3a 85       	ldd	r19, Y+10	; 0x0a
    1962:	b9 01       	movw	r22, r18
    1964:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1968:	8d 85       	ldd	r24, Y+13	; 0x0d
    196a:	88 23       	and	r24, r24
    196c:	b1 f4       	brne	.+44     	; 0x199a <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    196e:	ef 81       	ldd	r30, Y+7	; 0x07
    1970:	f8 85       	ldd	r31, Y+8	; 0x08
    1972:	82 8d       	ldd	r24, Z+26	; 0x1a
    1974:	81 50       	subi	r24, 0x01	; 1
    1976:	ef 81       	ldd	r30, Y+7	; 0x07
    1978:	f8 85       	ldd	r31, Y+8	; 0x08
    197a:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    197c:	ef 81       	ldd	r30, Y+7	; 0x07
    197e:	f8 85       	ldd	r31, Y+8	; 0x08
    1980:	80 85       	ldd	r24, Z+8	; 0x08
    1982:	88 23       	and	r24, r24
    1984:	f1 f0       	breq	.+60     	; 0x19c2 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1986:	8f 81       	ldd	r24, Y+7	; 0x07
    1988:	98 85       	ldd	r25, Y+8	; 0x08
    198a:	08 96       	adiw	r24, 0x08	; 8
    198c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <xTaskRemoveFromEventList>
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	b9 f4       	brne	.+46     	; 0x19c2 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    1994:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    199a:	ef 81       	ldd	r30, Y+7	; 0x07
    199c:	f8 85       	ldd	r31, Y+8	; 0x08
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	97 83       	std	Z+7, r25	; 0x07
    19a4:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19a6:	ef 81       	ldd	r30, Y+7	; 0x07
    19a8:	f8 85       	ldd	r31, Y+8	; 0x08
    19aa:	81 89       	ldd	r24, Z+17	; 0x11
    19ac:	88 23       	and	r24, r24
    19ae:	49 f0       	breq	.+18     	; 0x19c2 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19b0:	8f 81       	ldd	r24, Y+7	; 0x07
    19b2:	98 85       	ldd	r25, Y+8	; 0x08
    19b4:	41 96       	adiw	r24, 0x11	; 17
    19b6:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <xTaskRemoveFromEventList>
    19ba:	88 23       	and	r24, r24
    19bc:	11 f0       	breq	.+4      	; 0x19c2 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    19be:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    19c2:	0f 90       	pop	r0
    19c4:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	8e 87       	std	Y+14, r24	; 0x0e
    19ca:	5c c0       	rjmp	.+184    	; 0x1a84 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    19cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	21 f4       	brne	.+8      	; 0x19dc <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    19d8:	1e 86       	std	Y+14, r1	; 0x0e
    19da:	54 c0       	rjmp	.+168    	; 0x1a84 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 23       	and	r24, r24
    19e0:	31 f4       	brne	.+12     	; 0x19ee <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    19e2:	ce 01       	movw	r24, r28
    19e4:	04 96       	adiw	r24, 0x04	; 4
    19e6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    19f2:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	0f 92       	push	r0
    19fc:	ef 81       	ldd	r30, Y+7	; 0x07
    19fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1a00:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a02:	8f 3f       	cpi	r24, 0xFF	; 255
    1a04:	19 f4       	brne	.+6      	; 0x1a0c <xQueueGenericReceive+0xf4>
    1a06:	ef 81       	ldd	r30, Y+7	; 0x07
    1a08:	f8 85       	ldd	r31, Y+8	; 0x08
    1a0a:	15 8e       	std	Z+29, r1	; 0x1d
    1a0c:	ef 81       	ldd	r30, Y+7	; 0x07
    1a0e:	f8 85       	ldd	r31, Y+8	; 0x08
    1a10:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a12:	8f 3f       	cpi	r24, 0xFF	; 255
    1a14:	19 f4       	brne	.+6      	; 0x1a1c <xQueueGenericReceive+0x104>
    1a16:	ef 81       	ldd	r30, Y+7	; 0x07
    1a18:	f8 85       	ldd	r31, Y+8	; 0x08
    1a1a:	16 8e       	std	Z+30, r1	; 0x1e
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a20:	ce 01       	movw	r24, r28
    1a22:	04 96       	adiw	r24, 0x04	; 4
    1a24:	9e 01       	movw	r18, r28
    1a26:	25 5f       	subi	r18, 0xF5	; 245
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskCheckForTimeOut>
    1a30:	88 23       	and	r24, r24
    1a32:	09 f5       	brne	.+66     	; 0x1a76 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1a34:	8f 81       	ldd	r24, Y+7	; 0x07
    1a36:	98 85       	ldd	r25, Y+8	; 0x08
    1a38:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <prvIsQueueEmpty>
    1a3c:	88 23       	and	r24, r24
    1a3e:	a1 f0       	breq	.+40     	; 0x1a68 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a40:	8f 81       	ldd	r24, Y+7	; 0x07
    1a42:	98 85       	ldd	r25, Y+8	; 0x08
    1a44:	41 96       	adiw	r24, 0x11	; 17
    1a46:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a48:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	0e 94 bb 13 	call	0x2776	; 0x2776 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1a50:	8f 81       	ldd	r24, Y+7	; 0x07
    1a52:	98 85       	ldd	r25, Y+8	; 0x08
    1a54:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1a58:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <xQueueGenericReceive+0x14a>
    1a60:	6d cf       	rjmp	.-294    	; 0x193c <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1a62:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
    1a66:	6a cf       	rjmp	.-300    	; 0x193c <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1a68:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6a:	98 85       	ldd	r25, Y+8	; 0x08
    1a6c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1a70:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
    1a74:	63 cf       	rjmp	.-314    	; 0x193c <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	98 85       	ldd	r25, Y+8	; 0x08
    1a7a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1a7e:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1a82:	1e 86       	std	Y+14, r1	; 0x0e
    1a84:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    1a86:	2e 96       	adiw	r28, 0x0e	; 14
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	28 97       	sbiw	r28, 0x08	; 8
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
    1ab0:	7e 83       	std	Y+6, r23	; 0x06
    1ab2:	6d 83       	std	Y+5, r22	; 0x05
    1ab4:	58 87       	std	Y+8, r21	; 0x08
    1ab6:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1ab8:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1aba:	eb 81       	ldd	r30, Y+3	; 0x03
    1abc:	fc 81       	ldd	r31, Y+4	; 0x04
    1abe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ac0:	88 23       	and	r24, r24
    1ac2:	71 f1       	breq	.+92     	; 0x1b20 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aca:	3e 81       	ldd	r19, Y+6	; 0x06
    1acc:	b9 01       	movw	r22, r18
    1ace:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1ad2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ad8:	81 50       	subi	r24, 0x01	; 1
    1ada:	eb 81       	ldd	r30, Y+3	; 0x03
    1adc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ade:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae8:	89 f4       	brne	.+34     	; 0x1b0c <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1aea:	eb 81       	ldd	r30, Y+3	; 0x03
    1aec:	fc 81       	ldd	r31, Y+4	; 0x04
    1aee:	80 85       	ldd	r24, Z+8	; 0x08
    1af0:	88 23       	and	r24, r24
    1af2:	99 f0       	breq	.+38     	; 0x1b1a <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	08 96       	adiw	r24, 0x08	; 8
    1afa:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <xTaskRemoveFromEventList>
    1afe:	88 23       	and	r24, r24
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1b02:	ef 81       	ldd	r30, Y+7	; 0x07
    1b04:	f8 85       	ldd	r31, Y+8	; 0x08
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	80 83       	st	Z, r24
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1b0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b10:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b12:	8f 5f       	subi	r24, 0xFF	; 255
    1b14:	eb 81       	ldd	r30, Y+3	; 0x03
    1b16:	fc 81       	ldd	r31, Y+4	; 0x04
    1b18:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1b20:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b24:	28 96       	adiw	r28, 0x08	; 8
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <uxQueueMessagesWaiting+0x6>
    1b3c:	0f 92       	push	r0
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	9b 83       	std	Y+3, r25	; 0x03
    1b44:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b50:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b52:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <uxQueueMessagesWaitingFromISR+0x6>
    1b6c:	0f 92       	push	r0
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9b 83       	std	Y+3, r25	; 0x03
    1b74:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1b76:	ea 81       	ldd	r30, Y+2	; 0x02
    1b78:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b7c:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <vQueueDelete+0x6>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
	vPortFree( pxQueue );
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <prvCopyDataToQueue+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <prvCopyDataToQueue+0x8>
    1bc0:	0f 92       	push	r0
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	7c 83       	std	Y+4, r23	; 0x04
    1bcc:	6b 83       	std	Y+3, r22	; 0x03
    1bce:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <prvCopyDataToQueue+0x24>
    1bda:	74 c0       	rjmp	.+232    	; 0x1cc4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	88 23       	and	r24, r24
    1be0:	99 f5       	brne	.+102    	; 0x1c48 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1be2:	e9 81       	ldd	r30, Y+1	; 0x01
    1be4:	fa 81       	ldd	r31, Y+2	; 0x02
    1be6:	64 81       	ldd	r22, Z+4	; 0x04
    1be8:	75 81       	ldd	r23, Z+5	; 0x05
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	b9 01       	movw	r22, r18
    1bfc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	24 81       	ldd	r18, Z+4	; 0x04
    1c06:	35 81       	ldd	r19, Z+5	; 0x05
    1c08:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	95 83       	std	Z+5, r25	; 0x05
    1c1c:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c20:	fa 81       	ldd	r31, Y+2	; 0x02
    1c22:	24 81       	ldd	r18, Z+4	; 0x04
    1c24:	35 81       	ldd	r19, Z+5	; 0x05
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	28 17       	cp	r18, r24
    1c30:	39 07       	cpc	r19, r25
    1c32:	08 f4       	brcc	.+2      	; 0x1c36 <prvCopyDataToQueue+0x7e>
    1c34:	47 c0       	rjmp	.+142    	; 0x1cc4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1c36:	e9 81       	ldd	r30, Y+1	; 0x01
    1c38:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	95 83       	std	Z+5, r25	; 0x05
    1c44:	84 83       	std	Z+4, r24	; 0x04
    1c46:	3e c0       	rjmp	.+124    	; 0x1cc4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	66 81       	ldd	r22, Z+6	; 0x06
    1c4e:	77 81       	ldd	r23, Z+7	; 0x07
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c56:	48 2f       	mov	r20, r24
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5e:	cb 01       	movw	r24, r22
    1c60:	b9 01       	movw	r22, r18
    1c62:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	26 81       	ldd	r18, Z+6	; 0x06
    1c6c:	37 81       	ldd	r19, Z+7	; 0x07
    1c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c70:	fa 81       	ldd	r31, Y+2	; 0x02
    1c72:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	90 95       	com	r25
    1c7a:	81 95       	neg	r24
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	82 0f       	add	r24, r18
    1c80:	93 1f       	adc	r25, r19
    1c82:	e9 81       	ldd	r30, Y+1	; 0x01
    1c84:	fa 81       	ldd	r31, Y+2	; 0x02
    1c86:	97 83       	std	Z+7, r25	; 0x07
    1c88:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8e:	26 81       	ldd	r18, Z+6	; 0x06
    1c90:	37 81       	ldd	r19, Z+7	; 0x07
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	28 17       	cp	r18, r24
    1c9c:	39 07       	cpc	r19, r25
    1c9e:	90 f4       	brcc	.+36     	; 0x1cc4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca4:	22 81       	ldd	r18, Z+2	; 0x02
    1ca6:	33 81       	ldd	r19, Z+3	; 0x03
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	90 95       	com	r25
    1cb4:	81 95       	neg	r24
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc0:	97 83       	std	Z+7, r25	; 0x07
    1cc2:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	82 8f       	std	Z+26, r24	; 0x1a
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <prvCopyDataFromQueue+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <prvCopyDataFromQueue+0x8>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	7c 83       	std	Y+4, r23	; 0x04
    1cf4:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	89 f1       	breq	.+98     	; 0x1d64 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1d02:	e9 81       	ldd	r30, Y+1	; 0x01
    1d04:	fa 81       	ldd	r31, Y+2	; 0x02
    1d06:	26 81       	ldd	r18, Z+6	; 0x06
    1d08:	37 81       	ldd	r19, Z+7	; 0x07
    1d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	82 0f       	add	r24, r18
    1d16:	93 1f       	adc	r25, r19
    1d18:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1c:	97 83       	std	Z+7, r25	; 0x07
    1d1e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1d20:	e9 81       	ldd	r30, Y+1	; 0x01
    1d22:	fa 81       	ldd	r31, Y+2	; 0x02
    1d24:	26 81       	ldd	r18, Z+6	; 0x06
    1d26:	37 81       	ldd	r19, Z+7	; 0x07
    1d28:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	28 17       	cp	r18, r24
    1d32:	39 07       	cpc	r19, r25
    1d34:	40 f0       	brcs	.+16     	; 0x1d46 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	97 83       	std	Z+7, r25	; 0x07
    1d44:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1d46:	e9 81       	ldd	r30, Y+1	; 0x01
    1d48:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4a:	46 81       	ldd	r20, Z+6	; 0x06
    1d4c:	57 81       	ldd	r21, Z+7	; 0x07
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	ba 01       	movw	r22, r20
    1d5e:	a9 01       	movw	r20, r18
    1d60:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <memcpy>
	}
}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <prvUnlockQueue+0x6>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	0f 92       	push	r0
    1d86:	15 c0       	rjmp	.+42     	; 0x1db2 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1d88:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8c:	81 89       	ldd	r24, Z+17	; 0x11
    1d8e:	88 23       	and	r24, r24
    1d90:	a9 f0       	breq	.+42     	; 0x1dbc <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	41 96       	adiw	r24, 0x11	; 17
    1d98:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <xTaskRemoveFromEventList>
    1d9c:	88 23       	and	r24, r24
    1d9e:	11 f0       	breq	.+4      	; 0x1da4 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1da0:	0e 94 cf 14 	call	0x299e	; 0x299e <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1da4:	e9 81       	ldd	r30, Y+1	; 0x01
    1da6:	fa 81       	ldd	r31, Y+2	; 0x02
    1da8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1daa:	81 50       	subi	r24, 0x01	; 1
    1dac:	e9 81       	ldd	r30, Y+1	; 0x01
    1dae:	fa 81       	ldd	r31, Y+2	; 0x02
    1db0:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1db2:	e9 81       	ldd	r30, Y+1	; 0x01
    1db4:	fa 81       	ldd	r31, Y+2	; 0x02
    1db6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1db8:	18 16       	cp	r1, r24
    1dba:	34 f3       	brlt	.-52     	; 0x1d88 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	0f 92       	push	r0
    1dce:	15 c0       	rjmp	.+42     	; 0x1dfa <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd4:	80 85       	ldd	r24, Z+8	; 0x08
    1dd6:	88 23       	and	r24, r24
    1dd8:	a9 f0       	breq	.+42     	; 0x1e04 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	08 96       	adiw	r24, 0x08	; 8
    1de0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <xTaskRemoveFromEventList>
    1de4:	88 23       	and	r24, r24
    1de6:	11 f0       	breq	.+4      	; 0x1dec <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    1de8:	0e 94 cf 14 	call	0x299e	; 0x299e <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1df2:	81 50       	subi	r24, 0x01	; 1
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e00:	18 16       	cp	r1, r24
    1e02:	34 f3       	brlt	.-52     	; 0x1dd0 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1e0c:	0f 90       	pop	r0
    1e0e:	0f be       	out	0x3f, r0	; 63
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	08 95       	ret

00001e1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <prvIsQueueEmpty+0x6>
    1e20:	0f 92       	push	r0
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	9b 83       	std	Y+3, r25	; 0x03
    1e28:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1e30:	ea 81       	ldd	r30, Y+2	; 0x02
    1e32:	fb 81       	ldd	r31, Y+3	; 0x03
    1e34:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e36:	19 82       	std	Y+1, r1	; 0x01
    1e38:	88 23       	and	r24, r24
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <prvIsQueueEmpty+0x26>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <xQueueIsQueueEmptyFromISR+0x6>
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9b 83       	std	Y+3, r25	; 0x03
    1e60:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1e62:	ea 81       	ldd	r30, Y+2	; 0x02
    1e64:	fb 81       	ldd	r31, Y+3	; 0x03
    1e66:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e68:	19 82       	std	Y+1, r1	; 0x01
    1e6a:	88 23       	and	r24, r24
    1e6c:	11 f4       	brne	.+4      	; 0x1e72 <xQueueIsQueueEmptyFromISR+0x20>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <prvIsQueueFull+0x6>
    1e86:	0f 92       	push	r0
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9b 83       	std	Y+3, r25	; 0x03
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1e96:	ea 81       	ldd	r30, Y+2	; 0x02
    1e98:	fb 81       	ldd	r31, Y+3	; 0x03
    1e9a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ea2:	19 82       	std	Y+1, r1	; 0x01
    1ea4:	98 17       	cp	r25, r24
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <prvIsQueueFull+0x2c>
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <xQueueIsQueueFullFromISR+0x6>
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9b 83       	std	Y+3, r25	; 0x03
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1ece:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed8:	83 8d       	ldd	r24, Z+27	; 0x1b
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	98 17       	cp	r25, r24
    1ede:	11 f4       	brne	.+4      	; 0x1ee4 <xQueueIsQueueFullFromISR+0x26>
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	64 97       	sbiw	r28, 0x14	; 20
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	9f 83       	std	Y+7, r25	; 0x07
    1f18:	8e 83       	std	Y+6, r24	; 0x06
    1f1a:	79 87       	std	Y+9, r23	; 0x09
    1f1c:	68 87       	std	Y+8, r22	; 0x08
    1f1e:	5b 87       	std	Y+11, r21	; 0x0b
    1f20:	4a 87       	std	Y+10, r20	; 0x0a
    1f22:	3d 87       	std	Y+13, r19	; 0x0d
    1f24:	2c 87       	std	Y+12, r18	; 0x0c
    1f26:	0e 87       	std	Y+14, r16	; 0x0e
    1f28:	f8 8a       	std	Y+16, r15	; 0x10
    1f2a:	ef 86       	std	Y+15, r14	; 0x0f
    1f2c:	da 8a       	std	Y+18, r13	; 0x12
    1f2e:	c9 8a       	std	Y+17, r12	; 0x11
    1f30:	bc 8a       	std	Y+20, r11	; 0x14
    1f32:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1f34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f38:	29 89       	ldd	r18, Y+17	; 0x11
    1f3a:	3a 89       	ldd	r19, Y+18	; 0x12
    1f3c:	b9 01       	movw	r22, r18
    1f3e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <prvAllocateTCBAndStack>
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <xTaskGenericCreate+0x5e>
    1f4e:	99 c0       	rjmp	.+306    	; 0x2082 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1f50:	eb 81       	ldd	r30, Y+3	; 0x03
    1f52:	fc 81       	ldd	r31, Y+4	; 0x04
    1f54:	27 89       	ldd	r18, Z+23	; 0x17
    1f56:	30 8d       	ldd	r19, Z+24	; 0x18
    1f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	82 0f       	add	r24, r18
    1f60:	93 1f       	adc	r25, r19
    1f62:	9a 83       	std	Y+2, r25	; 0x02
    1f64:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	28 85       	ldd	r18, Y+8	; 0x08
    1f6c:	39 85       	ldd	r19, Y+9	; 0x09
    1f6e:	eb 89       	ldd	r30, Y+19	; 0x13
    1f70:	fc 89       	ldd	r31, Y+20	; 0x14
    1f72:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f74:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f76:	b9 01       	movw	r22, r18
    1f78:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f7a:	9f 01       	movw	r18, r30
    1f7c:	8d 01       	movw	r16, r26
    1f7e:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	2e 81       	ldd	r18, Y+6	; 0x06
    1f88:	3f 81       	ldd	r19, Y+7	; 0x07
    1f8a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1f8c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1f8e:	b9 01       	movw	r22, r18
    1f90:	0e 94 26 08 	call	0x104c	; 0x104c <pxPortInitialiseStack>
    1f94:	eb 81       	ldd	r30, Y+3	; 0x03
    1f96:	fc 81       	ldd	r31, Y+4	; 0x04
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f9e:	98 89       	ldd	r25, Y+16	; 0x10
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	31 f0       	breq	.+12     	; 0x1fb0 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1fa4:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fa6:	f8 89       	ldd	r31, Y+16	; 0x10
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1fb6:	80 91 02 03 	lds	r24, 0x0302
    1fba:	8f 5f       	subi	r24, 0xFF	; 255
    1fbc:	80 93 02 03 	sts	0x0302, r24
			if( pxCurrentTCB == NULL )
    1fc0:	80 91 ff 02 	lds	r24, 0x02FF
    1fc4:	90 91 00 03 	lds	r25, 0x0300
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f4       	brne	.+26     	; 0x1fe6 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	90 93 00 03 	sts	0x0300, r25
    1fd4:	80 93 ff 02 	sts	0x02FF, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1fd8:	80 91 02 03 	lds	r24, 0x0302
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	a9 f4       	brne	.+42     	; 0x200a <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1fe0:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <prvInitialiseTaskLists>
    1fe4:	12 c0       	rjmp	.+36     	; 0x200a <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1fe6:	80 91 07 03 	lds	r24, 0x0307
    1fea:	88 23       	and	r24, r24
    1fec:	71 f4       	brne	.+28     	; 0x200a <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1fee:	e0 91 ff 02 	lds	r30, 0x02FF
    1ff2:	f0 91 00 03 	lds	r31, 0x0300
    1ff6:	96 89       	ldd	r25, Z+22	; 0x16
    1ff8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ffa:	89 17       	cp	r24, r25
    1ffc:	30 f0       	brcs	.+12     	; 0x200a <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	90 93 00 03 	sts	0x0300, r25
    2006:	80 93 ff 02 	sts	0x02FF, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    200a:	eb 81       	ldd	r30, Y+3	; 0x03
    200c:	fc 81       	ldd	r31, Y+4	; 0x04
    200e:	96 89       	ldd	r25, Z+22	; 0x16
    2010:	80 91 05 03 	lds	r24, 0x0305
    2014:	89 17       	cp	r24, r25
    2016:	28 f4       	brcc	.+10     	; 0x2022 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2018:	eb 81       	ldd	r30, Y+3	; 0x03
    201a:	fc 81       	ldd	r31, Y+4	; 0x04
    201c:	86 89       	ldd	r24, Z+22	; 0x16
    201e:	80 93 05 03 	sts	0x0305, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2022:	80 91 0c 03 	lds	r24, 0x030C
    2026:	8f 5f       	subi	r24, 0xFF	; 255
    2028:	80 93 0c 03 	sts	0x030C, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    202c:	eb 81       	ldd	r30, Y+3	; 0x03
    202e:	fc 81       	ldd	r31, Y+4	; 0x04
    2030:	96 89       	ldd	r25, Z+22	; 0x16
    2032:	80 91 06 03 	lds	r24, 0x0306
    2036:	89 17       	cp	r24, r25
    2038:	28 f4       	brcc	.+10     	; 0x2044 <xTaskGenericCreate+0x152>
    203a:	eb 81       	ldd	r30, Y+3	; 0x03
    203c:	fc 81       	ldd	r31, Y+4	; 0x04
    203e:	86 89       	ldd	r24, Z+22	; 0x16
    2040:	80 93 06 03 	sts	0x0306, r24
    2044:	eb 81       	ldd	r30, Y+3	; 0x03
    2046:	fc 81       	ldd	r31, Y+4	; 0x04
    2048:	86 89       	ldd	r24, Z+22	; 0x16
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	c9 01       	movw	r24, r18
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	82 0f       	add	r24, r18
    205e:	93 1f       	adc	r25, r19
    2060:	ac 01       	movw	r20, r24
    2062:	43 5f       	subi	r20, 0xF3	; 243
    2064:	5c 4f       	sbci	r21, 0xFC	; 252
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	9c 01       	movw	r18, r24
    206c:	2e 5f       	subi	r18, 0xFE	; 254
    206e:	3f 4f       	sbci	r19, 0xFF	; 255
    2070:	ca 01       	movw	r24, r20
    2072:	b9 01       	movw	r22, r18
    2074:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

			xReturn = pdPASS;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	71 f4       	brne	.+28     	; 0x20a8 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    208c:	80 91 07 03 	lds	r24, 0x0307
    2090:	88 23       	and	r24, r24
    2092:	51 f0       	breq	.+20     	; 0x20a8 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2094:	e0 91 ff 02 	lds	r30, 0x02FF
    2098:	f0 91 00 03 	lds	r31, 0x0300
    209c:	96 89       	ldd	r25, Z+22	; 0x16
    209e:	8e 85       	ldd	r24, Y+14	; 0x0e
    20a0:	98 17       	cp	r25, r24
    20a2:	10 f4       	brcc	.+4      	; 0x20a8 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    20a4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
			}
		}
	}

	return xReturn;
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20aa:	64 96       	adiw	r28, 0x14	; 20
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	bf 90       	pop	r11
    20c8:	af 90       	pop	r10
    20ca:	08 95       	ret

000020cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <vTaskDelete+0x6>
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <vTaskDelete+0x8>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <vTaskDelete+0xa>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    20e4:	20 91 ff 02 	lds	r18, 0x02FF
    20e8:	30 91 00 03 	lds	r19, 0x0300
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	82 17       	cp	r24, r18
    20f2:	93 07       	cpc	r25, r19
    20f4:	11 f4       	brne	.+4      	; 0x20fa <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    20f6:	1c 82       	std	Y+4, r1	; 0x04
    20f8:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	39 f4       	brne	.+14     	; 0x2110 <vTaskDelete+0x44>
    2102:	80 91 ff 02 	lds	r24, 0x02FF
    2106:	90 91 00 03 	lds	r25, 0x0300
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <vTaskDelete+0x4c>
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	02 96       	adiw	r24, 0x02	; 2
    2126:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    212a:	e9 81       	ldd	r30, Y+1	; 0x01
    212c:	fa 81       	ldd	r31, Y+2	; 0x02
    212e:	84 89       	ldd	r24, Z+20	; 0x14
    2130:	95 89       	ldd	r25, Z+21	; 0x15
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	29 f0       	breq	.+10     	; 0x2140 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	0c 96       	adiw	r24, 0x0c	; 12
    213c:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	9c 01       	movw	r18, r24
    2146:	2e 5f       	subi	r18, 0xFE	; 254
    2148:	3f 4f       	sbci	r19, 0xFF	; 255
    214a:	89 e5       	ldi	r24, 0x59	; 89
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	b9 01       	movw	r22, r18
    2150:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2154:	80 91 01 03 	lds	r24, 0x0301
    2158:	8f 5f       	subi	r24, 0xFF	; 255
    215a:	80 93 01 03 	sts	0x0301, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    215e:	80 91 0c 03 	lds	r24, 0x030C
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	80 93 0c 03 	sts	0x030C, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2168:	0f 90       	pop	r0
    216a:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    216c:	80 91 07 03 	lds	r24, 0x0307
    2170:	88 23       	and	r24, r24
    2172:	31 f0       	breq	.+12     	; 0x2180 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	11 f4       	brne	.+4      	; 0x2180 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    217c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
			}
		}
	}
    2180:	26 96       	adiw	r28, 0x06	; 6
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	28 97       	sbiw	r28, 0x08	; 8
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	78 87       	std	Y+8, r23	; 0x08
    21ac:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    21ae:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    21b0:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    21b4:	ed 81       	ldd	r30, Y+5	; 0x05
    21b6:	fe 81       	ldd	r31, Y+6	; 0x06
    21b8:	20 81       	ld	r18, Z
    21ba:	31 81       	ldd	r19, Z+1	; 0x01
    21bc:	8f 81       	ldd	r24, Y+7	; 0x07
    21be:	98 85       	ldd	r25, Y+8	; 0x08
    21c0:	82 0f       	add	r24, r18
    21c2:	93 1f       	adc	r25, r19
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    21c8:	ed 81       	ldd	r30, Y+5	; 0x05
    21ca:	fe 81       	ldd	r31, Y+6	; 0x06
    21cc:	20 81       	ld	r18, Z
    21ce:	31 81       	ldd	r19, Z+1	; 0x01
    21d0:	80 91 03 03 	lds	r24, 0x0303
    21d4:	90 91 04 03 	lds	r25, 0x0304
    21d8:	82 17       	cp	r24, r18
    21da:	93 07       	cpc	r25, r19
    21dc:	a8 f4       	brcc	.+42     	; 0x2208 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    21de:	ed 81       	ldd	r30, Y+5	; 0x05
    21e0:	fe 81       	ldd	r31, Y+6	; 0x06
    21e2:	20 81       	ld	r18, Z
    21e4:	31 81       	ldd	r19, Z+1	; 0x01
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	82 17       	cp	r24, r18
    21ec:	93 07       	cpc	r25, r19
    21ee:	00 f5       	brcc	.+64     	; 0x2230 <vTaskDelayUntil+0x9e>
    21f0:	20 91 03 03 	lds	r18, 0x0303
    21f4:	30 91 04 03 	lds	r19, 0x0304
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	28 17       	cp	r18, r24
    21fe:	39 07       	cpc	r19, r25
    2200:	b8 f4       	brcc	.+46     	; 0x2230 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2208:	ed 81       	ldd	r30, Y+5	; 0x05
    220a:	fe 81       	ldd	r31, Y+6	; 0x06
    220c:	20 81       	ld	r18, Z
    220e:	31 81       	ldd	r19, Z+1	; 0x01
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	82 17       	cp	r24, r18
    2216:	93 07       	cpc	r25, r19
    2218:	48 f0       	brcs	.+18     	; 0x222c <vTaskDelayUntil+0x9a>
    221a:	20 91 03 03 	lds	r18, 0x0303
    221e:	30 91 04 03 	lds	r19, 0x0304
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	28 17       	cp	r18, r24
    2228:	39 07       	cpc	r19, r25
    222a:	10 f4       	brcc	.+4      	; 0x2230 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2230:	ed 81       	ldd	r30, Y+5	; 0x05
    2232:	fe 81       	ldd	r31, Y+6	; 0x06
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	88 23       	and	r24, r24
    2240:	59 f0       	breq	.+22     	; 0x2258 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2242:	80 91 ff 02 	lds	r24, 0x02FF
    2246:	90 91 00 03 	lds	r25, 0x0300
    224a:	02 96       	adiw	r24, 0x02	; 2
    224c:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2258:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
    225c:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	88 23       	and	r24, r24
    2262:	11 f4       	brne	.+4      	; 0x2268 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    2264:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
		}
	}
    2268:	28 96       	adiw	r28, 0x08	; 8
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	00 d0       	rcall	.+0      	; 0x2280 <vTaskDelay+0x6>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <vTaskDelay+0x8>
    2282:	0f 92       	push	r0
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9d 83       	std	Y+5, r25	; 0x05
    228a:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    228c:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	9d 81       	ldd	r25, Y+5	; 0x05
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	d1 f0       	breq	.+52     	; 0x22ca <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    2296:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    229a:	20 91 03 03 	lds	r18, 0x0303
    229e:	30 91 04 03 	lds	r19, 0x0304
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	9d 81       	ldd	r25, Y+5	; 0x05
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	9b 83       	std	Y+3, r25	; 0x03
    22ac:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    22ae:	80 91 ff 02 	lds	r24, 0x02FF
    22b2:	90 91 00 03 	lds	r25, 0x0300
    22b6:	02 96       	adiw	r24, 0x02	; 2
    22b8:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	9b 81       	ldd	r25, Y+3	; 0x03
    22c0:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    22c4:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>
    22c8:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	88 23       	and	r24, r24
    22ce:	11 f4       	brne	.+4      	; 0x22d4 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    22d0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
		}
	}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    22e4:	af 92       	push	r10
    22e6:	bf 92       	push	r11
    22e8:	cf 92       	push	r12
    22ea:	df 92       	push	r13
    22ec:	ef 92       	push	r14
    22ee:	ff 92       	push	r15
    22f0:	0f 93       	push	r16
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	0f 92       	push	r0
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    22fc:	20 e6       	ldi	r18, 0x60	; 96
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	89 ed       	ldi	r24, 0xD9	; 217
    2302:	94 e1       	ldi	r25, 0x14	; 20
    2304:	b9 01       	movw	r22, r18
    2306:	45 e5       	ldi	r20, 0x55	; 85
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	00 e0       	ldi	r16, 0x00	; 0
    2310:	ee 24       	eor	r14, r14
    2312:	ff 24       	eor	r15, r15
    2314:	cc 24       	eor	r12, r12
    2316:	dd 24       	eor	r13, r13
    2318:	aa 24       	eor	r10, r10
    231a:	bb 24       	eor	r11, r11
    231c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskGenericCreate>
    2320:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	51 f4       	brne	.+20     	; 0x233c <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    2328:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	80 93 07 03 	sts	0x0307, r24
		xTickCount = ( portTickType ) 0U;
    2330:	10 92 04 03 	sts	0x0304, r1
    2334:	10 92 03 03 	sts	0x0303, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2338:	0e 94 a9 09 	call	0x1352	; 0x1352 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	0f 91       	pop	r16
    2344:	ff 90       	pop	r15
    2346:	ef 90       	pop	r14
    2348:	df 90       	pop	r13
    234a:	cf 90       	pop	r12
    234c:	bf 90       	pop	r11
    234e:	af 90       	pop	r10
    2350:	08 95       	ret

00002352 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    235a:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    235c:	10 92 07 03 	sts	0x0307, r1
	vPortEndScheduler();
    2360:	0e 94 de 09 	call	0x13bc	; 0x13bc <vPortEndScheduler>
}
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2372:	80 91 08 03 	lds	r24, 0x0308
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	80 93 08 03 	sts	0x0308, r24
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <xTaskResumeAll+0x6>
    2388:	00 d0       	rcall	.+0      	; 0x238a <xTaskResumeAll+0x8>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    238e:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2396:	80 91 08 03 	lds	r24, 0x0308
    239a:	81 50       	subi	r24, 0x01	; 1
    239c:	80 93 08 03 	sts	0x0308, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    23a0:	80 91 08 03 	lds	r24, 0x0308
    23a4:	88 23       	and	r24, r24
    23a6:	09 f0       	breq	.+2      	; 0x23aa <xTaskResumeAll+0x28>
    23a8:	6c c0       	rjmp	.+216    	; 0x2482 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    23aa:	80 91 02 03 	lds	r24, 0x0302
    23ae:	88 23       	and	r24, r24
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <xTaskResumeAll+0x32>
    23b2:	67 c0       	rjmp	.+206    	; 0x2482 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    23b4:	19 82       	std	Y+1, r1	; 0x01
    23b6:	41 c0       	rjmp	.+130    	; 0x243a <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    23b8:	e0 91 55 03 	lds	r30, 0x0355
    23bc:	f0 91 56 03 	lds	r31, 0x0356
    23c0:	86 81       	ldd	r24, Z+6	; 0x06
    23c2:	97 81       	ldd	r25, Z+7	; 0x07
    23c4:	9c 83       	std	Y+4, r25	; 0x04
    23c6:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	0c 96       	adiw	r24, 0x0c	; 12
    23ce:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	02 96       	adiw	r24, 0x02	; 2
    23d8:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    23dc:	eb 81       	ldd	r30, Y+3	; 0x03
    23de:	fc 81       	ldd	r31, Y+4	; 0x04
    23e0:	96 89       	ldd	r25, Z+22	; 0x16
    23e2:	80 91 06 03 	lds	r24, 0x0306
    23e6:	89 17       	cp	r24, r25
    23e8:	28 f4       	brcc	.+10     	; 0x23f4 <xTaskResumeAll+0x72>
    23ea:	eb 81       	ldd	r30, Y+3	; 0x03
    23ec:	fc 81       	ldd	r31, Y+4	; 0x04
    23ee:	86 89       	ldd	r24, Z+22	; 0x16
    23f0:	80 93 06 03 	sts	0x0306, r24
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	86 89       	ldd	r24, Z+22	; 0x16
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	c9 01       	movw	r24, r18
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	82 0f       	add	r24, r18
    240e:	93 1f       	adc	r25, r19
    2410:	83 5f       	subi	r24, 0xF3	; 243
    2412:	9c 4f       	sbci	r25, 0xFC	; 252
    2414:	2b 81       	ldd	r18, Y+3	; 0x03
    2416:	3c 81       	ldd	r19, Y+4	; 0x04
    2418:	2e 5f       	subi	r18, 0xFE	; 254
    241a:	3f 4f       	sbci	r19, 0xFF	; 255
    241c:	b9 01       	movw	r22, r18
    241e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2422:	eb 81       	ldd	r30, Y+3	; 0x03
    2424:	fc 81       	ldd	r31, Y+4	; 0x04
    2426:	96 89       	ldd	r25, Z+22	; 0x16
    2428:	e0 91 ff 02 	lds	r30, 0x02FF
    242c:	f0 91 00 03 	lds	r31, 0x0300
    2430:	86 89       	ldd	r24, Z+22	; 0x16
    2432:	98 17       	cp	r25, r24
    2434:	10 f0       	brcs	.+4      	; 0x243a <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    243a:	80 91 50 03 	lds	r24, 0x0350
    243e:	88 23       	and	r24, r24
    2440:	09 f0       	breq	.+2      	; 0x2444 <xTaskResumeAll+0xc2>
    2442:	ba cf       	rjmp	.-140    	; 0x23b8 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2444:	80 91 09 03 	lds	r24, 0x0309
    2448:	88 23       	and	r24, r24
    244a:	71 f0       	breq	.+28     	; 0x2468 <xTaskResumeAll+0xe6>
    244c:	07 c0       	rjmp	.+14     	; 0x245c <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    244e:	0e 94 80 12 	call	0x2500	; 0x2500 <vTaskIncrementTick>
						--uxMissedTicks;
    2452:	80 91 09 03 	lds	r24, 0x0309
    2456:	81 50       	subi	r24, 0x01	; 1
    2458:	80 93 09 03 	sts	0x0309, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    245c:	80 91 09 03 	lds	r24, 0x0309
    2460:	88 23       	and	r24, r24
    2462:	a9 f7       	brne	.-22     	; 0x244e <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	21 f0       	breq	.+8      	; 0x2476 <xTaskResumeAll+0xf4>
    246e:	80 91 0a 03 	lds	r24, 0x030A
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	31 f4       	brne	.+12     	; 0x2482 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    247a:	10 92 0a 03 	sts	0x030A, r1
					portYIELD_WITHIN_API();
    247e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    2482:	0f 90       	pop	r0
    2484:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	00 d0       	rcall	.+0      	; 0x249c <xTaskGetTickCount+0x6>
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    24a6:	80 91 03 03 	lds	r24, 0x0303
    24aa:	90 91 04 03 	lds	r25, 0x0304
    24ae:	9a 83       	std	Y+2, r25	; 0x02
    24b0:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <xTaskGetTickCountFromISR+0x6>
    24ca:	0f 92       	push	r0
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24d0:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    24d2:	80 91 03 03 	lds	r24, 0x0303
    24d6:	90 91 04 03 	lds	r25, 0x0304
    24da:	9b 83       	std	Y+3, r25	; 0x03
    24dc:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    24f6:	80 91 02 03 	lds	r24, 0x0302
}
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <vTaskIncrementTick+0x6>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <vTaskIncrementTick+0x8>
    2508:	00 d0       	rcall	.+0      	; 0x250a <vTaskIncrementTick+0xa>
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    250e:	80 91 08 03 	lds	r24, 0x0308
    2512:	88 23       	and	r24, r24
    2514:	09 f0       	breq	.+2      	; 0x2518 <vTaskIncrementTick+0x18>
    2516:	bb c0       	rjmp	.+374    	; 0x268e <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    2518:	80 91 03 03 	lds	r24, 0x0303
    251c:	90 91 04 03 	lds	r25, 0x0304
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	90 93 04 03 	sts	0x0304, r25
    2526:	80 93 03 03 	sts	0x0303, r24
		if( xTickCount == ( portTickType ) 0U )
    252a:	80 91 03 03 	lds	r24, 0x0303
    252e:	90 91 04 03 	lds	r25, 0x0304
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	d1 f5       	brne	.+116    	; 0x25aa <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2536:	80 91 4c 03 	lds	r24, 0x034C
    253a:	90 91 4d 03 	lds	r25, 0x034D
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2542:	80 91 4e 03 	lds	r24, 0x034E
    2546:	90 91 4f 03 	lds	r25, 0x034F
    254a:	90 93 4d 03 	sts	0x034D, r25
    254e:	80 93 4c 03 	sts	0x034C, r24
			pxOverflowDelayedTaskList = pxTemp;
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9c 81       	ldd	r25, Y+4	; 0x04
    2556:	90 93 4f 03 	sts	0x034F, r25
    255a:	80 93 4e 03 	sts	0x034E, r24
			xNumOfOverflows++;
    255e:	80 91 0b 03 	lds	r24, 0x030B
    2562:	8f 5f       	subi	r24, 0xFF	; 255
    2564:	80 93 0b 03 	sts	0x030B, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2568:	e0 91 4c 03 	lds	r30, 0x034C
    256c:	f0 91 4d 03 	lds	r31, 0x034D
    2570:	80 81       	ld	r24, Z
    2572:	88 23       	and	r24, r24
    2574:	39 f4       	brne	.+14     	; 0x2584 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	9f ef       	ldi	r25, 0xFF	; 255
    257a:	90 93 66 00 	sts	0x0066, r25
    257e:	80 93 65 00 	sts	0x0065, r24
    2582:	13 c0       	rjmp	.+38     	; 0x25aa <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2584:	e0 91 4c 03 	lds	r30, 0x034C
    2588:	f0 91 4d 03 	lds	r31, 0x034D
    258c:	05 80       	ldd	r0, Z+5	; 0x05
    258e:	f6 81       	ldd	r31, Z+6	; 0x06
    2590:	e0 2d       	mov	r30, r0
    2592:	86 81       	ldd	r24, Z+6	; 0x06
    2594:	97 81       	ldd	r25, Z+7	; 0x07
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    259a:	ed 81       	ldd	r30, Y+5	; 0x05
    259c:	fe 81       	ldd	r31, Y+6	; 0x06
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	90 93 66 00 	sts	0x0066, r25
    25a6:	80 93 65 00 	sts	0x0065, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    25aa:	20 91 03 03 	lds	r18, 0x0303
    25ae:	30 91 04 03 	lds	r19, 0x0304
    25b2:	80 91 65 00 	lds	r24, 0x0065
    25b6:	90 91 66 00 	lds	r25, 0x0066
    25ba:	28 17       	cp	r18, r24
    25bc:	39 07       	cpc	r19, r25
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <vTaskIncrementTick+0xc2>
    25c0:	6b c0       	rjmp	.+214    	; 0x2698 <vTaskIncrementTick+0x198>
    25c2:	e0 91 4c 03 	lds	r30, 0x034C
    25c6:	f0 91 4d 03 	lds	r31, 0x034D
    25ca:	80 81       	ld	r24, Z
    25cc:	88 23       	and	r24, r24
    25ce:	39 f4       	brne	.+14     	; 0x25de <vTaskIncrementTick+0xde>
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	9f ef       	ldi	r25, 0xFF	; 255
    25d4:	90 93 66 00 	sts	0x0066, r25
    25d8:	80 93 65 00 	sts	0x0065, r24
    25dc:	5d c0       	rjmp	.+186    	; 0x2698 <vTaskIncrementTick+0x198>
    25de:	e0 91 4c 03 	lds	r30, 0x034C
    25e2:	f0 91 4d 03 	lds	r31, 0x034D
    25e6:	05 80       	ldd	r0, Z+5	; 0x05
    25e8:	f6 81       	ldd	r31, Z+6	; 0x06
    25ea:	e0 2d       	mov	r30, r0
    25ec:	86 81       	ldd	r24, Z+6	; 0x06
    25ee:	97 81       	ldd	r25, Z+7	; 0x07
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
    25f4:	ed 81       	ldd	r30, Y+5	; 0x05
    25f6:	fe 81       	ldd	r31, Y+6	; 0x06
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	20 91 03 03 	lds	r18, 0x0303
    2604:	30 91 04 03 	lds	r19, 0x0304
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	28 17       	cp	r18, r24
    260e:	39 07       	cpc	r19, r25
    2610:	38 f4       	brcc	.+14     	; 0x2620 <vTaskIncrementTick+0x120>
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	90 93 66 00 	sts	0x0066, r25
    261a:	80 93 65 00 	sts	0x0065, r24
    261e:	3c c0       	rjmp	.+120    	; 0x2698 <vTaskIncrementTick+0x198>
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	02 96       	adiw	r24, 0x02	; 2
    2626:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
    262a:	ed 81       	ldd	r30, Y+5	; 0x05
    262c:	fe 81       	ldd	r31, Y+6	; 0x06
    262e:	84 89       	ldd	r24, Z+20	; 0x14
    2630:	95 89       	ldd	r25, Z+21	; 0x15
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	29 f0       	breq	.+10     	; 0x2640 <vTaskIncrementTick+0x140>
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	0c 96       	adiw	r24, 0x0c	; 12
    263c:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
    2640:	ed 81       	ldd	r30, Y+5	; 0x05
    2642:	fe 81       	ldd	r31, Y+6	; 0x06
    2644:	96 89       	ldd	r25, Z+22	; 0x16
    2646:	80 91 06 03 	lds	r24, 0x0306
    264a:	89 17       	cp	r24, r25
    264c:	28 f4       	brcc	.+10     	; 0x2658 <vTaskIncrementTick+0x158>
    264e:	ed 81       	ldd	r30, Y+5	; 0x05
    2650:	fe 81       	ldd	r31, Y+6	; 0x06
    2652:	86 89       	ldd	r24, Z+22	; 0x16
    2654:	80 93 06 03 	sts	0x0306, r24
    2658:	ed 81       	ldd	r30, Y+5	; 0x05
    265a:	fe 81       	ldd	r31, Y+6	; 0x06
    265c:	86 89       	ldd	r24, Z+22	; 0x16
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	c9 01       	movw	r24, r18
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	ac 01       	movw	r20, r24
    2676:	43 5f       	subi	r20, 0xF3	; 243
    2678:	5c 4f       	sbci	r21, 0xFC	; 252
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	9c 01       	movw	r18, r24
    2680:	2e 5f       	subi	r18, 0xFE	; 254
    2682:	3f 4f       	sbci	r19, 0xFF	; 255
    2684:	ca 01       	movw	r24, r20
    2686:	b9 01       	movw	r22, r18
    2688:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
    268c:	9a cf       	rjmp	.-204    	; 0x25c2 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    268e:	80 91 09 03 	lds	r24, 0x0309
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	80 93 09 03 	sts	0x0309, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2698:	26 96       	adiw	r28, 0x06	; 6
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <vTaskSwitchContext+0x6>
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    26b4:	80 91 08 03 	lds	r24, 0x0308
    26b8:	88 23       	and	r24, r24
    26ba:	49 f0       	breq	.+18     	; 0x26ce <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	80 93 0a 03 	sts	0x030A, r24
    26c2:	54 c0       	rjmp	.+168    	; 0x276c <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    26c4:	80 91 06 03 	lds	r24, 0x0306
    26c8:	81 50       	subi	r24, 0x01	; 1
    26ca:	80 93 06 03 	sts	0x0306, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    26ce:	80 91 06 03 	lds	r24, 0x0306
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	c9 01       	movw	r24, r18
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	82 0f       	add	r24, r18
    26e6:	93 1f       	adc	r25, r19
    26e8:	fc 01       	movw	r30, r24
    26ea:	e3 5f       	subi	r30, 0xF3	; 243
    26ec:	fc 4f       	sbci	r31, 0xFC	; 252
    26ee:	80 81       	ld	r24, Z
    26f0:	88 23       	and	r24, r24
    26f2:	41 f3       	breq	.-48     	; 0x26c4 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    26f4:	80 91 06 03 	lds	r24, 0x0306
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	c9 01       	movw	r24, r18
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	82 0f       	add	r24, r18
    270c:	93 1f       	adc	r25, r19
    270e:	83 5f       	subi	r24, 0xF3	; 243
    2710:	9c 4f       	sbci	r25, 0xFC	; 252
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	e9 81       	ldd	r30, Y+1	; 0x01
    2718:	fa 81       	ldd	r31, Y+2	; 0x02
    271a:	01 80       	ldd	r0, Z+1	; 0x01
    271c:	f2 81       	ldd	r31, Z+2	; 0x02
    271e:	e0 2d       	mov	r30, r0
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	e9 81       	ldd	r30, Y+1	; 0x01
    2726:	fa 81       	ldd	r31, Y+2	; 0x02
    2728:	92 83       	std	Z+2, r25	; 0x02
    272a:	81 83       	std	Z+1, r24	; 0x01
    272c:	e9 81       	ldd	r30, Y+1	; 0x01
    272e:	fa 81       	ldd	r31, Y+2	; 0x02
    2730:	21 81       	ldd	r18, Z+1	; 0x01
    2732:	32 81       	ldd	r19, Z+2	; 0x02
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	03 96       	adiw	r24, 0x03	; 3
    273a:	28 17       	cp	r18, r24
    273c:	39 07       	cpc	r19, r25
    273e:	59 f4       	brne	.+22     	; 0x2756 <vTaskSwitchContext+0xac>
    2740:	e9 81       	ldd	r30, Y+1	; 0x01
    2742:	fa 81       	ldd	r31, Y+2	; 0x02
    2744:	01 80       	ldd	r0, Z+1	; 0x01
    2746:	f2 81       	ldd	r31, Z+2	; 0x02
    2748:	e0 2d       	mov	r30, r0
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	e9 81       	ldd	r30, Y+1	; 0x01
    2750:	fa 81       	ldd	r31, Y+2	; 0x02
    2752:	92 83       	std	Z+2, r25	; 0x02
    2754:	81 83       	std	Z+1, r24	; 0x01
    2756:	e9 81       	ldd	r30, Y+1	; 0x01
    2758:	fa 81       	ldd	r31, Y+2	; 0x02
    275a:	01 80       	ldd	r0, Z+1	; 0x01
    275c:	f2 81       	ldd	r31, Z+2	; 0x02
    275e:	e0 2d       	mov	r30, r0
    2760:	86 81       	ldd	r24, Z+6	; 0x06
    2762:	97 81       	ldd	r25, Z+7	; 0x07
    2764:	90 93 00 03 	sts	0x0300, r25
    2768:	80 93 ff 02 	sts	0x02FF, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	00 d0       	rcall	.+0      	; 0x277c <vTaskPlaceOnEventList+0x6>
    277c:	00 d0       	rcall	.+0      	; 0x277e <vTaskPlaceOnEventList+0x8>
    277e:	00 d0       	rcall	.+0      	; 0x2780 <vTaskPlaceOnEventList+0xa>
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	9c 83       	std	Y+4, r25	; 0x04
    2786:	8b 83       	std	Y+3, r24	; 0x03
    2788:	7e 83       	std	Y+6, r23	; 0x06
    278a:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    278c:	4b 81       	ldd	r20, Y+3	; 0x03
    278e:	5c 81       	ldd	r21, Y+4	; 0x04
    2790:	80 91 ff 02 	lds	r24, 0x02FF
    2794:	90 91 00 03 	lds	r25, 0x0300
    2798:	9c 01       	movw	r18, r24
    279a:	24 5f       	subi	r18, 0xF4	; 244
    279c:	3f 4f       	sbci	r19, 0xFF	; 255
    279e:	ca 01       	movw	r24, r20
    27a0:	b9 01       	movw	r22, r18
    27a2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    27a6:	80 91 ff 02 	lds	r24, 0x02FF
    27aa:	90 91 00 03 	lds	r25, 0x0300
    27ae:	02 96       	adiw	r24, 0x02	; 2
    27b0:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    27b4:	20 91 03 03 	lds	r18, 0x0303
    27b8:	30 91 04 03 	lds	r19, 0x0304
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	82 0f       	add	r24, r18
    27c2:	93 1f       	adc	r25, r19
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	9a 81       	ldd	r25, Y+2	; 0x02
    27cc:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    27d0:	26 96       	adiw	r28, 0x06	; 6
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <xTaskRemoveFromEventList+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <xTaskRemoveFromEventList+0x8>
    27ea:	0f 92       	push	r0
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	9d 83       	std	Y+5, r25	; 0x05
    27f2:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    27f4:	ec 81       	ldd	r30, Y+4	; 0x04
    27f6:	fd 81       	ldd	r31, Y+5	; 0x05
    27f8:	05 80       	ldd	r0, Z+5	; 0x05
    27fa:	f6 81       	ldd	r31, Z+6	; 0x06
    27fc:	e0 2d       	mov	r30, r0
    27fe:	86 81       	ldd	r24, Z+6	; 0x06
    2800:	97 81       	ldd	r25, Z+7	; 0x07
    2802:	9b 83       	std	Y+3, r25	; 0x03
    2804:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	0c 96       	adiw	r24, 0x0c	; 12
    280c:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2810:	80 91 08 03 	lds	r24, 0x0308
    2814:	88 23       	and	r24, r24
    2816:	61 f5       	brne	.+88     	; 0x2870 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	02 96       	adiw	r24, 0x02	; 2
    281e:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2822:	ea 81       	ldd	r30, Y+2	; 0x02
    2824:	fb 81       	ldd	r31, Y+3	; 0x03
    2826:	96 89       	ldd	r25, Z+22	; 0x16
    2828:	80 91 06 03 	lds	r24, 0x0306
    282c:	89 17       	cp	r24, r25
    282e:	28 f4       	brcc	.+10     	; 0x283a <xTaskRemoveFromEventList+0x58>
    2830:	ea 81       	ldd	r30, Y+2	; 0x02
    2832:	fb 81       	ldd	r31, Y+3	; 0x03
    2834:	86 89       	ldd	r24, Z+22	; 0x16
    2836:	80 93 06 03 	sts	0x0306, r24
    283a:	ea 81       	ldd	r30, Y+2	; 0x02
    283c:	fb 81       	ldd	r31, Y+3	; 0x03
    283e:	86 89       	ldd	r24, Z+22	; 0x16
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	c9 01       	movw	r24, r18
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	82 0f       	add	r24, r18
    2854:	93 1f       	adc	r25, r19
    2856:	ac 01       	movw	r20, r24
    2858:	43 5f       	subi	r20, 0xF3	; 243
    285a:	5c 4f       	sbci	r21, 0xFC	; 252
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	9b 81       	ldd	r25, Y+3	; 0x03
    2860:	9c 01       	movw	r18, r24
    2862:	2e 5f       	subi	r18, 0xFE	; 254
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
    2866:	ca 01       	movw	r24, r20
    2868:	b9 01       	movw	r22, r18
    286a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
    286e:	0a c0       	rjmp	.+20     	; 0x2884 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	9b 81       	ldd	r25, Y+3	; 0x03
    2874:	9c 01       	movw	r18, r24
    2876:	24 5f       	subi	r18, 0xF4	; 244
    2878:	3f 4f       	sbci	r19, 0xFF	; 255
    287a:	80 e5       	ldi	r24, 0x50	; 80
    287c:	93 e0       	ldi	r25, 0x03	; 3
    287e:	b9 01       	movw	r22, r18
    2880:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2884:	ea 81       	ldd	r30, Y+2	; 0x02
    2886:	fb 81       	ldd	r31, Y+3	; 0x03
    2888:	96 89       	ldd	r25, Z+22	; 0x16
    288a:	e0 91 ff 02 	lds	r30, 0x02FF
    288e:	f0 91 00 03 	lds	r31, 0x0300
    2892:	86 89       	ldd	r24, Z+22	; 0x16
    2894:	98 17       	cp	r25, r24
    2896:	18 f0       	brcs	.+6      	; 0x289e <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	01 c0       	rjmp	.+2      	; 0x28a0 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    289e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <vTaskSetTimeOutState+0x6>
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    28c0:	80 91 0b 03 	lds	r24, 0x030B
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    28ca:	80 91 03 03 	lds	r24, 0x0303
    28ce:	90 91 04 03 	lds	r25, 0x0304
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	92 83       	std	Z+2, r25	; 0x02
    28d8:	81 83       	std	Z+1, r24	; 0x01
}
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <xTaskCheckForTimeOut+0x6>
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <xTaskCheckForTimeOut+0x8>
    28ec:	0f 92       	push	r0
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	9b 83       	std	Y+3, r25	; 0x03
    28f4:	8a 83       	std	Y+2, r24	; 0x02
    28f6:	7d 83       	std	Y+5, r23	; 0x05
    28f8:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2900:	ea 81       	ldd	r30, Y+2	; 0x02
    2902:	fb 81       	ldd	r31, Y+3	; 0x03
    2904:	90 81       	ld	r25, Z
    2906:	80 91 0b 03 	lds	r24, 0x030B
    290a:	98 17       	cp	r25, r24
    290c:	71 f0       	breq	.+28     	; 0x292a <xTaskCheckForTimeOut+0x46>
    290e:	ea 81       	ldd	r30, Y+2	; 0x02
    2910:	fb 81       	ldd	r31, Y+3	; 0x03
    2912:	21 81       	ldd	r18, Z+1	; 0x01
    2914:	32 81       	ldd	r19, Z+2	; 0x02
    2916:	80 91 03 03 	lds	r24, 0x0303
    291a:	90 91 04 03 	lds	r25, 0x0304
    291e:	82 17       	cp	r24, r18
    2920:	93 07       	cpc	r25, r19
    2922:	18 f0       	brcs	.+6      	; 0x292a <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	2f c0       	rjmp	.+94     	; 0x2988 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    292a:	20 91 03 03 	lds	r18, 0x0303
    292e:	30 91 04 03 	lds	r19, 0x0304
    2932:	ea 81       	ldd	r30, Y+2	; 0x02
    2934:	fb 81       	ldd	r31, Y+3	; 0x03
    2936:	81 81       	ldd	r24, Z+1	; 0x01
    2938:	92 81       	ldd	r25, Z+2	; 0x02
    293a:	28 1b       	sub	r18, r24
    293c:	39 0b       	sbc	r19, r25
    293e:	ec 81       	ldd	r30, Y+4	; 0x04
    2940:	fd 81       	ldd	r31, Y+5	; 0x05
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	28 17       	cp	r18, r24
    2948:	39 07       	cpc	r19, r25
    294a:	e0 f4       	brcc	.+56     	; 0x2984 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    294c:	ec 81       	ldd	r30, Y+4	; 0x04
    294e:	fd 81       	ldd	r31, Y+5	; 0x05
    2950:	40 81       	ld	r20, Z
    2952:	51 81       	ldd	r21, Z+1	; 0x01
    2954:	ea 81       	ldd	r30, Y+2	; 0x02
    2956:	fb 81       	ldd	r31, Y+3	; 0x03
    2958:	21 81       	ldd	r18, Z+1	; 0x01
    295a:	32 81       	ldd	r19, Z+2	; 0x02
    295c:	80 91 03 03 	lds	r24, 0x0303
    2960:	90 91 04 03 	lds	r25, 0x0304
    2964:	b9 01       	movw	r22, r18
    2966:	68 1b       	sub	r22, r24
    2968:	79 0b       	sbc	r23, r25
    296a:	cb 01       	movw	r24, r22
    296c:	84 0f       	add	r24, r20
    296e:	95 1f       	adc	r25, r21
    2970:	ec 81       	ldd	r30, Y+4	; 0x04
    2972:	fd 81       	ldd	r31, Y+5	; 0x05
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	9b 81       	ldd	r25, Y+3	; 0x03
    297c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2980:	19 82       	std	Y+1, r1	; 0x01
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2988:	0f 90       	pop	r0
    298a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    298c:	89 81       	ldd	r24, Y+1	; 0x01
}
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	80 93 0a 03 	sts	0x030A, r24
}
    29ac:	cf 91       	pop	r28
    29ae:	df 91       	pop	r29
    29b0:	08 95       	ret

000029b2 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    29b2:	df 93       	push	r29
    29b4:	cf 93       	push	r28
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <prvIdleTask+0x6>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    29c0:	0e 94 77 15 	call	0x2aee	; 0x2aee <prvCheckTasksWaitingTermination>
    29c4:	fd cf       	rjmp	.-6      	; 0x29c0 <prvIdleTask+0xe>

000029c6 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	29 97       	sbiw	r28, 0x09	; 9
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	7c 83       	std	Y+4, r23	; 0x04
    29e4:	6b 83       	std	Y+3, r22	; 0x03
    29e6:	4d 83       	std	Y+5, r20	; 0x05
    29e8:	3f 83       	std	Y+7, r19	; 0x07
    29ea:	2e 83       	std	Y+6, r18	; 0x06
    29ec:	19 87       	std	Y+9, r17	; 0x09
    29ee:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	49 96       	adiw	r24, 0x19	; 25
    29f6:	2b 81       	ldd	r18, Y+3	; 0x03
    29f8:	3c 81       	ldd	r19, Y+4	; 0x04
    29fa:	b9 01       	movw	r22, r18
    29fc:	48 e0       	ldi	r20, 0x08	; 8
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	85 30       	cpi	r24, 0x05	; 5
    2a0e:	10 f0       	brcs	.+4      	; 0x2a14 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    2a10:	84 e0       	ldi	r24, 0x04	; 4
    2a12:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    2a14:	e9 81       	ldd	r30, Y+1	; 0x01
    2a16:	fa 81       	ldd	r31, Y+2	; 0x02
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	02 96       	adiw	r24, 0x02	; 2
    2a22:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2a:	0c 96       	adiw	r24, 0x0c	; 12
    2a2c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2a30:	e9 81       	ldd	r30, Y+1	; 0x01
    2a32:	fa 81       	ldd	r31, Y+2	; 0x02
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	91 87       	std	Z+9, r25	; 0x09
    2a3a:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	85 e0       	ldi	r24, 0x05	; 5
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	82 1b       	sub	r24, r18
    2a48:	93 0b       	sbc	r25, r19
    2a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4e:	95 87       	std	Z+13, r25	; 0x0d
    2a50:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	93 8b       	std	Z+19, r25	; 0x13
    2a5c:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2a5e:	29 96       	adiw	r28, 0x09	; 9
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	08 95       	ret

00002a74 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	0f 92       	push	r0
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2a7e:	19 82       	std	Y+1, r1	; 0x01
    2a80:	13 c0       	rjmp	.+38     	; 0x2aa8 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	c9 01       	movw	r24, r18
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	82 0f       	add	r24, r18
    2a98:	93 1f       	adc	r25, r19
    2a9a:	83 5f       	subi	r24, 0xF3	; 243
    2a9c:	9c 4f       	sbci	r25, 0xFC	; 252
    2a9e:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	85 30       	cpi	r24, 0x05	; 5
    2aac:	50 f3       	brcs	.-44     	; 0x2a82 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2aae:	8a e3       	ldi	r24, 0x3A	; 58
    2ab0:	93 e0       	ldi	r25, 0x03	; 3
    2ab2:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    2ab6:	83 e4       	ldi	r24, 0x43	; 67
    2ab8:	93 e0       	ldi	r25, 0x03	; 3
    2aba:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2abe:	80 e5       	ldi	r24, 0x50	; 80
    2ac0:	93 e0       	ldi	r25, 0x03	; 3
    2ac2:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2ac6:	89 e5       	ldi	r24, 0x59	; 89
    2ac8:	93 e0       	ldi	r25, 0x03	; 3
    2aca:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2ace:	8a e3       	ldi	r24, 0x3A	; 58
    2ad0:	93 e0       	ldi	r25, 0x03	; 3
    2ad2:	90 93 4d 03 	sts	0x034D, r25
    2ad6:	80 93 4c 03 	sts	0x034C, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2ada:	83 e4       	ldi	r24, 0x43	; 67
    2adc:	93 e0       	ldi	r25, 0x03	; 3
    2ade:	90 93 4f 03 	sts	0x034F, r25
    2ae2:	80 93 4e 03 	sts	0x034E, r24
}
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <prvCheckTasksWaitingTermination+0x6>
    2af4:	0f 92       	push	r0
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2afa:	80 91 01 03 	lds	r24, 0x0301
    2afe:	88 23       	and	r24, r24
    2b00:	71 f1       	breq	.+92     	; 0x2b5e <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    2b02:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2b06:	80 91 59 03 	lds	r24, 0x0359
    2b0a:	1b 82       	std	Y+3, r1	; 0x03
    2b0c:	88 23       	and	r24, r24
    2b0e:	11 f4       	brne	.+4      	; 0x2b14 <prvCheckTasksWaitingTermination+0x26>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    2b14:	0e 94 c1 11 	call	0x2382	; 0x2382 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	88 23       	and	r24, r24
    2b1c:	01 f5       	brne	.+64     	; 0x2b5e <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2b24:	e0 91 5e 03 	lds	r30, 0x035E
    2b28:	f0 91 5f 03 	lds	r31, 0x035F
    2b2c:	86 81       	ldd	r24, Z+6	; 0x06
    2b2e:	97 81       	ldd	r25, Z+7	; 0x07
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	02 96       	adiw	r24, 0x02	; 2
    2b3a:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
					--uxCurrentNumberOfTasks;
    2b3e:	80 91 02 03 	lds	r24, 0x0302
    2b42:	81 50       	subi	r24, 0x01	; 1
    2b44:	80 93 02 03 	sts	0x0302, r24
					--uxTasksDeleted;
    2b48:	80 91 01 03 	lds	r24, 0x0301
    2b4c:	81 50       	subi	r24, 0x01	; 1
    2b4e:	80 93 01 03 	sts	0x0301, r24
				}
				taskEXIT_CRITICAL();
    2b52:	0f 90       	pop	r0
    2b54:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <prvAddCurrentTaskToDelayedList+0x6>
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2b78:	e0 91 ff 02 	lds	r30, 0x02FF
    2b7c:	f0 91 00 03 	lds	r31, 0x0300
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	93 83       	std	Z+3, r25	; 0x03
    2b86:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    2b88:	20 91 03 03 	lds	r18, 0x0303
    2b8c:	30 91 04 03 	lds	r19, 0x0304
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	9a 81       	ldd	r25, Y+2	; 0x02
    2b94:	82 17       	cp	r24, r18
    2b96:	93 07       	cpc	r25, r19
    2b98:	70 f4       	brcc	.+28     	; 0x2bb6 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2b9a:	80 91 4e 03 	lds	r24, 0x034E
    2b9e:	90 91 4f 03 	lds	r25, 0x034F
    2ba2:	20 91 ff 02 	lds	r18, 0x02FF
    2ba6:	30 91 00 03 	lds	r19, 0x0300
    2baa:	2e 5f       	subi	r18, 0xFE	; 254
    2bac:	3f 4f       	sbci	r19, 0xFF	; 255
    2bae:	b9 01       	movw	r22, r18
    2bb0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
    2bb4:	1e c0       	rjmp	.+60     	; 0x2bf2 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2bb6:	40 91 4c 03 	lds	r20, 0x034C
    2bba:	50 91 4d 03 	lds	r21, 0x034D
    2bbe:	80 91 ff 02 	lds	r24, 0x02FF
    2bc2:	90 91 00 03 	lds	r25, 0x0300
    2bc6:	9c 01       	movw	r18, r24
    2bc8:	2e 5f       	subi	r18, 0xFE	; 254
    2bca:	3f 4f       	sbci	r19, 0xFF	; 255
    2bcc:	ca 01       	movw	r24, r20
    2bce:	b9 01       	movw	r22, r18
    2bd0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2bd4:	20 91 65 00 	lds	r18, 0x0065
    2bd8:	30 91 66 00 	lds	r19, 0x0066
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	82 17       	cp	r24, r18
    2be2:	93 07       	cpc	r25, r19
    2be4:	30 f4       	brcc	.+12     	; 0x2bf2 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	90 93 66 00 	sts	0x0066, r25
    2bee:	80 93 65 00 	sts	0x0065, r24
		}
	}
}
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	28 97       	sbiw	r28, 0x08	; 8
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	9c 83       	std	Y+4, r25	; 0x04
    2c12:	8b 83       	std	Y+3, r24	; 0x03
    2c14:	7e 83       	std	Y+6, r23	; 0x06
    2c16:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    2c18:	81 e2       	ldi	r24, 0x21	; 33
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	69 f1       	breq	.+90     	; 0x2c86 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	39 f4       	brne	.+14     	; 0x2c42 <prvAllocateTCBAndStack+0x46>
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    2c3c:	98 87       	std	Y+8, r25	; 0x08
    2c3e:	8f 83       	std	Y+7, r24	; 0x07
    2c40:	04 c0       	rjmp	.+8      	; 0x2c4a <prvAllocateTCBAndStack+0x4e>
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06
    2c46:	98 87       	std	Y+8, r25	; 0x08
    2c48:	8f 83       	std	Y+7, r24	; 0x07
    2c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c50:	98 85       	ldd	r25, Y+8	; 0x08
    2c52:	90 8f       	std	Z+24, r25	; 0x18
    2c54:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    2c56:	e9 81       	ldd	r30, Y+1	; 0x01
    2c58:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5a:	87 89       	ldd	r24, Z+23	; 0x17
    2c5c:	90 8d       	ldd	r25, Z+24	; 0x18
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	39 f4       	brne	.+14     	; 0x2c70 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
			pxNewTCB = NULL;
    2c6a:	1a 82       	std	Y+2, r1	; 0x02
    2c6c:	19 82       	std	Y+1, r1	; 0x01
    2c6e:	0b c0       	rjmp	.+22     	; 0x2c86 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2c70:	e9 81       	ldd	r30, Y+1	; 0x01
    2c72:	fa 81       	ldd	r31, Y+2	; 0x02
    2c74:	87 89       	ldd	r24, Z+23	; 0x17
    2c76:	90 8d       	ldd	r25, Z+24	; 0x18
    2c78:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7c:	65 ea       	ldi	r22, 0xA5	; 165
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	a9 01       	movw	r20, r18
    2c82:	0e 94 6d 16 	call	0x2cda	; 0x2cda <memset>
		}
	}

	return pxNewTCB;
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c8a:	28 96       	adiw	r28, 0x08	; 8
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <prvDeleteTCB+0x6>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2caa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cac:	fa 81       	ldd	r31, Y+2	; 0x02
    2cae:	87 89       	ldd	r24, Z+23	; 0x17
    2cb0:	90 8d       	ldd	r25, Z+24	; 0x18
    2cb2:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
		vPortFree( pxTCB );
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
	}
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <memcpy>:
    2cc8:	fb 01       	movw	r30, r22
    2cca:	dc 01       	movw	r26, r24
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <memcpy+0xa>
    2cce:	01 90       	ld	r0, Z+
    2cd0:	0d 92       	st	X+, r0
    2cd2:	41 50       	subi	r20, 0x01	; 1
    2cd4:	50 40       	sbci	r21, 0x00	; 0
    2cd6:	d8 f7       	brcc	.-10     	; 0x2cce <memcpy+0x6>
    2cd8:	08 95       	ret

00002cda <memset>:
    2cda:	dc 01       	movw	r26, r24
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <memset+0x6>
    2cde:	6d 93       	st	X+, r22
    2ce0:	41 50       	subi	r20, 0x01	; 1
    2ce2:	50 40       	sbci	r21, 0x00	; 0
    2ce4:	e0 f7       	brcc	.-8      	; 0x2cde <memset+0x4>
    2ce6:	08 95       	ret

00002ce8 <strncpy>:
    2ce8:	fb 01       	movw	r30, r22
    2cea:	dc 01       	movw	r26, r24
    2cec:	41 50       	subi	r20, 0x01	; 1
    2cee:	50 40       	sbci	r21, 0x00	; 0
    2cf0:	48 f0       	brcs	.+18     	; 0x2d04 <strncpy+0x1c>
    2cf2:	01 90       	ld	r0, Z+
    2cf4:	0d 92       	st	X+, r0
    2cf6:	00 20       	and	r0, r0
    2cf8:	c9 f7       	brne	.-14     	; 0x2cec <strncpy+0x4>
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <strncpy+0x16>
    2cfc:	1d 92       	st	X+, r1
    2cfe:	41 50       	subi	r20, 0x01	; 1
    2d00:	50 40       	sbci	r21, 0x00	; 0
    2d02:	e0 f7       	brcc	.-8      	; 0x2cfc <strncpy+0x14>
    2d04:	08 95       	ret

00002d06 <_exit>:
    2d06:	f8 94       	cli

00002d08 <__stop_program>:
    2d08:	ff cf       	rjmp	.-2      	; 0x2d08 <__stop_program>
