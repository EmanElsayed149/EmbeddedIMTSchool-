
semaphor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002d22  00002db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f9  00800068  00800068  00002dbe  2**0
                  ALLOC
  3 .stab         0000492c  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e39  00000000  00000000  000076ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 36       	cpi	r26, 0x61	; 97
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 07 	call	0xef8	; 0xef8 <main>
      8a:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <M_DIO_Vid_WrtPinDir>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <M_DIO_Vid_WrtPinDir+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <M_DIO_Vid_WrtPinDir+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	6a 83       	std	Y+2, r22	; 0x02
      a4:	4b 83       	std	Y+3, r20	; 0x03
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	28 2f       	mov	r18, r24
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	3d 83       	std	Y+5, r19	; 0x05
      ae:	2c 83       	std	Y+4, r18	; 0x04
      b0:	6c 81       	ldd	r22, Y+4	; 0x04
      b2:	7d 81       	ldd	r23, Y+5	; 0x05
      b4:	61 30       	cpi	r22, 0x01	; 1
      b6:	71 05       	cpc	r23, r1
      b8:	d1 f1       	breq	.+116    	; 0x12e <M_DIO_Vid_WrtPinDir+0x9c>
      ba:	8c 81       	ldd	r24, Y+4	; 0x04
      bc:	9d 81       	ldd	r25, Y+5	; 0x05
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	91 05       	cpc	r25, r1
      c2:	34 f4       	brge	.+12     	; 0xd0 <M_DIO_Vid_WrtPinDir+0x3e>
      c4:	2c 81       	ldd	r18, Y+4	; 0x04
      c6:	3d 81       	ldd	r19, Y+5	; 0x05
      c8:	21 15       	cp	r18, r1
      ca:	31 05       	cpc	r19, r1
      cc:	71 f0       	breq	.+28     	; 0xea <M_DIO_Vid_WrtPinDir+0x58>
      ce:	94 c0       	rjmp	.+296    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
      d0:	6c 81       	ldd	r22, Y+4	; 0x04
      d2:	7d 81       	ldd	r23, Y+5	; 0x05
      d4:	62 30       	cpi	r22, 0x02	; 2
      d6:	71 05       	cpc	r23, r1
      d8:	09 f4       	brne	.+2      	; 0xdc <M_DIO_Vid_WrtPinDir+0x4a>
      da:	4b c0       	rjmp	.+150    	; 0x172 <M_DIO_Vid_WrtPinDir+0xe0>
      dc:	8c 81       	ldd	r24, Y+4	; 0x04
      de:	9d 81       	ldd	r25, Y+5	; 0x05
      e0:	83 30       	cpi	r24, 0x03	; 3
      e2:	91 05       	cpc	r25, r1
      e4:	09 f4       	brne	.+2      	; 0xe8 <M_DIO_Vid_WrtPinDir+0x56>
      e6:	67 c0       	rjmp	.+206    	; 0x1b6 <M_DIO_Vid_WrtPinDir+0x124>
      e8:	87 c0       	rjmp	.+270    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
      ea:	aa e3       	ldi	r26, 0x3A	; 58
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	ea e3       	ldi	r30, 0x3A	; 58
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	48 2f       	mov	r20, r24
      f6:	8a 81       	ldd	r24, Y+2	; 0x02
      f8:	28 2f       	mov	r18, r24
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <M_DIO_Vid_WrtPinDir+0x74>
     102:	88 0f       	add	r24, r24
     104:	99 1f       	adc	r25, r25
     106:	2a 95       	dec	r18
     108:	e2 f7       	brpl	.-8      	; 0x102 <M_DIO_Vid_WrtPinDir+0x70>
     10a:	80 95       	com	r24
     10c:	48 23       	and	r20, r24
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	28 2f       	mov	r18, r24
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	88 2f       	mov	r24, r24
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	b9 01       	movw	r22, r18
     11c:	02 c0       	rjmp	.+4      	; 0x122 <M_DIO_Vid_WrtPinDir+0x90>
     11e:	66 0f       	add	r22, r22
     120:	77 1f       	adc	r23, r23
     122:	8a 95       	dec	r24
     124:	e2 f7       	brpl	.-8      	; 0x11e <M_DIO_Vid_WrtPinDir+0x8c>
     126:	cb 01       	movw	r24, r22
     128:	84 2b       	or	r24, r20
     12a:	8c 93       	st	X, r24
     12c:	65 c0       	rjmp	.+202    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
     12e:	a7 e3       	ldi	r26, 0x37	; 55
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e7 e3       	ldi	r30, 0x37	; 55
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	48 2f       	mov	r20, r24
     13a:	8a 81       	ldd	r24, Y+2	; 0x02
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 c0       	rjmp	.+4      	; 0x14a <M_DIO_Vid_WrtPinDir+0xb8>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	2a 95       	dec	r18
     14c:	e2 f7       	brpl	.-8      	; 0x146 <M_DIO_Vid_WrtPinDir+0xb4>
     14e:	80 95       	com	r24
     150:	48 23       	and	r20, r24
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	28 2f       	mov	r18, r24
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	8a 81       	ldd	r24, Y+2	; 0x02
     15a:	88 2f       	mov	r24, r24
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	b9 01       	movw	r22, r18
     160:	02 c0       	rjmp	.+4      	; 0x166 <M_DIO_Vid_WrtPinDir+0xd4>
     162:	66 0f       	add	r22, r22
     164:	77 1f       	adc	r23, r23
     166:	8a 95       	dec	r24
     168:	e2 f7       	brpl	.-8      	; 0x162 <M_DIO_Vid_WrtPinDir+0xd0>
     16a:	cb 01       	movw	r24, r22
     16c:	84 2b       	or	r24, r20
     16e:	8c 93       	st	X, r24
     170:	43 c0       	rjmp	.+134    	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
     172:	a4 e3       	ldi	r26, 0x34	; 52
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	e4 e3       	ldi	r30, 0x34	; 52
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	48 2f       	mov	r20, r24
     17e:	8a 81       	ldd	r24, Y+2	; 0x02
     180:	28 2f       	mov	r18, r24
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	02 c0       	rjmp	.+4      	; 0x18e <M_DIO_Vid_WrtPinDir+0xfc>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	2a 95       	dec	r18
     190:	e2 f7       	brpl	.-8      	; 0x18a <M_DIO_Vid_WrtPinDir+0xf8>
     192:	80 95       	com	r24
     194:	48 23       	and	r20, r24
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	88 2f       	mov	r24, r24
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	b9 01       	movw	r22, r18
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <M_DIO_Vid_WrtPinDir+0x118>
     1a6:	66 0f       	add	r22, r22
     1a8:	77 1f       	adc	r23, r23
     1aa:	8a 95       	dec	r24
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <M_DIO_Vid_WrtPinDir+0x114>
     1ae:	cb 01       	movw	r24, r22
     1b0:	84 2b       	or	r24, r20
     1b2:	8c 93       	st	X, r24
     1b4:	21 c0       	rjmp	.+66     	; 0x1f8 <M_DIO_Vid_WrtPinDir+0x166>
     1b6:	a1 e3       	ldi	r26, 0x31	; 49
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e1 e3       	ldi	r30, 0x31	; 49
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	48 2f       	mov	r20, r24
     1c2:	8a 81       	ldd	r24, Y+2	; 0x02
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <M_DIO_Vid_WrtPinDir+0x140>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	2a 95       	dec	r18
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <M_DIO_Vid_WrtPinDir+0x13c>
     1d6:	80 95       	com	r24
     1d8:	48 23       	and	r20, r24
     1da:	8b 81       	ldd	r24, Y+3	; 0x03
     1dc:	28 2f       	mov	r18, r24
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	88 2f       	mov	r24, r24
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	b9 01       	movw	r22, r18
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <M_DIO_Vid_WrtPinDir+0x15c>
     1ea:	66 0f       	add	r22, r22
     1ec:	77 1f       	adc	r23, r23
     1ee:	8a 95       	dec	r24
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <M_DIO_Vid_WrtPinDir+0x158>
     1f2:	cb 01       	movw	r24, r22
     1f4:	84 2b       	or	r24, r20
     1f6:	8c 93       	st	X, r24
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	cf 91       	pop	r28
     204:	df 91       	pop	r29
     206:	08 95       	ret

00000208 <M_DIO_Vid_wrtPinVal>:
		case M_DIO_PORTD: WRT_BIT(DDRD,copy_u8_pin,copy_u8_direcrion); break;
		default:break;
	}
}
void M_DIO_Vid_wrtPinVal(u8 copy_u8_Port,u8 copy_u8_Pin,u8 copy_u8_pinVal)
{
     208:	df 93       	push	r29
     20a:	cf 93       	push	r28
     20c:	00 d0       	rcall	.+0      	; 0x20e <M_DIO_Vid_wrtPinVal+0x6>
     20e:	00 d0       	rcall	.+0      	; 0x210 <M_DIO_Vid_wrtPinVal+0x8>
     210:	0f 92       	push	r0
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	89 83       	std	Y+1, r24	; 0x01
     218:	6a 83       	std	Y+2, r22	; 0x02
     21a:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8_Port)
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	3d 83       	std	Y+5, r19	; 0x05
     224:	2c 83       	std	Y+4, r18	; 0x04
     226:	6c 81       	ldd	r22, Y+4	; 0x04
     228:	7d 81       	ldd	r23, Y+5	; 0x05
     22a:	61 30       	cpi	r22, 0x01	; 1
     22c:	71 05       	cpc	r23, r1
     22e:	d1 f1       	breq	.+116    	; 0x2a4 <M_DIO_Vid_wrtPinVal+0x9c>
     230:	8c 81       	ldd	r24, Y+4	; 0x04
     232:	9d 81       	ldd	r25, Y+5	; 0x05
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	91 05       	cpc	r25, r1
     238:	34 f4       	brge	.+12     	; 0x246 <M_DIO_Vid_wrtPinVal+0x3e>
     23a:	2c 81       	ldd	r18, Y+4	; 0x04
     23c:	3d 81       	ldd	r19, Y+5	; 0x05
     23e:	21 15       	cp	r18, r1
     240:	31 05       	cpc	r19, r1
     242:	71 f0       	breq	.+28     	; 0x260 <M_DIO_Vid_wrtPinVal+0x58>
     244:	94 c0       	rjmp	.+296    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
     246:	6c 81       	ldd	r22, Y+4	; 0x04
     248:	7d 81       	ldd	r23, Y+5	; 0x05
     24a:	62 30       	cpi	r22, 0x02	; 2
     24c:	71 05       	cpc	r23, r1
     24e:	09 f4       	brne	.+2      	; 0x252 <M_DIO_Vid_wrtPinVal+0x4a>
     250:	4b c0       	rjmp	.+150    	; 0x2e8 <M_DIO_Vid_wrtPinVal+0xe0>
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	9d 81       	ldd	r25, Y+5	; 0x05
     256:	83 30       	cpi	r24, 0x03	; 3
     258:	91 05       	cpc	r25, r1
     25a:	09 f4       	brne	.+2      	; 0x25e <M_DIO_Vid_wrtPinVal+0x56>
     25c:	67 c0       	rjmp	.+206    	; 0x32c <M_DIO_Vid_wrtPinVal+0x124>
     25e:	87 c0       	rjmp	.+270    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
	{
		case M_DIO_PORTA: WRT_BIT(PORTA,copy_u8_Pin,copy_u8_pinVal); break;
     260:	ab e3       	ldi	r26, 0x3B	; 59
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	eb e3       	ldi	r30, 0x3B	; 59
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	48 2f       	mov	r20, r24
     26c:	8a 81       	ldd	r24, Y+2	; 0x02
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <M_DIO_Vid_wrtPinVal+0x74>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	2a 95       	dec	r18
     27e:	e2 f7       	brpl	.-8      	; 0x278 <M_DIO_Vid_wrtPinVal+0x70>
     280:	80 95       	com	r24
     282:	48 23       	and	r20, r24
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	28 2f       	mov	r18, r24
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	8a 81       	ldd	r24, Y+2	; 0x02
     28c:	88 2f       	mov	r24, r24
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	b9 01       	movw	r22, r18
     292:	02 c0       	rjmp	.+4      	; 0x298 <M_DIO_Vid_wrtPinVal+0x90>
     294:	66 0f       	add	r22, r22
     296:	77 1f       	adc	r23, r23
     298:	8a 95       	dec	r24
     29a:	e2 f7       	brpl	.-8      	; 0x294 <M_DIO_Vid_wrtPinVal+0x8c>
     29c:	cb 01       	movw	r24, r22
     29e:	84 2b       	or	r24, r20
     2a0:	8c 93       	st	X, r24
     2a2:	65 c0       	rjmp	.+202    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
		case M_DIO_PORTB: WRT_BIT(PORTB,copy_u8_Pin,copy_u8_pinVal); break;
     2a4:	a8 e3       	ldi	r26, 0x38	; 56
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	e8 e3       	ldi	r30, 0x38	; 56
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	48 2f       	mov	r20, r24
     2b0:	8a 81       	ldd	r24, Y+2	; 0x02
     2b2:	28 2f       	mov	r18, r24
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <M_DIO_Vid_wrtPinVal+0xb8>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	2a 95       	dec	r18
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <M_DIO_Vid_wrtPinVal+0xb4>
     2c4:	80 95       	com	r24
     2c6:	48 23       	and	r20, r24
     2c8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ca:	28 2f       	mov	r18, r24
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	b9 01       	movw	r22, r18
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <M_DIO_Vid_wrtPinVal+0xd4>
     2d8:	66 0f       	add	r22, r22
     2da:	77 1f       	adc	r23, r23
     2dc:	8a 95       	dec	r24
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <M_DIO_Vid_wrtPinVal+0xd0>
     2e0:	cb 01       	movw	r24, r22
     2e2:	84 2b       	or	r24, r20
     2e4:	8c 93       	st	X, r24
     2e6:	43 c0       	rjmp	.+134    	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
		case M_DIO_PORTC: WRT_BIT(PORTC,copy_u8_Pin,copy_u8_pinVal); break;
     2e8:	a5 e3       	ldi	r26, 0x35	; 53
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	e5 e3       	ldi	r30, 0x35	; 53
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	80 81       	ld	r24, Z
     2f2:	48 2f       	mov	r20, r24
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	28 2f       	mov	r18, r24
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <M_DIO_Vid_wrtPinVal+0xfc>
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	2a 95       	dec	r18
     306:	e2 f7       	brpl	.-8      	; 0x300 <M_DIO_Vid_wrtPinVal+0xf8>
     308:	80 95       	com	r24
     30a:	48 23       	and	r20, r24
     30c:	8b 81       	ldd	r24, Y+3	; 0x03
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	8a 81       	ldd	r24, Y+2	; 0x02
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	b9 01       	movw	r22, r18
     31a:	02 c0       	rjmp	.+4      	; 0x320 <M_DIO_Vid_wrtPinVal+0x118>
     31c:	66 0f       	add	r22, r22
     31e:	77 1f       	adc	r23, r23
     320:	8a 95       	dec	r24
     322:	e2 f7       	brpl	.-8      	; 0x31c <M_DIO_Vid_wrtPinVal+0x114>
     324:	cb 01       	movw	r24, r22
     326:	84 2b       	or	r24, r20
     328:	8c 93       	st	X, r24
     32a:	21 c0       	rjmp	.+66     	; 0x36e <M_DIO_Vid_wrtPinVal+0x166>
		case M_DIO_PORTD: WRT_BIT(PORTD,copy_u8_Pin,copy_u8_pinVal); break;
     32c:	a2 e3       	ldi	r26, 0x32	; 50
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e2 e3       	ldi	r30, 0x32	; 50
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	48 2f       	mov	r20, r24
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <M_DIO_Vid_wrtPinVal+0x140>
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	2a 95       	dec	r18
     34a:	e2 f7       	brpl	.-8      	; 0x344 <M_DIO_Vid_wrtPinVal+0x13c>
     34c:	80 95       	com	r24
     34e:	48 23       	and	r20, r24
     350:	8b 81       	ldd	r24, Y+3	; 0x03
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	8a 81       	ldd	r24, Y+2	; 0x02
     358:	88 2f       	mov	r24, r24
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	b9 01       	movw	r22, r18
     35e:	02 c0       	rjmp	.+4      	; 0x364 <M_DIO_Vid_wrtPinVal+0x15c>
     360:	66 0f       	add	r22, r22
     362:	77 1f       	adc	r23, r23
     364:	8a 95       	dec	r24
     366:	e2 f7       	brpl	.-8      	; 0x360 <M_DIO_Vid_wrtPinVal+0x158>
     368:	cb 01       	movw	r24, r22
     36a:	84 2b       	or	r24, r20
     36c:	8c 93       	st	X, r24
		default:break;
	}
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <M_DIO_u8_READPinVal>:
u8  M_DIO_u8_READPinVal (u8 copy_u8_Port,u8 copy_u8_Pin)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <M_DIO_u8_READPinVal+0x6>
     384:	00 d0       	rcall	.+0      	; 0x386 <M_DIO_u8_READPinVal+0x8>
     386:	0f 92       	push	r0
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	8a 83       	std	Y+2, r24	; 0x02
     38e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8_pinval=0;
     390:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8_Port)
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	28 2f       	mov	r18, r24
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	3d 83       	std	Y+5, r19	; 0x05
     39a:	2c 83       	std	Y+4, r18	; 0x04
     39c:	4c 81       	ldd	r20, Y+4	; 0x04
     39e:	5d 81       	ldd	r21, Y+5	; 0x05
     3a0:	41 30       	cpi	r20, 0x01	; 1
     3a2:	51 05       	cpc	r21, r1
     3a4:	41 f1       	breq	.+80     	; 0x3f6 <M_DIO_u8_READPinVal+0x78>
     3a6:	8c 81       	ldd	r24, Y+4	; 0x04
     3a8:	9d 81       	ldd	r25, Y+5	; 0x05
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	91 05       	cpc	r25, r1
     3ae:	34 f4       	brge	.+12     	; 0x3bc <M_DIO_u8_READPinVal+0x3e>
     3b0:	2c 81       	ldd	r18, Y+4	; 0x04
     3b2:	3d 81       	ldd	r19, Y+5	; 0x05
     3b4:	21 15       	cp	r18, r1
     3b6:	31 05       	cpc	r19, r1
     3b8:	61 f0       	breq	.+24     	; 0x3d2 <M_DIO_u8_READPinVal+0x54>
     3ba:	52 c0       	rjmp	.+164    	; 0x460 <M_DIO_u8_READPinVal+0xe2>
     3bc:	4c 81       	ldd	r20, Y+4	; 0x04
     3be:	5d 81       	ldd	r21, Y+5	; 0x05
     3c0:	42 30       	cpi	r20, 0x02	; 2
     3c2:	51 05       	cpc	r21, r1
     3c4:	51 f1       	breq	.+84     	; 0x41a <M_DIO_u8_READPinVal+0x9c>
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	9d 81       	ldd	r25, Y+5	; 0x05
     3ca:	83 30       	cpi	r24, 0x03	; 3
     3cc:	91 05       	cpc	r25, r1
     3ce:	b9 f1       	breq	.+110    	; 0x43e <M_DIO_u8_READPinVal+0xc0>
     3d0:	47 c0       	rjmp	.+142    	; 0x460 <M_DIO_u8_READPinVal+0xe2>
	{
		case M_DIO_PORTA: local_u8_pinval = GIT_BIT(PINA,copy_u8_Pin); break;
     3d2:	e9 e3       	ldi	r30, 0x39	; 57
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	a9 01       	movw	r20, r18
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <M_DIO_u8_READPinVal+0x6c>
     3e6:	55 95       	asr	r21
     3e8:	47 95       	ror	r20
     3ea:	8a 95       	dec	r24
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <M_DIO_u8_READPinVal+0x68>
     3ee:	ca 01       	movw	r24, r20
     3f0:	81 70       	andi	r24, 0x01	; 1
     3f2:	89 83       	std	Y+1, r24	; 0x01
     3f4:	35 c0       	rjmp	.+106    	; 0x460 <M_DIO_u8_READPinVal+0xe2>
		case M_DIO_PORTB: local_u8_pinval = GIT_BIT(PINB,copy_u8_Pin); break;
     3f6:	e6 e3       	ldi	r30, 0x36	; 54
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	28 2f       	mov	r18, r24
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	8b 81       	ldd	r24, Y+3	; 0x03
     402:	88 2f       	mov	r24, r24
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	a9 01       	movw	r20, r18
     408:	02 c0       	rjmp	.+4      	; 0x40e <M_DIO_u8_READPinVal+0x90>
     40a:	55 95       	asr	r21
     40c:	47 95       	ror	r20
     40e:	8a 95       	dec	r24
     410:	e2 f7       	brpl	.-8      	; 0x40a <M_DIO_u8_READPinVal+0x8c>
     412:	ca 01       	movw	r24, r20
     414:	81 70       	andi	r24, 0x01	; 1
     416:	89 83       	std	Y+1, r24	; 0x01
     418:	23 c0       	rjmp	.+70     	; 0x460 <M_DIO_u8_READPinVal+0xe2>
		case M_DIO_PORTC: local_u8_pinval = GIT_BIT(PINC,copy_u8_Pin); break;
     41a:	e3 e3       	ldi	r30, 0x33	; 51
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	28 2f       	mov	r18, r24
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	02 c0       	rjmp	.+4      	; 0x432 <M_DIO_u8_READPinVal+0xb4>
     42e:	55 95       	asr	r21
     430:	47 95       	ror	r20
     432:	8a 95       	dec	r24
     434:	e2 f7       	brpl	.-8      	; 0x42e <M_DIO_u8_READPinVal+0xb0>
     436:	ca 01       	movw	r24, r20
     438:	81 70       	andi	r24, 0x01	; 1
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	11 c0       	rjmp	.+34     	; 0x460 <M_DIO_u8_READPinVal+0xe2>
		case M_DIO_PORTD: local_u8_pinval = GIT_BIT(PIND,copy_u8_Pin); break;
     43e:	e0 e3       	ldi	r30, 0x30	; 48
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	88 2f       	mov	r24, r24
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	a9 01       	movw	r20, r18
     450:	02 c0       	rjmp	.+4      	; 0x456 <M_DIO_u8_READPinVal+0xd8>
     452:	55 95       	asr	r21
     454:	47 95       	ror	r20
     456:	8a 95       	dec	r24
     458:	e2 f7       	brpl	.-8      	; 0x452 <M_DIO_u8_READPinVal+0xd4>
     45a:	ca 01       	movw	r24, r20
     45c:	81 70       	andi	r24, 0x01	; 1
     45e:	89 83       	std	Y+1, r24	; 0x01
		default:break;
	}
	return local_u8_pinval;
     460:	89 81       	ldd	r24, Y+1	; 0x01
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	cf 91       	pop	r28
     46e:	df 91       	pop	r29
     470:	08 95       	ret

00000472 <M_DIO_Vid_WrtPortDir>:
void M_DIO_Vid_WrtPortDir(u8 copy_u8_port,u8 copy_u8_Portdirecrion)
{
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	00 d0       	rcall	.+0      	; 0x478 <M_DIO_Vid_WrtPortDir+0x6>
     478:	00 d0       	rcall	.+0      	; 0x47a <M_DIO_Vid_WrtPortDir+0x8>
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8_port)
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	28 2f       	mov	r18, r24
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	3c 83       	std	Y+4, r19	; 0x04
     48a:	2b 83       	std	Y+3, r18	; 0x03
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	91 05       	cpc	r25, r1
     494:	d1 f0       	breq	.+52     	; 0x4ca <M_DIO_Vid_WrtPortDir+0x58>
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	3c 81       	ldd	r19, Y+4	; 0x04
     49a:	22 30       	cpi	r18, 0x02	; 2
     49c:	31 05       	cpc	r19, r1
     49e:	2c f4       	brge	.+10     	; 0x4aa <M_DIO_Vid_WrtPortDir+0x38>
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	61 f0       	breq	.+24     	; 0x4c0 <M_DIO_Vid_WrtPortDir+0x4e>
     4a8:	1e c0       	rjmp	.+60     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
     4aa:	2b 81       	ldd	r18, Y+3	; 0x03
     4ac:	3c 81       	ldd	r19, Y+4	; 0x04
     4ae:	22 30       	cpi	r18, 0x02	; 2
     4b0:	31 05       	cpc	r19, r1
     4b2:	81 f0       	breq	.+32     	; 0x4d4 <M_DIO_Vid_WrtPortDir+0x62>
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	83 30       	cpi	r24, 0x03	; 3
     4ba:	91 05       	cpc	r25, r1
     4bc:	81 f0       	breq	.+32     	; 0x4de <M_DIO_Vid_WrtPortDir+0x6c>
     4be:	13 c0       	rjmp	.+38     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
	{
		case M_DIO_PORTA: DDRA = copy_u8_Portdirecrion; break;
     4c0:	ea e3       	ldi	r30, 0x3A	; 58
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
     4c6:	80 83       	st	Z, r24
     4c8:	0e c0       	rjmp	.+28     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
		case M_DIO_PORTB: DDRB = copy_u8_Portdirecrion; break;
     4ca:	e7 e3       	ldi	r30, 0x37	; 55
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	80 83       	st	Z, r24
     4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
		case M_DIO_PORTC: DDRC = copy_u8_Portdirecrion; break;
     4d4:	e4 e3       	ldi	r30, 0x34	; 52
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	80 83       	st	Z, r24
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <M_DIO_Vid_WrtPortDir+0x74>
		case M_DIO_PORTD: DDRD = copy_u8_Portdirecrion; break;
     4de:	e1 e3       	ldi	r30, 0x31	; 49
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	80 83       	st	Z, r24
	}
}
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <M_DIO_Vid_WrtPortVal>:
void M_DIO_Vid_WrtPortVal(u8 copy_u8_port,u8 copy_u8_PortVal)
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <M_DIO_Vid_WrtPortVal+0x6>
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <M_DIO_Vid_WrtPortVal+0x8>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8_port)
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	28 2f       	mov	r18, r24
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	3c 83       	std	Y+4, r19	; 0x04
     50c:	2b 83       	std	Y+3, r18	; 0x03
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	91 05       	cpc	r25, r1
     516:	d1 f0       	breq	.+52     	; 0x54c <M_DIO_Vid_WrtPortVal+0x58>
     518:	2b 81       	ldd	r18, Y+3	; 0x03
     51a:	3c 81       	ldd	r19, Y+4	; 0x04
     51c:	22 30       	cpi	r18, 0x02	; 2
     51e:	31 05       	cpc	r19, r1
     520:	2c f4       	brge	.+10     	; 0x52c <M_DIO_Vid_WrtPortVal+0x38>
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	00 97       	sbiw	r24, 0x00	; 0
     528:	61 f0       	breq	.+24     	; 0x542 <M_DIO_Vid_WrtPortVal+0x4e>
     52a:	1e c0       	rjmp	.+60     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
     52c:	2b 81       	ldd	r18, Y+3	; 0x03
     52e:	3c 81       	ldd	r19, Y+4	; 0x04
     530:	22 30       	cpi	r18, 0x02	; 2
     532:	31 05       	cpc	r19, r1
     534:	81 f0       	breq	.+32     	; 0x556 <M_DIO_Vid_WrtPortVal+0x62>
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	9c 81       	ldd	r25, Y+4	; 0x04
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	91 05       	cpc	r25, r1
     53e:	81 f0       	breq	.+32     	; 0x560 <M_DIO_Vid_WrtPortVal+0x6c>
     540:	13 c0       	rjmp	.+38     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
	{
		case M_DIO_PORTA: PORTA = copy_u8_PortVal ; break;
     542:	eb e3       	ldi	r30, 0x3B	; 59
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	80 83       	st	Z, r24
     54a:	0e c0       	rjmp	.+28     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
		case M_DIO_PORTB: PORTB = copy_u8_PortVal ; break;
     54c:	e8 e3       	ldi	r30, 0x38	; 56
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	80 83       	st	Z, r24
     554:	09 c0       	rjmp	.+18     	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
		case M_DIO_PORTC: PORTC = copy_u8_PortVal ; break;
     556:	e5 e3       	ldi	r30, 0x35	; 53
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	80 83       	st	Z, r24
     55e:	04 c0       	rjmp	.+8      	; 0x568 <M_DIO_Vid_WrtPortVal+0x74>
		case M_DIO_PORTD: PORTD = copy_u8_PortVal ; break;
     560:	e2 e3       	ldi	r30, 0x32	; 50
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	80 83       	st	Z, r24
	}
}
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <M_DIO_u8_ReadPortVal>:
u8 M_DIO_u8_ReadPortVal(u8 copy_u8_Port)
{
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	00 d0       	rcall	.+0      	; 0x57c <M_DIO_u8_ReadPortVal+0x6>
     57c:	00 d0       	rcall	.+0      	; 0x57e <M_DIO_u8_ReadPortVal+0x8>
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8_portVal=0;
     584:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8_Port)
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	3c 83       	std	Y+4, r19	; 0x04
     58e:	2b 83       	std	Y+3, r18	; 0x03
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	9c 81       	ldd	r25, Y+4	; 0x04
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	91 05       	cpc	r25, r1
     598:	d1 f0       	breq	.+52     	; 0x5ce <M_DIO_u8_ReadPortVal+0x58>
     59a:	2b 81       	ldd	r18, Y+3	; 0x03
     59c:	3c 81       	ldd	r19, Y+4	; 0x04
     59e:	22 30       	cpi	r18, 0x02	; 2
     5a0:	31 05       	cpc	r19, r1
     5a2:	2c f4       	brge	.+10     	; 0x5ae <M_DIO_u8_ReadPortVal+0x38>
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	00 97       	sbiw	r24, 0x00	; 0
     5aa:	61 f0       	breq	.+24     	; 0x5c4 <M_DIO_u8_ReadPortVal+0x4e>
     5ac:	1e c0       	rjmp	.+60     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
     5ae:	2b 81       	ldd	r18, Y+3	; 0x03
     5b0:	3c 81       	ldd	r19, Y+4	; 0x04
     5b2:	22 30       	cpi	r18, 0x02	; 2
     5b4:	31 05       	cpc	r19, r1
     5b6:	81 f0       	breq	.+32     	; 0x5d8 <M_DIO_u8_ReadPortVal+0x62>
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	91 05       	cpc	r25, r1
     5c0:	81 f0       	breq	.+32     	; 0x5e2 <M_DIO_u8_ReadPortVal+0x6c>
     5c2:	13 c0       	rjmp	.+38     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
	{
		case M_DIO_PORTA: local_u8_portVal = PINA ; break;
     5c4:	e9 e3       	ldi	r30, 0x39	; 57
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	0e c0       	rjmp	.+28     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
		case M_DIO_PORTB: local_u8_portVal = PINB ; break;
     5ce:	e6 e3       	ldi	r30, 0x36	; 54
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
		case M_DIO_PORTC: local_u8_portVal = PINC ; break;
     5d8:	e3 e3       	ldi	r30, 0x33	; 51
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <M_DIO_u8_ReadPortVal+0x74>
		case M_DIO_PORTD: local_u8_portVal = PIND ; break;
     5e2:	e0 e3       	ldi	r30, 0x30	; 48
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8_portVal;
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	cf 91       	pop	r28
     5f6:	df 91       	pop	r29
     5f8:	08 95       	ret

000005fa <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	27 97       	sbiw	r28, 0x07	; 7
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	9d 83       	std	Y+5, r25	; 0x05
     610:	8c 83       	std	Y+4, r24	; 0x04
     612:	6e 83       	std	Y+6, r22	; 0x06
     614:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     616:	8a e1       	ldi	r24, 0x1A	; 26
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
     61e:	9a 83       	std	Y+2, r25	; 0x02
     620:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	09 f4       	brne	.+2      	; 0x62c <xCoRoutineCreate+0x32>
     62a:	6f c0       	rjmp	.+222    	; 0x70a <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     62c:	80 91 68 00 	lds	r24, 0x0068
     630:	90 91 69 00 	lds	r25, 0x0069
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	41 f4       	brne	.+16     	; 0x648 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	9a 81       	ldd	r25, Y+2	; 0x02
     63c:	90 93 69 00 	sts	0x0069, r25
     640:	80 93 68 00 	sts	0x0068, r24
			prvInitialiseCoRoutineLists();
     644:	0e 94 64 05 	call	0xac8	; 0xac8 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     648:	8e 81       	ldd	r24, Y+6	; 0x06
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	10 f0       	brcs	.+4      	; 0x652 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     652:	e9 81       	ldd	r30, Y+1	; 0x01
     654:	fa 81       	ldd	r31, Y+2	; 0x02
     656:	11 8e       	std	Z+25, r1	; 0x19
     658:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     65a:	e9 81       	ldd	r30, Y+1	; 0x01
     65c:	fa 81       	ldd	r31, Y+2	; 0x02
     65e:	8e 81       	ldd	r24, Y+6	; 0x06
     660:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     662:	e9 81       	ldd	r30, Y+1	; 0x01
     664:	fa 81       	ldd	r31, Y+2	; 0x02
     666:	8f 81       	ldd	r24, Y+7	; 0x07
     668:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     66a:	e9 81       	ldd	r30, Y+1	; 0x01
     66c:	fa 81       	ldd	r31, Y+2	; 0x02
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	9d 81       	ldd	r25, Y+5	; 0x05
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	02 96       	adiw	r24, 0x02	; 2
     67c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	0c 96       	adiw	r24, 0x0c	; 12
     686:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     68a:	e9 81       	ldd	r30, Y+1	; 0x01
     68c:	fa 81       	ldd	r31, Y+2	; 0x02
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	9a 81       	ldd	r25, Y+2	; 0x02
     692:	91 87       	std	Z+9, r25	; 0x09
     694:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     696:	e9 81       	ldd	r30, Y+1	; 0x01
     698:	fa 81       	ldd	r31, Y+2	; 0x02
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	93 8b       	std	Z+19, r25	; 0x13
     6a0:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     6a2:	8e 81       	ldd	r24, Y+6	; 0x06
     6a4:	28 2f       	mov	r18, r24
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	85 e0       	ldi	r24, 0x05	; 5
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	82 1b       	sub	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	e9 81       	ldd	r30, Y+1	; 0x01
     6b2:	fa 81       	ldd	r31, Y+2	; 0x02
     6b4:	95 87       	std	Z+13, r25	; 0x0d
     6b6:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     6b8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ba:	fa 81       	ldd	r31, Y+2	; 0x02
     6bc:	96 89       	ldd	r25, Z+22	; 0x16
     6be:	80 91 6a 00 	lds	r24, 0x006A
     6c2:	89 17       	cp	r24, r25
     6c4:	28 f4       	brcc	.+10     	; 0x6d0 <xCoRoutineCreate+0xd6>
     6c6:	e9 81       	ldd	r30, Y+1	; 0x01
     6c8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ca:	86 89       	ldd	r24, Z+22	; 0x16
     6cc:	80 93 6a 00 	sts	0x006A, r24
     6d0:	e9 81       	ldd	r30, Y+1	; 0x01
     6d2:	fa 81       	ldd	r31, Y+2	; 0x02
     6d4:	86 89       	ldd	r24, Z+22	; 0x16
     6d6:	28 2f       	mov	r18, r24
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	c9 01       	movw	r24, r18
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	82 0f       	add	r24, r18
     6ea:	93 1f       	adc	r25, r19
     6ec:	ac 01       	movw	r20, r24
     6ee:	4f 58       	subi	r20, 0x8F	; 143
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	9c 01       	movw	r18, r24
     6f8:	2e 5f       	subi	r18, 0xFE	; 254
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	ca 01       	movw	r24, r20
     6fe:	b9 01       	movw	r22, r18
     700:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

		xReturn = pdPASS;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	02 c0       	rjmp	.+4      	; 0x70e <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     710:	27 96       	adiw	r28, 0x07	; 7
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	cf 91       	pop	r28
     71e:	df 91       	pop	r29
     720:	08 95       	ret

00000722 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     722:	df 93       	push	r29
     724:	cf 93       	push	r28
     726:	00 d0       	rcall	.+0      	; 0x728 <vCoRoutineAddToDelayedList+0x6>
     728:	00 d0       	rcall	.+0      	; 0x72a <vCoRoutineAddToDelayedList+0x8>
     72a:	00 d0       	rcall	.+0      	; 0x72c <vCoRoutineAddToDelayedList+0xa>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9c 83       	std	Y+4, r25	; 0x04
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	7e 83       	std	Y+6, r23	; 0x06
     736:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     738:	20 91 6b 00 	lds	r18, 0x006B
     73c:	30 91 6c 00 	lds	r19, 0x006C
     740:	8b 81       	ldd	r24, Y+3	; 0x03
     742:	9c 81       	ldd	r25, Y+4	; 0x04
     744:	82 0f       	add	r24, r18
     746:	93 1f       	adc	r25, r19
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     74c:	80 91 68 00 	lds	r24, 0x0068
     750:	90 91 69 00 	lds	r25, 0x0069
     754:	02 96       	adiw	r24, 0x02	; 2
     756:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     75a:	e0 91 68 00 	lds	r30, 0x0068
     75e:	f0 91 69 00 	lds	r31, 0x0069
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	93 83       	std	Z+3, r25	; 0x03
     768:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     76a:	20 91 6b 00 	lds	r18, 0x006B
     76e:	30 91 6c 00 	lds	r19, 0x006C
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	70 f4       	brcc	.+28     	; 0x798 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     77c:	80 91 97 00 	lds	r24, 0x0097
     780:	90 91 98 00 	lds	r25, 0x0098
     784:	20 91 68 00 	lds	r18, 0x0068
     788:	30 91 69 00 	lds	r19, 0x0069
     78c:	2e 5f       	subi	r18, 0xFE	; 254
     78e:	3f 4f       	sbci	r19, 0xFF	; 255
     790:	b9 01       	movw	r22, r18
     792:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
     796:	0d c0       	rjmp	.+26     	; 0x7b2 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     798:	80 91 95 00 	lds	r24, 0x0095
     79c:	90 91 96 00 	lds	r25, 0x0096
     7a0:	20 91 68 00 	lds	r18, 0x0068
     7a4:	30 91 69 00 	lds	r19, 0x0069
     7a8:	2e 5f       	subi	r18, 0xFE	; 254
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	b9 01       	movw	r22, r18
     7ae:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
	}

	if( pxEventList )
     7b2:	8d 81       	ldd	r24, Y+5	; 0x05
     7b4:	9e 81       	ldd	r25, Y+6	; 0x06
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	61 f0       	breq	.+24     	; 0x7d2 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     7ba:	80 91 68 00 	lds	r24, 0x0068
     7be:	90 91 69 00 	lds	r25, 0x0069
     7c2:	9c 01       	movw	r18, r24
     7c4:	24 5f       	subi	r18, 0xF4	; 244
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	9e 81       	ldd	r25, Y+6	; 0x06
     7cc:	b9 01       	movw	r22, r18
     7ce:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
	}
}
     7d2:	26 96       	adiw	r28, 0x06	; 6
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <prvCheckPendingReadyList+0x6>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	3a c0       	rjmp	.+116    	; 0x864 <__stack+0x5>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     7f0:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     7f2:	e0 91 9e 00 	lds	r30, 0x009E
     7f6:	f0 91 9f 00 	lds	r31, 0x009F
     7fa:	86 81       	ldd	r24, Z+6	; 0x06
     7fc:	97 81       	ldd	r25, Z+7	; 0x07
     7fe:	9a 83       	std	Y+2, r25	; 0x02
     800:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	0c 96       	adiw	r24, 0x0c	; 12
     808:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     80c:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	02 96       	adiw	r24, 0x02	; 2
     814:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     818:	e9 81       	ldd	r30, Y+1	; 0x01
     81a:	fa 81       	ldd	r31, Y+2	; 0x02
     81c:	96 89       	ldd	r25, Z+22	; 0x16
     81e:	80 91 6a 00 	lds	r24, 0x006A
     822:	89 17       	cp	r24, r25
     824:	28 f4       	brcc	.+10     	; 0x830 <prvCheckPendingReadyList+0x4c>
     826:	e9 81       	ldd	r30, Y+1	; 0x01
     828:	fa 81       	ldd	r31, Y+2	; 0x02
     82a:	86 89       	ldd	r24, Z+22	; 0x16
     82c:	80 93 6a 00 	sts	0x006A, r24
     830:	e9 81       	ldd	r30, Y+1	; 0x01
     832:	fa 81       	ldd	r31, Y+2	; 0x02
     834:	86 89       	ldd	r24, Z+22	; 0x16
     836:	28 2f       	mov	r18, r24
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	c9 01       	movw	r24, r18
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	ac 01       	movw	r20, r24
     84e:	4f 58       	subi	r20, 0x8F	; 143
     850:	5f 4f       	sbci	r21, 0xFF	; 255
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	9c 01       	movw	r18, r24
     858:	2e 5f       	subi	r18, 0xFE	; 254
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	ca 01       	movw	r24, r20
     85e:	b9 01       	movw	r22, r18
     860:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     864:	80 91 99 00 	lds	r24, 0x0099
     868:	88 23       	and	r24, r24
     86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
     86c:	c1 cf       	rjmp	.-126    	; 0x7f0 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	cf 91       	pop	r28
     874:	df 91       	pop	r29
     876:	08 95       	ret

00000878 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	00 d0       	rcall	.+0      	; 0x87e <prvCheckDelayedList+0x6>
     87e:	00 d0       	rcall	.+0      	; 0x880 <prvCheckDelayedList+0x8>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     884:	0e 94 57 12 	call	0x24ae	; 0x24ae <xTaskGetTickCount>
     888:	20 91 6d 00 	lds	r18, 0x006D
     88c:	30 91 6e 00 	lds	r19, 0x006E
     890:	82 1b       	sub	r24, r18
     892:	93 0b       	sbc	r25, r19
     894:	90 93 70 00 	sts	0x0070, r25
     898:	80 93 6f 00 	sts	0x006F, r24
     89c:	85 c0       	rjmp	.+266    	; 0x9a8 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     89e:	80 91 6b 00 	lds	r24, 0x006B
     8a2:	90 91 6c 00 	lds	r25, 0x006C
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	90 93 6c 00 	sts	0x006C, r25
     8ac:	80 93 6b 00 	sts	0x006B, r24
		xPassedTicks--;
     8b0:	80 91 6f 00 	lds	r24, 0x006F
     8b4:	90 91 70 00 	lds	r25, 0x0070
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	90 93 70 00 	sts	0x0070, r25
     8be:	80 93 6f 00 	sts	0x006F, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     8c2:	80 91 6b 00 	lds	r24, 0x006B
     8c6:	90 91 6c 00 	lds	r25, 0x006C
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <prvCheckDelayedList+0x58>
     8ce:	64 c0       	rjmp	.+200    	; 0x998 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     8d0:	80 91 95 00 	lds	r24, 0x0095
     8d4:	90 91 96 00 	lds	r25, 0x0096
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     8dc:	80 91 97 00 	lds	r24, 0x0097
     8e0:	90 91 98 00 	lds	r25, 0x0098
     8e4:	90 93 96 00 	sts	0x0096, r25
     8e8:	80 93 95 00 	sts	0x0095, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	90 93 98 00 	sts	0x0098, r25
     8f4:	80 93 97 00 	sts	0x0097, r24
     8f8:	4f c0       	rjmp	.+158    	; 0x998 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     8fa:	e0 91 95 00 	lds	r30, 0x0095
     8fe:	f0 91 96 00 	lds	r31, 0x0096
     902:	05 80       	ldd	r0, Z+5	; 0x05
     904:	f6 81       	ldd	r31, Z+6	; 0x06
     906:	e0 2d       	mov	r30, r0
     908:	86 81       	ldd	r24, Z+6	; 0x06
     90a:	97 81       	ldd	r25, Z+7	; 0x07
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     910:	eb 81       	ldd	r30, Y+3	; 0x03
     912:	fc 81       	ldd	r31, Y+4	; 0x04
     914:	22 81       	ldd	r18, Z+2	; 0x02
     916:	33 81       	ldd	r19, Z+3	; 0x03
     918:	80 91 6b 00 	lds	r24, 0x006B
     91c:	90 91 6c 00 	lds	r25, 0x006C
     920:	82 17       	cp	r24, r18
     922:	93 07       	cpc	r25, r19
     924:	08 f4       	brcc	.+2      	; 0x928 <prvCheckDelayedList+0xb0>
     926:	40 c0       	rjmp	.+128    	; 0x9a8 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     928:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	9c 81       	ldd	r25, Y+4	; 0x04
     92e:	02 96       	adiw	r24, 0x02	; 2
     930:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     934:	eb 81       	ldd	r30, Y+3	; 0x03
     936:	fc 81       	ldd	r31, Y+4	; 0x04
     938:	84 89       	ldd	r24, Z+20	; 0x14
     93a:	95 89       	ldd	r25, Z+21	; 0x15
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	29 f0       	breq	.+10     	; 0x94a <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	9c 81       	ldd	r25, Y+4	; 0x04
     944:	0c 96       	adiw	r24, 0x0c	; 12
     946:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     94a:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     94c:	eb 81       	ldd	r30, Y+3	; 0x03
     94e:	fc 81       	ldd	r31, Y+4	; 0x04
     950:	96 89       	ldd	r25, Z+22	; 0x16
     952:	80 91 6a 00 	lds	r24, 0x006A
     956:	89 17       	cp	r24, r25
     958:	28 f4       	brcc	.+10     	; 0x964 <prvCheckDelayedList+0xec>
     95a:	eb 81       	ldd	r30, Y+3	; 0x03
     95c:	fc 81       	ldd	r31, Y+4	; 0x04
     95e:	86 89       	ldd	r24, Z+22	; 0x16
     960:	80 93 6a 00 	sts	0x006A, r24
     964:	eb 81       	ldd	r30, Y+3	; 0x03
     966:	fc 81       	ldd	r31, Y+4	; 0x04
     968:	86 89       	ldd	r24, Z+22	; 0x16
     96a:	28 2f       	mov	r18, r24
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	c9 01       	movw	r24, r18
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	ac 01       	movw	r20, r24
     982:	4f 58       	subi	r20, 0x8F	; 143
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	9c 81       	ldd	r25, Y+4	; 0x04
     98a:	9c 01       	movw	r18, r24
     98c:	2e 5f       	subi	r18, 0xFE	; 254
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	ca 01       	movw	r24, r20
     992:	b9 01       	movw	r22, r18
     994:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     998:	e0 91 95 00 	lds	r30, 0x0095
     99c:	f0 91 96 00 	lds	r31, 0x0096
     9a0:	80 81       	ld	r24, Z
     9a2:	88 23       	and	r24, r24
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <prvCheckDelayedList+0x130>
     9a6:	a9 cf       	rjmp	.-174    	; 0x8fa <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     9a8:	80 91 6f 00 	lds	r24, 0x006F
     9ac:	90 91 70 00 	lds	r25, 0x0070
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <prvCheckDelayedList+0x13e>
     9b4:	74 cf       	rjmp	.-280    	; 0x89e <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     9b6:	80 91 6b 00 	lds	r24, 0x006B
     9ba:	90 91 6c 00 	lds	r25, 0x006C
     9be:	90 93 6e 00 	sts	0x006E, r25
     9c2:	80 93 6d 00 	sts	0x006D, r24
}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	08 95       	ret

000009d4 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	00 d0       	rcall	.+0      	; 0x9da <vCoRoutineSchedule+0x6>
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     9de:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     9e2:	0e 94 3c 04 	call	0x878	; 0x878 <prvCheckDelayedList>
     9e6:	0a c0       	rjmp	.+20     	; 0x9fc <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     9e8:	80 91 6a 00 	lds	r24, 0x006A
     9ec:	88 23       	and	r24, r24
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <vCoRoutineSchedule+0x1e>
     9f0:	66 c0       	rjmp	.+204    	; 0xabe <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     9f2:	80 91 6a 00 	lds	r24, 0x006A
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	80 93 6a 00 	sts	0x006A, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     9fc:	80 91 6a 00 	lds	r24, 0x006A
     a00:	28 2f       	mov	r18, r24
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	c9 01       	movw	r24, r18
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	fc 01       	movw	r30, r24
     a18:	ef 58       	subi	r30, 0x8F	; 143
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	80 81       	ld	r24, Z
     a1e:	88 23       	and	r24, r24
     a20:	19 f3       	breq	.-58     	; 0x9e8 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     a22:	80 91 6a 00 	lds	r24, 0x006A
     a26:	28 2f       	mov	r18, r24
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	c9 01       	movw	r24, r18
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	82 0f       	add	r24, r18
     a3a:	93 1f       	adc	r25, r19
     a3c:	8f 58       	subi	r24, 0x8F	; 143
     a3e:	9f 4f       	sbci	r25, 0xFF	; 255
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	e9 81       	ldd	r30, Y+1	; 0x01
     a46:	fa 81       	ldd	r31, Y+2	; 0x02
     a48:	01 80       	ldd	r0, Z+1	; 0x01
     a4a:	f2 81       	ldd	r31, Z+2	; 0x02
     a4c:	e0 2d       	mov	r30, r0
     a4e:	82 81       	ldd	r24, Z+2	; 0x02
     a50:	93 81       	ldd	r25, Z+3	; 0x03
     a52:	e9 81       	ldd	r30, Y+1	; 0x01
     a54:	fa 81       	ldd	r31, Y+2	; 0x02
     a56:	92 83       	std	Z+2, r25	; 0x02
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	e9 81       	ldd	r30, Y+1	; 0x01
     a5c:	fa 81       	ldd	r31, Y+2	; 0x02
     a5e:	21 81       	ldd	r18, Z+1	; 0x01
     a60:	32 81       	ldd	r19, Z+2	; 0x02
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	03 96       	adiw	r24, 0x03	; 3
     a68:	28 17       	cp	r18, r24
     a6a:	39 07       	cpc	r19, r25
     a6c:	59 f4       	brne	.+22     	; 0xa84 <vCoRoutineSchedule+0xb0>
     a6e:	e9 81       	ldd	r30, Y+1	; 0x01
     a70:	fa 81       	ldd	r31, Y+2	; 0x02
     a72:	01 80       	ldd	r0, Z+1	; 0x01
     a74:	f2 81       	ldd	r31, Z+2	; 0x02
     a76:	e0 2d       	mov	r30, r0
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	e9 81       	ldd	r30, Y+1	; 0x01
     a7e:	fa 81       	ldd	r31, Y+2	; 0x02
     a80:	92 83       	std	Z+2, r25	; 0x02
     a82:	81 83       	std	Z+1, r24	; 0x01
     a84:	e9 81       	ldd	r30, Y+1	; 0x01
     a86:	fa 81       	ldd	r31, Y+2	; 0x02
     a88:	01 80       	ldd	r0, Z+1	; 0x01
     a8a:	f2 81       	ldd	r31, Z+2	; 0x02
     a8c:	e0 2d       	mov	r30, r0
     a8e:	86 81       	ldd	r24, Z+6	; 0x06
     a90:	97 81       	ldd	r25, Z+7	; 0x07
     a92:	90 93 69 00 	sts	0x0069, r25
     a96:	80 93 68 00 	sts	0x0068, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     a9a:	e0 91 68 00 	lds	r30, 0x0068
     a9e:	f0 91 69 00 	lds	r31, 0x0069
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	80 91 68 00 	lds	r24, 0x0068
     aaa:	90 91 69 00 	lds	r25, 0x0069
     aae:	e0 91 68 00 	lds	r30, 0x0068
     ab2:	f0 91 69 00 	lds	r31, 0x0069
     ab6:	27 89       	ldd	r18, Z+23	; 0x17
     ab8:	62 2f       	mov	r22, r18
     aba:	fa 01       	movw	r30, r20
     abc:	09 95       	icall

	return;
}
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	cf 91       	pop	r28
     ac4:	df 91       	pop	r29
     ac6:	08 95       	ret

00000ac8 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	0f 92       	push	r0
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     ad2:	19 82       	std	Y+1, r1	; 0x01
     ad4:	13 c0       	rjmp	.+38     	; 0xafc <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	28 2f       	mov	r18, r24
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	c9 01       	movw	r24, r18
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	8f 58       	subi	r24, 0x8F	; 143
     af0:	9f 4f       	sbci	r25, 0xFF	; 255
     af2:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	50 f3       	brcs	.-44     	; 0xad6 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     b02:	83 e8       	ldi	r24, 0x83	; 131
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     b0a:	8c e8       	ldi	r24, 0x8C	; 140
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     b12:	89 e9       	ldi	r24, 0x99	; 153
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     b1a:	83 e8       	ldi	r24, 0x83	; 131
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 96 00 	sts	0x0096, r25
     b22:	80 93 95 00 	sts	0x0095, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     b26:	8c e8       	ldi	r24, 0x8C	; 140
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 98 00 	sts	0x0098, r25
     b2e:	80 93 97 00 	sts	0x0097, r24
}
     b32:	0f 90       	pop	r0
     b34:	cf 91       	pop	r28
     b36:	df 91       	pop	r29
     b38:	08 95       	ret

00000b3a <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <xCoRoutineRemoveFromEventList+0x6>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <xCoRoutineRemoveFromEventList+0x8>
     b42:	0f 92       	push	r0
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	9d 83       	std	Y+5, r25	; 0x05
     b4a:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     b4c:	ec 81       	ldd	r30, Y+4	; 0x04
     b4e:	fd 81       	ldd	r31, Y+5	; 0x05
     b50:	05 80       	ldd	r0, Z+5	; 0x05
     b52:	f6 81       	ldd	r31, Z+6	; 0x06
     b54:	e0 2d       	mov	r30, r0
     b56:	86 81       	ldd	r24, Z+6	; 0x06
     b58:	97 81       	ldd	r25, Z+7	; 0x07
     b5a:	9b 83       	std	Y+3, r25	; 0x03
     b5c:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	0c 96       	adiw	r24, 0x0c	; 12
     b64:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	9b 81       	ldd	r25, Y+3	; 0x03
     b6c:	9c 01       	movw	r18, r24
     b6e:	24 5f       	subi	r18, 0xF4	; 244
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	89 e9       	ldi	r24, 0x99	; 153
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	b9 01       	movw	r22, r18
     b78:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     b7c:	ea 81       	ldd	r30, Y+2	; 0x02
     b7e:	fb 81       	ldd	r31, Y+3	; 0x03
     b80:	96 89       	ldd	r25, Z+22	; 0x16
     b82:	e0 91 68 00 	lds	r30, 0x0068
     b86:	f0 91 69 00 	lds	r31, 0x0069
     b8a:	86 89       	ldd	r24, Z+22	; 0x16
     b8c:	98 17       	cp	r25, r24
     b8e:	18 f0       	brcs	.+6      	; 0xb96 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     b96:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     b98:	89 81       	ldd	r24, Y+1	; 0x01
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <pvPortMalloc+0x6>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <pvPortMalloc+0x8>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	9c 83       	std	Y+4, r25	; 0x04
     bb8:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     bba:	1a 82       	std	Y+2, r1	; 0x02
     bbc:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     bbe:	0e 94 c1 11 	call	0x2382	; 0x2382 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     bc2:	80 91 a2 00 	lds	r24, 0x00A2
     bc6:	90 91 a3 00 	lds	r25, 0x00A3
     bca:	2b 81       	ldd	r18, Y+3	; 0x03
     bcc:	3c 81       	ldd	r19, Y+4	; 0x04
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	22 e0       	ldi	r18, 0x02	; 2
     bd4:	88 35       	cpi	r24, 0x58	; 88
     bd6:	92 07       	cpc	r25, r18
     bd8:	18 f5       	brcc	.+70     	; 0xc20 <pvPortMalloc+0x76>
     bda:	20 91 a2 00 	lds	r18, 0x00A2
     bde:	30 91 a3 00 	lds	r19, 0x00A3
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	28 0f       	add	r18, r24
     be8:	39 1f       	adc	r19, r25
     bea:	80 91 a2 00 	lds	r24, 0x00A2
     bee:	90 91 a3 00 	lds	r25, 0x00A3
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a0 f4       	brcc	.+40     	; 0xc20 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     bf8:	80 91 a2 00 	lds	r24, 0x00A2
     bfc:	90 91 a3 00 	lds	r25, 0x00A3
     c00:	8c 55       	subi	r24, 0x5C	; 92
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     c08:	20 91 a2 00 	lds	r18, 0x00A2
     c0c:	30 91 a3 00 	lds	r19, 0x00A3
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	90 93 a3 00 	sts	0x00A3, r25
     c1c:	80 93 a2 00 	sts	0x00A2, r24
		}	
	}
	xTaskResumeAll();
     c20:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <vPortFree+0x6>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     c56:	10 92 a3 00 	sts	0x00A3, r1
     c5a:	10 92 a2 00 	sts	0x00A2, r1
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     c6c:	20 91 a2 00 	lds	r18, 0x00A2
     c70:	30 91 a3 00 	lds	r19, 0x00A3
     c74:	88 e5       	ldi	r24, 0x58	; 88
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	82 1b       	sub	r24, r18
     c7a:	93 0b       	sbc	r25, r19
}
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <vListInitialise+0x6>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	03 96       	adiw	r24, 0x03	; 3
     c96:	e9 81       	ldd	r30, Y+1	; 0x01
     c98:	fa 81       	ldd	r31, Y+2	; 0x02
     c9a:	92 83       	std	Z+2, r25	; 0x02
     c9c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ca0:	fa 81       	ldd	r31, Y+2	; 0x02
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	9f ef       	ldi	r25, 0xFF	; 255
     ca6:	94 83       	std	Z+4, r25	; 0x04
     ca8:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	03 96       	adiw	r24, 0x03	; 3
     cb0:	e9 81       	ldd	r30, Y+1	; 0x01
     cb2:	fa 81       	ldd	r31, Y+2	; 0x02
     cb4:	96 83       	std	Z+6, r25	; 0x06
     cb6:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	9a 81       	ldd	r25, Y+2	; 0x02
     cbc:	03 96       	adiw	r24, 0x03	; 3
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	90 87       	std	Z+8, r25	; 0x08
     cc4:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     cc6:	e9 81       	ldd	r30, Y+1	; 0x01
     cc8:	fa 81       	ldd	r31, Y+2	; 0x02
     cca:	10 82       	st	Z, r1
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <vListInitialiseItem+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     ce4:	e9 81       	ldd	r30, Y+1	; 0x01
     ce6:	fa 81       	ldd	r31, Y+2	; 0x02
     ce8:	11 86       	std	Z+9, r1	; 0x09
     cea:	10 86       	std	Z+8, r1	; 0x08
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <vListInsertEnd+0x6>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <vListInsertEnd+0x8>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <vListInsertEnd+0xa>
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	7e 83       	std	Y+6, r23	; 0x06
     d0a:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     d0c:	eb 81       	ldd	r30, Y+3	; 0x03
     d0e:	fc 81       	ldd	r31, Y+4	; 0x04
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	92 81       	ldd	r25, Z+2	; 0x02
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     d18:	e9 81       	ldd	r30, Y+1	; 0x01
     d1a:	fa 81       	ldd	r31, Y+2	; 0x02
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	ed 81       	ldd	r30, Y+5	; 0x05
     d22:	fe 81       	ldd	r31, Y+6	; 0x06
     d24:	93 83       	std	Z+3, r25	; 0x03
     d26:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     d28:	eb 81       	ldd	r30, Y+3	; 0x03
     d2a:	fc 81       	ldd	r31, Y+4	; 0x04
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	92 81       	ldd	r25, Z+2	; 0x02
     d30:	ed 81       	ldd	r30, Y+5	; 0x05
     d32:	fe 81       	ldd	r31, Y+6	; 0x06
     d34:	95 83       	std	Z+5, r25	; 0x05
     d36:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     d38:	e9 81       	ldd	r30, Y+1	; 0x01
     d3a:	fa 81       	ldd	r31, Y+2	; 0x02
     d3c:	02 80       	ldd	r0, Z+2	; 0x02
     d3e:	f3 81       	ldd	r31, Z+3	; 0x03
     d40:	e0 2d       	mov	r30, r0
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	95 83       	std	Z+5, r25	; 0x05
     d48:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	93 83       	std	Z+3, r25	; 0x03
     d54:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	eb 81       	ldd	r30, Y+3	; 0x03
     d5c:	fc 81       	ldd	r31, Y+4	; 0x04
     d5e:	92 83       	std	Z+2, r25	; 0x02
     d60:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d62:	ed 81       	ldd	r30, Y+5	; 0x05
     d64:	fe 81       	ldd	r31, Y+6	; 0x06
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	91 87       	std	Z+9, r25	; 0x09
     d6c:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	80 81       	ld	r24, Z
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	eb 81       	ldd	r30, Y+3	; 0x03
     d78:	fc 81       	ldd	r31, Y+4	; 0x04
     d7a:	80 83       	st	Z, r24
}
     d7c:	26 96       	adiw	r28, 0x06	; 6
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	28 97       	sbiw	r28, 0x08	; 8
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
     da6:	78 87       	std	Y+8, r23	; 0x08
     da8:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     daa:	ef 81       	ldd	r30, Y+7	; 0x07
     dac:	f8 85       	ldd	r31, Y+8	; 0x08
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	8f 3f       	cpi	r24, 0xFF	; 255
     dbe:	92 07       	cpc	r25, r18
     dc0:	39 f4       	brne	.+14     	; 0xdd0 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     dc2:	ed 81       	ldd	r30, Y+5	; 0x05
     dc4:	fe 81       	ldd	r31, Y+6	; 0x06
     dc6:	87 81       	ldd	r24, Z+7	; 0x07
     dc8:	90 85       	ldd	r25, Z+8	; 0x08
     dca:	9c 83       	std	Y+4, r25	; 0x04
     dcc:	8b 83       	std	Y+3, r24	; 0x03
     dce:	18 c0       	rjmp	.+48     	; 0xe00 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	03 96       	adiw	r24, 0x03	; 3
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	06 c0       	rjmp	.+12     	; 0xde8 <vListInsert+0x5a>
     ddc:	eb 81       	ldd	r30, Y+3	; 0x03
     dde:	fc 81       	ldd	r31, Y+4	; 0x04
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	02 80       	ldd	r0, Z+2	; 0x02
     dee:	f3 81       	ldd	r31, Z+3	; 0x03
     df0:	e0 2d       	mov	r30, r0
     df2:	20 81       	ld	r18, Z
     df4:	31 81       	ldd	r19, Z+1	; 0x01
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	70 f7       	brcc	.-36     	; 0xddc <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     e00:	eb 81       	ldd	r30, Y+3	; 0x03
     e02:	fc 81       	ldd	r31, Y+4	; 0x04
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	ef 81       	ldd	r30, Y+7	; 0x07
     e0a:	f8 85       	ldd	r31, Y+8	; 0x08
     e0c:	93 83       	std	Z+3, r25	; 0x03
     e0e:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     e10:	ef 81       	ldd	r30, Y+7	; 0x07
     e12:	f8 85       	ldd	r31, Y+8	; 0x08
     e14:	02 80       	ldd	r0, Z+2	; 0x02
     e16:	f3 81       	ldd	r31, Z+3	; 0x03
     e18:	e0 2d       	mov	r30, r0
     e1a:	8f 81       	ldd	r24, Y+7	; 0x07
     e1c:	98 85       	ldd	r25, Y+8	; 0x08
     e1e:	95 83       	std	Z+5, r25	; 0x05
     e20:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     e22:	ef 81       	ldd	r30, Y+7	; 0x07
     e24:	f8 85       	ldd	r31, Y+8	; 0x08
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	95 83       	std	Z+5, r25	; 0x05
     e2c:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     e2e:	8f 81       	ldd	r24, Y+7	; 0x07
     e30:	98 85       	ldd	r25, Y+8	; 0x08
     e32:	eb 81       	ldd	r30, Y+3	; 0x03
     e34:	fc 81       	ldd	r31, Y+4	; 0x04
     e36:	93 83       	std	Z+3, r25	; 0x03
     e38:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e3a:	ef 81       	ldd	r30, Y+7	; 0x07
     e3c:	f8 85       	ldd	r31, Y+8	; 0x08
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	91 87       	std	Z+9, r25	; 0x09
     e44:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     e46:	ed 81       	ldd	r30, Y+5	; 0x05
     e48:	fe 81       	ldd	r31, Y+6	; 0x06
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	ed 81       	ldd	r30, Y+5	; 0x05
     e50:	fe 81       	ldd	r31, Y+6	; 0x06
     e52:	80 83       	st	Z, r24
}
     e54:	28 96       	adiw	r28, 0x08	; 8
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <vListRemove+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <vListRemove+0x8>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e76:	eb 81       	ldd	r30, Y+3	; 0x03
     e78:	fc 81       	ldd	r31, Y+4	; 0x04
     e7a:	a2 81       	ldd	r26, Z+2	; 0x02
     e7c:	b3 81       	ldd	r27, Z+3	; 0x03
     e7e:	eb 81       	ldd	r30, Y+3	; 0x03
     e80:	fc 81       	ldd	r31, Y+4	; 0x04
     e82:	84 81       	ldd	r24, Z+4	; 0x04
     e84:	95 81       	ldd	r25, Z+5	; 0x05
     e86:	15 96       	adiw	r26, 0x05	; 5
     e88:	9c 93       	st	X, r25
     e8a:	8e 93       	st	-X, r24
     e8c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e8e:	eb 81       	ldd	r30, Y+3	; 0x03
     e90:	fc 81       	ldd	r31, Y+4	; 0x04
     e92:	a4 81       	ldd	r26, Z+4	; 0x04
     e94:	b5 81       	ldd	r27, Z+5	; 0x05
     e96:	eb 81       	ldd	r30, Y+3	; 0x03
     e98:	fc 81       	ldd	r31, Y+4	; 0x04
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	13 96       	adiw	r26, 0x03	; 3
     ea0:	9c 93       	st	X, r25
     ea2:	8e 93       	st	-X, r24
     ea4:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	80 85       	ldd	r24, Z+8	; 0x08
     eac:	91 85       	ldd	r25, Z+9	; 0x09
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	21 81       	ldd	r18, Z+1	; 0x01
     eb8:	32 81       	ldd	r19, Z+2	; 0x02
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	41 f4       	brne	.+16     	; 0xed4 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ec4:	eb 81       	ldd	r30, Y+3	; 0x03
     ec6:	fc 81       	ldd	r31, Y+4	; 0x04
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	95 81       	ldd	r25, Z+5	; 0x05
     ecc:	e9 81       	ldd	r30, Y+1	; 0x01
     ece:	fa 81       	ldd	r31, Y+2	; 0x02
     ed0:	92 83       	std	Z+2, r25	; 0x02
     ed2:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     ed4:	eb 81       	ldd	r30, Y+3	; 0x03
     ed6:	fc 81       	ldd	r31, Y+4	; 0x04
     ed8:	11 86       	std	Z+9, r1	; 0x09
     eda:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     edc:	e9 81       	ldd	r30, Y+1	; 0x01
     ede:	fa 81       	ldd	r31, Y+2	; 0x02
     ee0:	80 81       	ld	r24, Z
     ee2:	81 50       	subi	r24, 0x01	; 1
     ee4:	e9 81       	ldd	r30, Y+1	; 0x01
     ee6:	fa 81       	ldd	r31, Y+2	; 0x02
     ee8:	80 83       	st	Z, r24
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <main>:
/**task1 decleratio**/
void Button(void *ptr);
void Led(void *ptr);

int main(void)
{
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	/*creat btn task**/
	xTaskCreate(Button,0,100,0,1,0);
     f0e:	85 ec       	ldi	r24, 0xC5	; 197
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	44 e6       	ldi	r20, 0x64	; 100
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	01 e0       	ldi	r16, 0x01	; 1
     f20:	ee 24       	eor	r14, r14
     f22:	ff 24       	eor	r15, r15
     f24:	cc 24       	eor	r12, r12
     f26:	dd 24       	eor	r13, r13
     f28:	aa 24       	eor	r10, r10
     f2a:	bb 24       	eor	r11, r11
     f2c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <xTaskGenericCreate>
	/*creat led task**/
	xTaskCreate(Led,0,100,0,0,0);
     f30:	8b ef       	ldi	r24, 0xFB	; 251
     f32:	97 e0       	ldi	r25, 0x07	; 7
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	44 e6       	ldi	r20, 0x64	; 100
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	00 e0       	ldi	r16, 0x00	; 0
     f42:	ee 24       	eor	r14, r14
     f44:	ff 24       	eor	r15, r15
     f46:	cc 24       	eor	r12, r12
     f48:	dd 24       	eor	r13, r13
     f4a:	aa 24       	eor	r10, r10
     f4c:	bb 24       	eor	r11, r11
     f4e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <xTaskGenericCreate>

	/*create semaphoe******/
	vSemaphoreCreateBinary(semaphor_led);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	0e 94 04 0b 	call	0x1608	; 0x1608 <xQueueCreate>
     f5a:	90 93 60 03 	sts	0x0360, r25
     f5e:	80 93 5f 03 	sts	0x035F, r24
     f62:	80 91 5f 03 	lds	r24, 0x035F
     f66:	90 91 60 03 	lds	r25, 0x0360
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	59 f0       	breq	.+22     	; 0xf84 <main+0x8c>
     f6e:	80 91 5f 03 	lds	r24, 0x035F
     f72:	90 91 60 03 	lds	r25, 0x0360
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	0e 94 ad 0b 	call	0x175a	; 0x175a <xQueueGenericSend>
	//start schaduling
	vTaskStartScheduler();
     f84:	0e 94 7e 11 	call	0x22fc	; 0x22fc <vTaskStartScheduler>
     f88:	ff cf       	rjmp	.-2      	; 0xf88 <main+0x90>

00000f8a <Button>:
	{

	}
}
void Button(void *ptr)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <Button+0x6>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9b 83       	std	Y+3, r25	; 0x03
     f98:	8a 83       	std	Y+2, r24	; 0x02
	u8 button_state=0;
     f9a:	19 82       	std	Y+1, r1	; 0x01
	/*pull up internal*/
	M_DIO_Vid_WrtPinDir(M_DIO_PORTA,M_DIO_PIN0,M_DIO_INPUT);
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <M_DIO_Vid_WrtPinDir>
	M_DIO_Vid_wrtPinVal(M_DIO_PORTA,M_DIO_PIN0,M_DIO_HIGH);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	41 e0       	ldi	r20, 0x01	; 1
     fac:	0e 94 04 01 	call	0x208	; 0x208 <M_DIO_Vid_wrtPinVal>

	while(1)
	{
		/*periodicity*/
		vTaskDelay(20);
     fb0:	84 e1       	ldi	r24, 0x14	; 20
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 49 11 	call	0x2292	; 0x2292 <vTaskDelay>
		xSemaphoreTake(semaphor_led,0);
     fb8:	80 91 5f 03 	lds	r24, 0x035F
     fbc:	90 91 60 03 	lds	r25, 0x0360
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	0e 94 98 0c 	call	0x1930	; 0x1930 <xQueueGenericReceive>
		button_state=M_DIO_u8_READPinVal(M_DIO_PORTA,M_DIO_PIN0);
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	0e 94 bf 01 	call	0x37e	; 0x37e <M_DIO_u8_READPinVal>
     fd6:	89 83       	std	Y+1, r24	; 0x01
		if(button_state==0)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	88 23       	and	r24, r24
     fdc:	49 f7       	brne	.-46     	; 0xfb0 <Button+0x26>
		{
			xSemaphoreGive(semaphor_led);
     fde:	80 91 5f 03 	lds	r24, 0x035F
     fe2:	90 91 60 03 	lds	r25, 0x0360
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	0e 94 ad 0b 	call	0x175a	; 0x175a <xQueueGenericSend>
     ff4:	dd cf       	rjmp	.-70     	; 0xfb0 <Button+0x26>

00000ff6 <Led>:
		}
	}
}
void Led(void *ptr)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <Led+0x6>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	8a 83       	std	Y+2, r24	; 0x02
	u8 semaled_state;
	M_DIO_Vid_WrtPinDir(M_DIO_PORTA,M_DIO_PIN0,M_DIO_OUTPUT);
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	0e 94 49 00 	call	0x92	; 0x92 <M_DIO_Vid_WrtPinDir>
	/*periodicity*/
	vTaskDelay(50);
    1010:	82 e3       	ldi	r24, 0x32	; 50
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 49 11 	call	0x2292	; 0x2292 <vTaskDelay>
	while(1)
	{
		semaled_state=xSemaphoreTake(semaphor_led,0);
    1018:	80 91 5f 03 	lds	r24, 0x035F
    101c:	90 91 60 03 	lds	r25, 0x0360
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	0e 94 98 0c 	call	0x1930	; 0x1930 <xQueueGenericReceive>
    102e:	89 83       	std	Y+1, r24	; 0x01
		if(semaled_state==pdPASS)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	89 f4       	brne	.+34     	; 0x1058 <Led+0x62>
		{
			M_DIO_Vid_wrtPinVal(M_DIO_PORTA,M_DIO_PIN1,M_DIO_HIGH);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	0e 94 04 01 	call	0x208	; 0x208 <M_DIO_Vid_wrtPinVal>
			xSemaphoreGive(semaphor_led);
    1040:	80 91 5f 03 	lds	r24, 0x035F
    1044:	90 91 60 03 	lds	r25, 0x0360
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	0e 94 ad 0b 	call	0x175a	; 0x175a <xQueueGenericSend>
    1056:	e0 cf       	rjmp	.-64     	; 0x1018 <Led+0x22>
		}else
		{
			M_DIO_Vid_wrtPinVal(M_DIO_PORTA,M_DIO_PIN1,M_DIO_LOW);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	0e 94 04 01 	call	0x208	; 0x208 <M_DIO_Vid_wrtPinVal>
    1062:	da cf       	rjmp	.-76     	; 0x1018 <Led+0x22>

00001064 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	28 97       	sbiw	r28, 0x08	; 8
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	7e 83       	std	Y+6, r23	; 0x06
    107e:	6d 83       	std	Y+5, r22	; 0x05
    1080:	58 87       	std	Y+8, r21	; 0x08
    1082:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1084:	eb 81       	ldd	r30, Y+3	; 0x03
    1086:	fc 81       	ldd	r31, Y+4	; 0x04
    1088:	81 e1       	ldi	r24, 0x11	; 17
    108a:	80 83       	st	Z, r24
	pxTopOfStack--;
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1096:	eb 81       	ldd	r30, Y+3	; 0x03
    1098:	fc 81       	ldd	r31, Y+4	; 0x04
    109a:	82 e2       	ldi	r24, 0x22	; 34
    109c:	80 83       	st	Z, r24
	pxTopOfStack--;
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9c 83       	std	Y+4, r25	; 0x04
    10a6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    10a8:	eb 81       	ldd	r30, Y+3	; 0x03
    10aa:	fc 81       	ldd	r31, Y+4	; 0x04
    10ac:	83 e3       	ldi	r24, 0x33	; 51
    10ae:	80 83       	st	Z, r24
	pxTopOfStack--;
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	9c 83       	std	Y+4, r25	; 0x04
    10b8:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	eb 81       	ldd	r30, Y+3	; 0x03
    10c6:	fc 81       	ldd	r31, Y+4	; 0x04
    10c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	9c 83       	std	Y+4, r25	; 0x04
    10d2:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	89 2f       	mov	r24, r25
    10da:	99 27       	eor	r25, r25
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	eb 81       	ldd	r30, Y+3	; 0x03
    10e4:	fc 81       	ldd	r31, Y+4	; 0x04
    10e6:	80 83       	st	Z, r24
	pxTopOfStack--;
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    10f2:	eb 81       	ldd	r30, Y+3	; 0x03
    10f4:	fc 81       	ldd	r31, Y+4	; 0x04
    10f6:	10 82       	st	Z, r1
	pxTopOfStack--;
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	9c 83       	std	Y+4, r25	; 0x04
    1100:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1102:	eb 81       	ldd	r30, Y+3	; 0x03
    1104:	fc 81       	ldd	r31, Y+4	; 0x04
    1106:	80 e8       	ldi	r24, 0x80	; 128
    1108:	80 83       	st	Z, r24
	pxTopOfStack--;
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    1114:	eb 81       	ldd	r30, Y+3	; 0x03
    1116:	fc 81       	ldd	r31, Y+4	; 0x04
    1118:	10 82       	st	Z, r1
	pxTopOfStack--;
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1124:	eb 81       	ldd	r30, Y+3	; 0x03
    1126:	fc 81       	ldd	r31, Y+4	; 0x04
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	80 83       	st	Z, r24
	pxTopOfStack--;
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1136:	eb 81       	ldd	r30, Y+3	; 0x03
    1138:	fc 81       	ldd	r31, Y+4	; 0x04
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	80 83       	st	Z, r24
	pxTopOfStack--;
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	9c 83       	std	Y+4, r25	; 0x04
    1146:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1148:	eb 81       	ldd	r30, Y+3	; 0x03
    114a:	fc 81       	ldd	r31, Y+4	; 0x04
    114c:	84 e0       	ldi	r24, 0x04	; 4
    114e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	85 e0       	ldi	r24, 0x05	; 5
    1160:	80 83       	st	Z, r24
	pxTopOfStack--;
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    116c:	eb 81       	ldd	r30, Y+3	; 0x03
    116e:	fc 81       	ldd	r31, Y+4	; 0x04
    1170:	86 e0       	ldi	r24, 0x06	; 6
    1172:	80 83       	st	Z, r24
	pxTopOfStack--;
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    117e:	eb 81       	ldd	r30, Y+3	; 0x03
    1180:	fc 81       	ldd	r31, Y+4	; 0x04
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	80 83       	st	Z, r24
	pxTopOfStack--;
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    1190:	eb 81       	ldd	r30, Y+3	; 0x03
    1192:	fc 81       	ldd	r31, Y+4	; 0x04
    1194:	88 e0       	ldi	r24, 0x08	; 8
    1196:	80 83       	st	Z, r24
	pxTopOfStack--;
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	89 e0       	ldi	r24, 0x09	; 9
    11a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    11b4:	eb 81       	ldd	r30, Y+3	; 0x03
    11b6:	fc 81       	ldd	r31, Y+4	; 0x04
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	80 83       	st	Z, r24
	pxTopOfStack--;
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9c 83       	std	Y+4, r25	; 0x04
    11c4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    11c6:	eb 81       	ldd	r30, Y+3	; 0x03
    11c8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ca:	81 e1       	ldi	r24, 0x11	; 17
    11cc:	80 83       	st	Z, r24
	pxTopOfStack--;
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    11d8:	eb 81       	ldd	r30, Y+3	; 0x03
    11da:	fc 81       	ldd	r31, Y+4	; 0x04
    11dc:	82 e1       	ldi	r24, 0x12	; 18
    11de:	80 83       	st	Z, r24
	pxTopOfStack--;
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	9c 83       	std	Y+4, r25	; 0x04
    11e8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    11ea:	eb 81       	ldd	r30, Y+3	; 0x03
    11ec:	fc 81       	ldd	r31, Y+4	; 0x04
    11ee:	83 e1       	ldi	r24, 0x13	; 19
    11f0:	80 83       	st	Z, r24
	pxTopOfStack--;
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    11fc:	eb 81       	ldd	r30, Y+3	; 0x03
    11fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1200:	84 e1       	ldi	r24, 0x14	; 20
    1202:	80 83       	st	Z, r24
	pxTopOfStack--;
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    120e:	eb 81       	ldd	r30, Y+3	; 0x03
    1210:	fc 81       	ldd	r31, Y+4	; 0x04
    1212:	85 e1       	ldi	r24, 0x15	; 21
    1214:	80 83       	st	Z, r24
	pxTopOfStack--;
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	9c 83       	std	Y+4, r25	; 0x04
    121e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    1220:	eb 81       	ldd	r30, Y+3	; 0x03
    1222:	fc 81       	ldd	r31, Y+4	; 0x04
    1224:	86 e1       	ldi	r24, 0x16	; 22
    1226:	80 83       	st	Z, r24
	pxTopOfStack--;
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	9c 83       	std	Y+4, r25	; 0x04
    1230:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    1232:	eb 81       	ldd	r30, Y+3	; 0x03
    1234:	fc 81       	ldd	r31, Y+4	; 0x04
    1236:	87 e1       	ldi	r24, 0x17	; 23
    1238:	80 83       	st	Z, r24
	pxTopOfStack--;
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    1244:	eb 81       	ldd	r30, Y+3	; 0x03
    1246:	fc 81       	ldd	r31, Y+4	; 0x04
    1248:	88 e1       	ldi	r24, 0x18	; 24
    124a:	80 83       	st	Z, r24
	pxTopOfStack--;
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    1256:	eb 81       	ldd	r30, Y+3	; 0x03
    1258:	fc 81       	ldd	r31, Y+4	; 0x04
    125a:	89 e1       	ldi	r24, 0x19	; 25
    125c:	80 83       	st	Z, r24
	pxTopOfStack--;
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    1268:	eb 81       	ldd	r30, Y+3	; 0x03
    126a:	fc 81       	ldd	r31, Y+4	; 0x04
    126c:	80 e2       	ldi	r24, 0x20	; 32
    126e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	9c 83       	std	Y+4, r25	; 0x04
    1278:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    127a:	eb 81       	ldd	r30, Y+3	; 0x03
    127c:	fc 81       	ldd	r31, Y+4	; 0x04
    127e:	81 e2       	ldi	r24, 0x21	; 33
    1280:	80 83       	st	Z, r24
	pxTopOfStack--;
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    128c:	eb 81       	ldd	r30, Y+3	; 0x03
    128e:	fc 81       	ldd	r31, Y+4	; 0x04
    1290:	82 e2       	ldi	r24, 0x22	; 34
    1292:	80 83       	st	Z, r24
	pxTopOfStack--;
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	9c 83       	std	Y+4, r25	; 0x04
    129c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    129e:	eb 81       	ldd	r30, Y+3	; 0x03
    12a0:	fc 81       	ldd	r31, Y+4	; 0x04
    12a2:	83 e2       	ldi	r24, 0x23	; 35
    12a4:	80 83       	st	Z, r24
	pxTopOfStack--;
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    12b0:	8f 81       	ldd	r24, Y+7	; 0x07
    12b2:	98 85       	ldd	r25, Y+8	; 0x08
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	80 83       	st	Z, r24
	pxTopOfStack--;
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	9c 83       	std	Y+4, r25	; 0x04
    12c8:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	89 2f       	mov	r24, r25
    12d0:	99 27       	eor	r25, r25
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	eb 81       	ldd	r30, Y+3	; 0x03
    12da:	fc 81       	ldd	r31, Y+4	; 0x04
    12dc:	80 83       	st	Z, r24
	pxTopOfStack--;
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9c 83       	std	Y+4, r25	; 0x04
    12e6:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    12e8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ea:	fc 81       	ldd	r31, Y+4	; 0x04
    12ec:	86 e2       	ldi	r24, 0x26	; 38
    12ee:	80 83       	st	Z, r24
	pxTopOfStack--;
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	87 e2       	ldi	r24, 0x27	; 39
    1300:	80 83       	st	Z, r24
	pxTopOfStack--;
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    130c:	eb 81       	ldd	r30, Y+3	; 0x03
    130e:	fc 81       	ldd	r31, Y+4	; 0x04
    1310:	88 e2       	ldi	r24, 0x28	; 40
    1312:	80 83       	st	Z, r24
	pxTopOfStack--;
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    131e:	eb 81       	ldd	r30, Y+3	; 0x03
    1320:	fc 81       	ldd	r31, Y+4	; 0x04
    1322:	89 e2       	ldi	r24, 0x29	; 41
    1324:	80 83       	st	Z, r24
	pxTopOfStack--;
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    1330:	eb 81       	ldd	r30, Y+3	; 0x03
    1332:	fc 81       	ldd	r31, Y+4	; 0x04
    1334:	80 e3       	ldi	r24, 0x30	; 48
    1336:	80 83       	st	Z, r24
	pxTopOfStack--;
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    1342:	eb 81       	ldd	r30, Y+3	; 0x03
    1344:	fc 81       	ldd	r31, Y+4	; 0x04
    1346:	81 e3       	ldi	r24, 0x31	; 49
    1348:	80 83       	st	Z, r24
	pxTopOfStack--;
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1358:	28 96       	adiw	r28, 0x08	; 8
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1372:	0e 94 a5 0a 	call	0x154a	; 0x154a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1376:	a0 91 fc 02 	lds	r26, 0x02FC
    137a:	b0 91 fd 02 	lds	r27, 0x02FD
    137e:	cd 91       	ld	r28, X+
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	dd 91       	ld	r29, X+
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	ff 91       	pop	r31
    1388:	ef 91       	pop	r30
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	4f 90       	pop	r4
    13be:	3f 90       	pop	r3
    13c0:	2f 90       	pop	r2
    13c2:	1f 90       	pop	r1
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    13ca:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	0f 92       	push	r0
    13ea:	1f 92       	push	r1
    13ec:	11 24       	eor	r1, r1
    13ee:	2f 92       	push	r2
    13f0:	3f 92       	push	r3
    13f2:	4f 92       	push	r4
    13f4:	5f 92       	push	r5
    13f6:	6f 92       	push	r6
    13f8:	7f 92       	push	r7
    13fa:	8f 92       	push	r8
    13fc:	9f 92       	push	r9
    13fe:	af 92       	push	r10
    1400:	bf 92       	push	r11
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ef 93       	push	r30
    1428:	ff 93       	push	r31
    142a:	a0 91 fc 02 	lds	r26, 0x02FC
    142e:	b0 91 fd 02 	lds	r27, 0x02FD
    1432:	0d b6       	in	r0, 0x3d	; 61
    1434:	0d 92       	st	X+, r0
    1436:	0e b6       	in	r0, 0x3e	; 62
    1438:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    143a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    143e:	a0 91 fc 02 	lds	r26, 0x02FC
    1442:	b0 91 fd 02 	lds	r27, 0x02FD
    1446:	cd 91       	ld	r28, X+
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	dd 91       	ld	r29, X+
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	6f 90       	pop	r6
    1482:	5f 90       	pop	r5
    1484:	4f 90       	pop	r4
    1486:	3f 90       	pop	r3
    1488:	2f 90       	pop	r2
    148a:	1f 90       	pop	r1
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1492:	08 95       	ret

00001494 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1494:	0f 92       	push	r0
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	0f 92       	push	r0
    149c:	1f 92       	push	r1
    149e:	11 24       	eor	r1, r1
    14a0:	2f 92       	push	r2
    14a2:	3f 92       	push	r3
    14a4:	4f 92       	push	r4
    14a6:	5f 92       	push	r5
    14a8:	6f 92       	push	r6
    14aa:	7f 92       	push	r7
    14ac:	8f 92       	push	r8
    14ae:	9f 92       	push	r9
    14b0:	af 92       	push	r10
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	2f 93       	push	r18
    14c2:	3f 93       	push	r19
    14c4:	4f 93       	push	r20
    14c6:	5f 93       	push	r21
    14c8:	6f 93       	push	r22
    14ca:	7f 93       	push	r23
    14cc:	8f 93       	push	r24
    14ce:	9f 93       	push	r25
    14d0:	af 93       	push	r26
    14d2:	bf 93       	push	r27
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	ef 93       	push	r30
    14da:	ff 93       	push	r31
    14dc:	a0 91 fc 02 	lds	r26, 0x02FC
    14e0:	b0 91 fd 02 	lds	r27, 0x02FD
    14e4:	0d b6       	in	r0, 0x3d	; 61
    14e6:	0d 92       	st	X+, r0
    14e8:	0e b6       	in	r0, 0x3e	; 62
    14ea:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    14ec:	0e 94 8c 12 	call	0x2518	; 0x2518 <vTaskIncrementTick>
	vTaskSwitchContext();
    14f0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14f4:	a0 91 fc 02 	lds	r26, 0x02FC
    14f8:	b0 91 fd 02 	lds	r27, 0x02FD
    14fc:	cd 91       	ld	r28, X+
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	dd 91       	ld	r29, X+
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	bf 90       	pop	r11
    152e:	af 90       	pop	r10
    1530:	9f 90       	pop	r9
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	3f 90       	pop	r3
    153e:	2f 90       	pop	r2
    1540:	1f 90       	pop	r1
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1548:	08 95       	ret

0000154a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <prvSetupTimerInterrupt+0x6>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <prvSetupTimerInterrupt+0x8>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <prvSetupTimerInterrupt+0xa>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1558:	80 e4       	ldi	r24, 0x40	; 64
    155a:	9f e1       	ldi	r25, 0x1F	; 31
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	8b 83       	std	Y+3, r24	; 0x03
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	ad 83       	std	Y+5, r26	; 0x05
    1566:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	ad 81       	ldd	r26, Y+5	; 0x05
    156e:	be 81       	ldd	r27, Y+6	; 0x06
    1570:	68 94       	set
    1572:	15 f8       	bld	r1, 5
    1574:	b6 95       	lsr	r27
    1576:	a7 95       	ror	r26
    1578:	97 95       	ror	r25
    157a:	87 95       	ror	r24
    157c:	16 94       	lsr	r1
    157e:	d1 f7       	brne	.-12     	; 0x1574 <prvSetupTimerInterrupt+0x2a>
    1580:	8b 83       	std	Y+3, r24	; 0x03
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	ad 83       	std	Y+5, r26	; 0x05
    1586:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	ad 81       	ldd	r26, Y+5	; 0x05
    158e:	be 81       	ldd	r27, Y+6	; 0x06
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	a1 09       	sbc	r26, r1
    1594:	b1 09       	sbc	r27, r1
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	ad 83       	std	Y+5, r26	; 0x05
    159c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	ad 81       	ldd	r26, Y+5	; 0x05
    15a8:	be 81       	ldd	r27, Y+6	; 0x06
    15aa:	89 2f       	mov	r24, r25
    15ac:	9a 2f       	mov	r25, r26
    15ae:	ab 2f       	mov	r26, r27
    15b0:	bb 27       	eor	r27, r27
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	ad 83       	std	Y+5, r26	; 0x05
    15b8:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    15be:	eb e4       	ldi	r30, 0x4B	; 75
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    15c6:	ea e4       	ldi	r30, 0x4A	; 74
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    15ce:	8b e0       	ldi	r24, 0x0B	; 11
    15d0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    15da:	e9 e5       	ldi	r30, 0x59	; 89
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 61       	ori	r24, 0x10	; 16
    15e6:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	80 83       	st	Z, r24
}
    15f0:	26 96       	adiw	r28, 0x06	; 6
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    1602:	0e 94 4a 0a 	call	0x1494	; 0x1494 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1606:	18 95       	reti

00001608 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	28 97       	sbiw	r28, 0x08	; 8
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	8f 83       	std	Y+7, r24	; 0x07
    161e:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1620:	1a 82       	std	Y+2, r1	; 0x02
    1622:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1624:	8f 81       	ldd	r24, Y+7	; 0x07
    1626:	88 23       	and	r24, r24
    1628:	09 f4       	brne	.+2      	; 0x162c <xQueueCreate+0x24>
    162a:	8c c0       	rjmp	.+280    	; 0x1744 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    162c:	8f e1       	ldi	r24, 0x1F	; 31
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	09 f4       	brne	.+2      	; 0x1642 <xQueueCreate+0x3a>
    1640:	81 c0       	rjmp	.+258    	; 0x1744 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1642:	8f 81       	ldd	r24, Y+7	; 0x07
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	88 85       	ldd	r24, Y+8	; 0x08
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	ac 01       	movw	r20, r24
    1650:	24 9f       	mul	r18, r20
    1652:	c0 01       	movw	r24, r0
    1654:	25 9f       	mul	r18, r21
    1656:	90 0d       	add	r25, r0
    1658:	34 9f       	mul	r19, r20
    165a:	90 0d       	add	r25, r0
    165c:	11 24       	eor	r1, r1
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    166c:	ed 81       	ldd	r30, Y+5	; 0x05
    166e:	fe 81       	ldd	r31, Y+6	; 0x06
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1674:	ed 81       	ldd	r30, Y+5	; 0x05
    1676:	fe 81       	ldd	r31, Y+6	; 0x06
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	09 f4       	brne	.+2      	; 0x1682 <xQueueCreate+0x7a>
    1680:	5d c0       	rjmp	.+186    	; 0x173c <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1682:	ed 81       	ldd	r30, Y+5	; 0x05
    1684:	fe 81       	ldd	r31, Y+6	; 0x06
    1686:	40 81       	ld	r20, Z
    1688:	51 81       	ldd	r21, Z+1	; 0x01
    168a:	8f 81       	ldd	r24, Y+7	; 0x07
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	88 85       	ldd	r24, Y+8	; 0x08
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	bc 01       	movw	r22, r24
    1698:	26 9f       	mul	r18, r22
    169a:	c0 01       	movw	r24, r0
    169c:	27 9f       	mul	r18, r23
    169e:	90 0d       	add	r25, r0
    16a0:	36 9f       	mul	r19, r22
    16a2:	90 0d       	add	r25, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	84 0f       	add	r24, r20
    16a8:	95 1f       	adc	r25, r21
    16aa:	ed 81       	ldd	r30, Y+5	; 0x05
    16ac:	fe 81       	ldd	r31, Y+6	; 0x06
    16ae:	93 83       	std	Z+3, r25	; 0x03
    16b0:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    16b2:	ed 81       	ldd	r30, Y+5	; 0x05
    16b4:	fe 81       	ldd	r31, Y+6	; 0x06
    16b6:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    16b8:	ed 81       	ldd	r30, Y+5	; 0x05
    16ba:	fe 81       	ldd	r31, Y+6	; 0x06
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	ed 81       	ldd	r30, Y+5	; 0x05
    16c2:	fe 81       	ldd	r31, Y+6	; 0x06
    16c4:	95 83       	std	Z+5, r25	; 0x05
    16c6:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    16c8:	ed 81       	ldd	r30, Y+5	; 0x05
    16ca:	fe 81       	ldd	r31, Y+6	; 0x06
    16cc:	40 81       	ld	r20, Z
    16ce:	51 81       	ldd	r21, Z+1	; 0x01
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 01       	movw	r18, r24
    16d8:	21 50       	subi	r18, 0x01	; 1
    16da:	30 40       	sbci	r19, 0x00	; 0
    16dc:	88 85       	ldd	r24, Y+8	; 0x08
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	bc 01       	movw	r22, r24
    16e4:	26 9f       	mul	r18, r22
    16e6:	c0 01       	movw	r24, r0
    16e8:	27 9f       	mul	r18, r23
    16ea:	90 0d       	add	r25, r0
    16ec:	36 9f       	mul	r19, r22
    16ee:	90 0d       	add	r25, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	84 0f       	add	r24, r20
    16f4:	95 1f       	adc	r25, r21
    16f6:	ed 81       	ldd	r30, Y+5	; 0x05
    16f8:	fe 81       	ldd	r31, Y+6	; 0x06
    16fa:	97 83       	std	Z+7, r25	; 0x07
    16fc:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    16fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1700:	fe 81       	ldd	r31, Y+6	; 0x06
    1702:	8f 81       	ldd	r24, Y+7	; 0x07
    1704:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1706:	ed 81       	ldd	r30, Y+5	; 0x05
    1708:	fe 81       	ldd	r31, Y+6	; 0x06
    170a:	88 85       	ldd	r24, Y+8	; 0x08
    170c:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    170e:	ed 81       	ldd	r30, Y+5	; 0x05
    1710:	fe 81       	ldd	r31, Y+6	; 0x06
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1716:	ed 81       	ldd	r30, Y+5	; 0x05
    1718:	fe 81       	ldd	r31, Y+6	; 0x06
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	08 96       	adiw	r24, 0x08	; 8
    1724:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	41 96       	adiw	r24, 0x11	; 17
    172e:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1748:	28 96       	adiw	r28, 0x08	; 8
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	2c 97       	sbiw	r28, 0x0c	; 12
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	78 87       	std	Y+8, r23	; 0x08
    1774:	6f 83       	std	Y+7, r22	; 0x07
    1776:	5a 87       	std	Y+10, r21	; 0x0a
    1778:	49 87       	std	Y+9, r20	; 0x09
    177a:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    177c:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1784:	ed 81       	ldd	r30, Y+5	; 0x05
    1786:	fe 81       	ldd	r31, Y+6	; 0x06
    1788:	92 8d       	ldd	r25, Z+26	; 0x1a
    178a:	ed 81       	ldd	r30, Y+5	; 0x05
    178c:	fe 81       	ldd	r31, Y+6	; 0x06
    178e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1790:	98 17       	cp	r25, r24
    1792:	d8 f4       	brcc	.+54     	; 0x17ca <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	2f 81       	ldd	r18, Y+7	; 0x07
    179a:	38 85       	ldd	r19, Y+8	; 0x08
    179c:	b9 01       	movw	r22, r18
    179e:	4b 85       	ldd	r20, Y+11	; 0x0b
    17a0:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17a4:	ed 81       	ldd	r30, Y+5	; 0x05
    17a6:	fe 81       	ldd	r31, Y+6	; 0x06
    17a8:	81 89       	ldd	r24, Z+17	; 0x11
    17aa:	88 23       	and	r24, r24
    17ac:	49 f0       	breq	.+18     	; 0x17c0 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	41 96       	adiw	r24, 0x11	; 17
    17b4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xTaskRemoveFromEventList>
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    17bc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	8c 87       	std	Y+12, r24	; 0x0c
    17c8:	5c c0       	rjmp	.+184    	; 0x1882 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	21 f4       	brne	.+8      	; 0x17da <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    17d6:	1c 86       	std	Y+12, r1	; 0x0c
    17d8:	54 c0       	rjmp	.+168    	; 0x1882 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	88 23       	and	r24, r24
    17de:	31 f4       	brne	.+12     	; 0x17ec <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    17e0:	ce 01       	movw	r24, r28
    17e2:	02 96       	adiw	r24, 0x02	; 2
    17e4:	0e 94 65 14 	call	0x28ca	; 0x28ca <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    17f0:	0e 94 c1 11 	call	0x2382	; 0x2382 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	0f 92       	push	r0
    17fa:	ed 81       	ldd	r30, Y+5	; 0x05
    17fc:	fe 81       	ldd	r31, Y+6	; 0x06
    17fe:	85 8d       	ldd	r24, Z+29	; 0x1d
    1800:	8f 3f       	cpi	r24, 0xFF	; 255
    1802:	19 f4       	brne	.+6      	; 0x180a <xQueueGenericSend+0xb0>
    1804:	ed 81       	ldd	r30, Y+5	; 0x05
    1806:	fe 81       	ldd	r31, Y+6	; 0x06
    1808:	15 8e       	std	Z+29, r1	; 0x1d
    180a:	ed 81       	ldd	r30, Y+5	; 0x05
    180c:	fe 81       	ldd	r31, Y+6	; 0x06
    180e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1810:	8f 3f       	cpi	r24, 0xFF	; 255
    1812:	19 f4       	brne	.+6      	; 0x181a <xQueueGenericSend+0xc0>
    1814:	ed 81       	ldd	r30, Y+5	; 0x05
    1816:	fe 81       	ldd	r31, Y+6	; 0x06
    1818:	16 8e       	std	Z+30, r1	; 0x1e
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    181e:	ce 01       	movw	r24, r28
    1820:	02 96       	adiw	r24, 0x02	; 2
    1822:	9e 01       	movw	r18, r28
    1824:	27 5f       	subi	r18, 0xF7	; 247
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	b9 01       	movw	r22, r18
    182a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskCheckForTimeOut>
    182e:	88 23       	and	r24, r24
    1830:	09 f5       	brne	.+66     	; 0x1874 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <prvIsQueueFull>
    183a:	88 23       	and	r24, r24
    183c:	a1 f0       	breq	.+40     	; 0x1866 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	08 96       	adiw	r24, 0x08	; 8
    1844:	29 85       	ldd	r18, Y+9	; 0x09
    1846:	3a 85       	ldd	r19, Y+10	; 0x0a
    1848:	b9 01       	movw	r22, r18
    184a:	0e 94 c7 13 	call	0x278e	; 0x278e <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1856:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
    185a:	88 23       	and	r24, r24
    185c:	09 f0       	breq	.+2      	; 0x1860 <xQueueGenericSend+0x106>
    185e:	8f cf       	rjmp	.-226    	; 0x177e <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1860:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    1864:	8c cf       	rjmp	.-232    	; 0x177e <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    186e:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
    1872:	85 cf       	rjmp	.-246    	; 0x177e <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    187c:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1880:	1c 86       	std	Y+12, r1	; 0x0c
    1882:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1884:	2c 96       	adiw	r28, 0x0c	; 12
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	29 97       	sbiw	r28, 0x09	; 9
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	9c 83       	std	Y+4, r25	; 0x04
    18ac:	8b 83       	std	Y+3, r24	; 0x03
    18ae:	7e 83       	std	Y+6, r23	; 0x06
    18b0:	6d 83       	std	Y+5, r22	; 0x05
    18b2:	58 87       	std	Y+8, r21	; 0x08
    18b4:	4f 83       	std	Y+7, r20	; 0x07
    18b6:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    18b8:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    18ba:	eb 81       	ldd	r30, Y+3	; 0x03
    18bc:	fc 81       	ldd	r31, Y+4	; 0x04
    18be:	92 8d       	ldd	r25, Z+26	; 0x1a
    18c0:	eb 81       	ldd	r30, Y+3	; 0x03
    18c2:	fc 81       	ldd	r31, Y+4	; 0x04
    18c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    18c6:	98 17       	cp	r25, r24
    18c8:	40 f5       	brcc	.+80     	; 0x191a <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	2d 81       	ldd	r18, Y+5	; 0x05
    18d0:	3e 81       	ldd	r19, Y+6	; 0x06
    18d2:	b9 01       	movw	r22, r18
    18d4:	49 85       	ldd	r20, Y+9	; 0x09
    18d6:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    18da:	eb 81       	ldd	r30, Y+3	; 0x03
    18dc:	fc 81       	ldd	r31, Y+4	; 0x04
    18de:	86 8d       	ldd	r24, Z+30	; 0x1e
    18e0:	8f 3f       	cpi	r24, 0xFF	; 255
    18e2:	89 f4       	brne	.+34     	; 0x1906 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18e4:	eb 81       	ldd	r30, Y+3	; 0x03
    18e6:	fc 81       	ldd	r31, Y+4	; 0x04
    18e8:	81 89       	ldd	r24, Z+17	; 0x11
    18ea:	88 23       	and	r24, r24
    18ec:	99 f0       	breq	.+38     	; 0x1914 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	41 96       	adiw	r24, 0x11	; 17
    18f4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xTaskRemoveFromEventList>
    18f8:	88 23       	and	r24, r24
    18fa:	61 f0       	breq	.+24     	; 0x1914 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    18fc:	ef 81       	ldd	r30, Y+7	; 0x07
    18fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	80 83       	st	Z, r24
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1906:	eb 81       	ldd	r30, Y+3	; 0x03
    1908:	fc 81       	ldd	r31, Y+4	; 0x04
    190a:	86 8d       	ldd	r24, Z+30	; 0x1e
    190c:	8f 5f       	subi	r24, 0xFF	; 255
    190e:	eb 81       	ldd	r30, Y+3	; 0x03
    1910:	fc 81       	ldd	r31, Y+4	; 0x04
    1912:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	8a 83       	std	Y+2, r24	; 0x02
    1918:	01 c0       	rjmp	.+2      	; 0x191c <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    191a:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    191e:	29 96       	adiw	r28, 0x09	; 9
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	2e 97       	sbiw	r28, 0x0e	; 14
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	98 87       	std	Y+8, r25	; 0x08
    1946:	8f 83       	std	Y+7, r24	; 0x07
    1948:	7a 87       	std	Y+10, r23	; 0x0a
    194a:	69 87       	std	Y+9, r22	; 0x09
    194c:	5c 87       	std	Y+12, r21	; 0x0c
    194e:	4b 87       	std	Y+11, r20	; 0x0b
    1950:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1952:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    195a:	ef 81       	ldd	r30, Y+7	; 0x07
    195c:	f8 85       	ldd	r31, Y+8	; 0x08
    195e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1960:	88 23       	and	r24, r24
    1962:	09 f4       	brne	.+2      	; 0x1966 <xQueueGenericReceive+0x36>
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1966:	ef 81       	ldd	r30, Y+7	; 0x07
    1968:	f8 85       	ldd	r31, Y+8	; 0x08
    196a:	86 81       	ldd	r24, Z+6	; 0x06
    196c:	97 81       	ldd	r25, Z+7	; 0x07
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1972:	8f 81       	ldd	r24, Y+7	; 0x07
    1974:	98 85       	ldd	r25, Y+8	; 0x08
    1976:	29 85       	ldd	r18, Y+9	; 0x09
    1978:	3a 85       	ldd	r19, Y+10	; 0x0a
    197a:	b9 01       	movw	r22, r18
    197c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	88 23       	and	r24, r24
    1984:	b1 f4       	brne	.+44     	; 0x19b2 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1986:	ef 81       	ldd	r30, Y+7	; 0x07
    1988:	f8 85       	ldd	r31, Y+8	; 0x08
    198a:	82 8d       	ldd	r24, Z+26	; 0x1a
    198c:	81 50       	subi	r24, 0x01	; 1
    198e:	ef 81       	ldd	r30, Y+7	; 0x07
    1990:	f8 85       	ldd	r31, Y+8	; 0x08
    1992:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1994:	ef 81       	ldd	r30, Y+7	; 0x07
    1996:	f8 85       	ldd	r31, Y+8	; 0x08
    1998:	80 85       	ldd	r24, Z+8	; 0x08
    199a:	88 23       	and	r24, r24
    199c:	f1 f0       	breq	.+60     	; 0x19da <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    199e:	8f 81       	ldd	r24, Y+7	; 0x07
    19a0:	98 85       	ldd	r25, Y+8	; 0x08
    19a2:	08 96       	adiw	r24, 0x08	; 8
    19a4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xTaskRemoveFromEventList>
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	b9 f4       	brne	.+46     	; 0x19da <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    19ac:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    19b2:	ef 81       	ldd	r30, Y+7	; 0x07
    19b4:	f8 85       	ldd	r31, Y+8	; 0x08
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	97 83       	std	Z+7, r25	; 0x07
    19bc:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19be:	ef 81       	ldd	r30, Y+7	; 0x07
    19c0:	f8 85       	ldd	r31, Y+8	; 0x08
    19c2:	81 89       	ldd	r24, Z+17	; 0x11
    19c4:	88 23       	and	r24, r24
    19c6:	49 f0       	breq	.+18     	; 0x19da <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19c8:	8f 81       	ldd	r24, Y+7	; 0x07
    19ca:	98 85       	ldd	r25, Y+8	; 0x08
    19cc:	41 96       	adiw	r24, 0x11	; 17
    19ce:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xTaskRemoveFromEventList>
    19d2:	88 23       	and	r24, r24
    19d4:	11 f0       	breq	.+4      	; 0x19da <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    19d6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	8e 87       	std	Y+14, r24	; 0x0e
    19e2:	5c c0       	rjmp	.+184    	; 0x1a9c <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    19e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    19ec:	0f 90       	pop	r0
    19ee:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    19f0:	1e 86       	std	Y+14, r1	; 0x0e
    19f2:	54 c0       	rjmp	.+168    	; 0x1a9c <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	88 23       	and	r24, r24
    19f8:	31 f4       	brne	.+12     	; 0x1a06 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    19fa:	ce 01       	movw	r24, r28
    19fc:	04 96       	adiw	r24, 0x04	; 4
    19fe:	0e 94 65 14 	call	0x28ca	; 0x28ca <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1a0a:	0e 94 c1 11 	call	0x2382	; 0x2382 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	0f 92       	push	r0
    1a14:	ef 81       	ldd	r30, Y+7	; 0x07
    1a16:	f8 85       	ldd	r31, Y+8	; 0x08
    1a18:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a1c:	19 f4       	brne	.+6      	; 0x1a24 <xQueueGenericReceive+0xf4>
    1a1e:	ef 81       	ldd	r30, Y+7	; 0x07
    1a20:	f8 85       	ldd	r31, Y+8	; 0x08
    1a22:	15 8e       	std	Z+29, r1	; 0x1d
    1a24:	ef 81       	ldd	r30, Y+7	; 0x07
    1a26:	f8 85       	ldd	r31, Y+8	; 0x08
    1a28:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a2c:	19 f4       	brne	.+6      	; 0x1a34 <xQueueGenericReceive+0x104>
    1a2e:	ef 81       	ldd	r30, Y+7	; 0x07
    1a30:	f8 85       	ldd	r31, Y+8	; 0x08
    1a32:	16 8e       	std	Z+30, r1	; 0x1e
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a38:	ce 01       	movw	r24, r28
    1a3a:	04 96       	adiw	r24, 0x04	; 4
    1a3c:	9e 01       	movw	r18, r28
    1a3e:	25 5f       	subi	r18, 0xF5	; 245
    1a40:	3f 4f       	sbci	r19, 0xFF	; 255
    1a42:	b9 01       	movw	r22, r18
    1a44:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskCheckForTimeOut>
    1a48:	88 23       	and	r24, r24
    1a4a:	09 f5       	brne	.+66     	; 0x1a8e <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4e:	98 85       	ldd	r25, Y+8	; 0x08
    1a50:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <prvIsQueueEmpty>
    1a54:	88 23       	and	r24, r24
    1a56:	a1 f0       	breq	.+40     	; 0x1a80 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a58:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5a:	98 85       	ldd	r25, Y+8	; 0x08
    1a5c:	41 96       	adiw	r24, 0x11	; 17
    1a5e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a60:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a62:	b9 01       	movw	r22, r18
    1a64:	0e 94 c7 13 	call	0x278e	; 0x278e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1a68:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6a:	98 85       	ldd	r25, Y+8	; 0x08
    1a6c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1a70:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
    1a74:	88 23       	and	r24, r24
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <xQueueGenericReceive+0x14a>
    1a78:	6d cf       	rjmp	.-294    	; 0x1954 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    1a7a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
    1a7e:	6a cf       	rjmp	.-300    	; 0x1954 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1a80:	8f 81       	ldd	r24, Y+7	; 0x07
    1a82:	98 85       	ldd	r25, Y+8	; 0x08
    1a84:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1a88:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
    1a8c:	63 cf       	rjmp	.-314    	; 0x1954 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a90:	98 85       	ldd	r25, Y+8	; 0x08
    1a92:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1a96:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1a9a:	1e 86       	std	Y+14, r1	; 0x0e
    1a9c:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    1a9e:	2e 96       	adiw	r28, 0x0e	; 14
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	28 97       	sbiw	r28, 0x08	; 8
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    1ac8:	7e 83       	std	Y+6, r23	; 0x06
    1aca:	6d 83       	std	Y+5, r22	; 0x05
    1acc:	58 87       	std	Y+8, r21	; 0x08
    1ace:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1ad0:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1ad2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ad8:	88 23       	and	r24, r24
    1ada:	71 f1       	breq	.+92     	; 0x1b38 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ae2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae4:	b9 01       	movw	r22, r18
    1ae6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1aea:	eb 81       	ldd	r30, Y+3	; 0x03
    1aec:	fc 81       	ldd	r31, Y+4	; 0x04
    1aee:	82 8d       	ldd	r24, Z+26	; 0x1a
    1af0:	81 50       	subi	r24, 0x01	; 1
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1af8:	eb 81       	ldd	r30, Y+3	; 0x03
    1afa:	fc 81       	ldd	r31, Y+4	; 0x04
    1afc:	85 8d       	ldd	r24, Z+29	; 0x1d
    1afe:	8f 3f       	cpi	r24, 0xFF	; 255
    1b00:	89 f4       	brne	.+34     	; 0x1b24 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b02:	eb 81       	ldd	r30, Y+3	; 0x03
    1b04:	fc 81       	ldd	r31, Y+4	; 0x04
    1b06:	80 85       	ldd	r24, Z+8	; 0x08
    1b08:	88 23       	and	r24, r24
    1b0a:	99 f0       	breq	.+38     	; 0x1b32 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	08 96       	adiw	r24, 0x08	; 8
    1b12:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xTaskRemoveFromEventList>
    1b16:	88 23       	and	r24, r24
    1b18:	61 f0       	breq	.+24     	; 0x1b32 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1b1a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b1c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	80 83       	st	Z, r24
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1b24:	eb 81       	ldd	r30, Y+3	; 0x03
    1b26:	fc 81       	ldd	r31, Y+4	; 0x04
    1b28:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b30:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	8a 83       	std	Y+2, r24	; 0x02
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1b38:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b3c:	28 96       	adiw	r28, 0x08	; 8
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <uxQueueMessagesWaiting+0x6>
    1b54:	0f 92       	push	r0
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	9b 83       	std	Y+3, r25	; 0x03
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1b64:	ea 81       	ldd	r30, Y+2	; 0x02
    1b66:	fb 81       	ldd	r31, Y+3	; 0x03
    1b68:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1b6c:	0f 90       	pop	r0
    1b6e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <uxQueueMessagesWaitingFromISR+0x6>
    1b84:	0f 92       	push	r0
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9b 83       	std	Y+3, r25	; 0x03
    1b8c:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1b8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b90:	fb 81       	ldd	r31, Y+3	; 0x03
    1b92:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b94:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <vQueueDelete+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
	vPortFree( pxQueue );
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <prvCopyDataToQueue+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <prvCopyDataToQueue+0x8>
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	7c 83       	std	Y+4, r23	; 0x04
    1be4:	6b 83       	std	Y+3, r22	; 0x03
    1be6:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <prvCopyDataToQueue+0x24>
    1bf2:	74 c0       	rjmp	.+232    	; 0x1cdc <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf6:	88 23       	and	r24, r24
    1bf8:	99 f5       	brne	.+102    	; 0x1c60 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfe:	64 81       	ldd	r22, Z+4	; 0x04
    1c00:	75 81       	ldd	r23, Z+5	; 0x05
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c08:	48 2f       	mov	r20, r24
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	cb 01       	movw	r24, r22
    1c12:	b9 01       	movw	r22, r18
    1c14:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1c18:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1c:	24 81       	ldd	r18, Z+4	; 0x04
    1c1e:	35 81       	ldd	r19, Z+5	; 0x05
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	82 0f       	add	r24, r18
    1c2c:	93 1f       	adc	r25, r19
    1c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c30:	fa 81       	ldd	r31, Y+2	; 0x02
    1c32:	95 83       	std	Z+5, r25	; 0x05
    1c34:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1c36:	e9 81       	ldd	r30, Y+1	; 0x01
    1c38:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3a:	24 81       	ldd	r18, Z+4	; 0x04
    1c3c:	35 81       	ldd	r19, Z+5	; 0x05
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	28 17       	cp	r18, r24
    1c48:	39 07       	cpc	r19, r25
    1c4a:	08 f4       	brcc	.+2      	; 0x1c4e <prvCopyDataToQueue+0x7e>
    1c4c:	47 c0       	rjmp	.+142    	; 0x1cdc <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	95 83       	std	Z+5, r25	; 0x05
    1c5c:	84 83       	std	Z+4, r24	; 0x04
    1c5e:	3e c0       	rjmp	.+124    	; 0x1cdc <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1c60:	e9 81       	ldd	r30, Y+1	; 0x01
    1c62:	fa 81       	ldd	r31, Y+2	; 0x02
    1c64:	66 81       	ldd	r22, Z+6	; 0x06
    1c66:	77 81       	ldd	r23, Z+7	; 0x07
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c6e:	48 2f       	mov	r20, r24
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	2b 81       	ldd	r18, Y+3	; 0x03
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	cb 01       	movw	r24, r22
    1c78:	b9 01       	movw	r22, r18
    1c7a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c80:	fa 81       	ldd	r31, Y+2	; 0x02
    1c82:	26 81       	ldd	r18, Z+6	; 0x06
    1c84:	37 81       	ldd	r19, Z+7	; 0x07
    1c86:	e9 81       	ldd	r30, Y+1	; 0x01
    1c88:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	90 95       	com	r25
    1c92:	81 95       	neg	r24
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	82 0f       	add	r24, r18
    1c98:	93 1f       	adc	r25, r19
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	97 83       	std	Z+7, r25	; 0x07
    1ca0:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca6:	26 81       	ldd	r18, Z+6	; 0x06
    1ca8:	37 81       	ldd	r19, Z+7	; 0x07
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	28 17       	cp	r18, r24
    1cb4:	39 07       	cpc	r19, r25
    1cb6:	90 f4       	brcc	.+36     	; 0x1cdc <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	22 81       	ldd	r18, Z+2	; 0x02
    1cbe:	33 81       	ldd	r19, Z+3	; 0x03
    1cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	90 95       	com	r25
    1ccc:	81 95       	neg	r24
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	82 0f       	add	r24, r18
    1cd2:	93 1f       	adc	r25, r19
    1cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd8:	97 83       	std	Z+7, r25	; 0x07
    1cda:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cde:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce8:	82 8f       	std	Z+26, r24	; 0x1a
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <prvCopyDataFromQueue+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <prvCopyDataFromQueue+0x8>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	7c 83       	std	Y+4, r23	; 0x04
    1d0c:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	89 f1       	breq	.+98     	; 0x1d7c <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1e:	26 81       	ldd	r18, Z+6	; 0x06
    1d20:	37 81       	ldd	r19, Z+7	; 0x07
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d28:	88 2f       	mov	r24, r24
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	82 0f       	add	r24, r18
    1d2e:	93 1f       	adc	r25, r19
    1d30:	e9 81       	ldd	r30, Y+1	; 0x01
    1d32:	fa 81       	ldd	r31, Y+2	; 0x02
    1d34:	97 83       	std	Z+7, r25	; 0x07
    1d36:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1d38:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3c:	26 81       	ldd	r18, Z+6	; 0x06
    1d3e:	37 81       	ldd	r19, Z+7	; 0x07
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	28 17       	cp	r18, r24
    1d4a:	39 07       	cpc	r19, r25
    1d4c:	40 f0       	brcs	.+16     	; 0x1d5e <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	97 83       	std	Z+7, r25	; 0x07
    1d5c:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    1d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d60:	fa 81       	ldd	r31, Y+2	; 0x02
    1d62:	46 81       	ldd	r20, Z+6	; 0x06
    1d64:	57 81       	ldd	r21, Z+7	; 0x07
    1d66:	e9 81       	ldd	r30, Y+1	; 0x01
    1d68:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	ba 01       	movw	r22, r20
    1d76:	a9 01       	movw	r20, r18
    1d78:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <memcpy>
	}
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <prvUnlockQueue+0x6>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	0f 92       	push	r0
    1d9e:	15 c0       	rjmp	.+42     	; 0x1dca <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	fa 81       	ldd	r31, Y+2	; 0x02
    1da4:	81 89       	ldd	r24, Z+17	; 0x11
    1da6:	88 23       	and	r24, r24
    1da8:	a9 f0       	breq	.+42     	; 0x1dd4 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	41 96       	adiw	r24, 0x11	; 17
    1db0:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xTaskRemoveFromEventList>
    1db4:	88 23       	and	r24, r24
    1db6:	11 f0       	breq	.+4      	; 0x1dbc <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1db8:	0e 94 db 14 	call	0x29b6	; 0x29b6 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dc2:	81 50       	subi	r24, 0x01	; 1
    1dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc8:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1dca:	e9 81       	ldd	r30, Y+1	; 0x01
    1dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dce:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dd0:	18 16       	cp	r1, r24
    1dd2:	34 f3       	brlt	.-52     	; 0x1da0 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1ddc:	0f 90       	pop	r0
    1dde:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	0f 92       	push	r0
    1de6:	15 c0       	rjmp	.+42     	; 0x1e12 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	80 85       	ldd	r24, Z+8	; 0x08
    1dee:	88 23       	and	r24, r24
    1df0:	a9 f0       	breq	.+42     	; 0x1e1c <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	08 96       	adiw	r24, 0x08	; 8
    1df8:	0e 94 fd 13 	call	0x27fa	; 0x27fa <xTaskRemoveFromEventList>
    1dfc:	88 23       	and	r24, r24
    1dfe:	11 f0       	breq	.+4      	; 0x1e04 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    1e00:	0e 94 db 14 	call	0x29b6	; 0x29b6 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e0a:	81 50       	subi	r24, 0x01	; 1
    1e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e10:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e18:	18 16       	cp	r1, r24
    1e1a:	34 f3       	brlt	.-52     	; 0x1de8 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e20:	8f ef       	ldi	r24, 0xFF	; 255
    1e22:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <prvIsQueueEmpty+0x6>
    1e38:	0f 92       	push	r0
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	9b 83       	std	Y+3, r25	; 0x03
    1e40:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1e48:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	88 23       	and	r24, r24
    1e52:	11 f4       	brne	.+4      	; 0x1e58 <prvIsQueueEmpty+0x26>
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <xQueueIsQueueEmptyFromISR+0x6>
    1e70:	0f 92       	push	r0
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	9b 83       	std	Y+3, r25	; 0x03
    1e78:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1e7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e80:	19 82       	std	Y+1, r1	; 0x01
    1e82:	88 23       	and	r24, r24
    1e84:	11 f4       	brne	.+4      	; 0x1e8a <xQueueIsQueueEmptyFromISR+0x20>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <prvIsQueueFull+0x6>
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	9b 83       	std	Y+3, r25	; 0x03
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1eae:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb8:	83 8d       	ldd	r24, Z+27	; 0x1b
    1eba:	19 82       	std	Y+1, r1	; 0x01
    1ebc:	98 17       	cp	r25, r24
    1ebe:	11 f4       	brne	.+4      	; 0x1ec4 <prvIsQueueFull+0x2c>
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1ec4:	0f 90       	pop	r0
    1ec6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <xQueueIsQueueFullFromISR+0x6>
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	9b 83       	std	Y+3, r25	; 0x03
    1ee4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1ee6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eea:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eec:	ea 81       	ldd	r30, Y+2	; 0x02
    1eee:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ef2:	19 82       	std	Y+1, r1	; 0x01
    1ef4:	98 17       	cp	r25, r24
    1ef6:	11 f4       	brne	.+4      	; 0x1efc <xQueueIsQueueFullFromISR+0x26>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1f0a:	af 92       	push	r10
    1f0c:	bf 92       	push	r11
    1f0e:	cf 92       	push	r12
    1f10:	df 92       	push	r13
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	64 97       	sbiw	r28, 0x14	; 20
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	9f 83       	std	Y+7, r25	; 0x07
    1f30:	8e 83       	std	Y+6, r24	; 0x06
    1f32:	79 87       	std	Y+9, r23	; 0x09
    1f34:	68 87       	std	Y+8, r22	; 0x08
    1f36:	5b 87       	std	Y+11, r21	; 0x0b
    1f38:	4a 87       	std	Y+10, r20	; 0x0a
    1f3a:	3d 87       	std	Y+13, r19	; 0x0d
    1f3c:	2c 87       	std	Y+12, r18	; 0x0c
    1f3e:	0e 87       	std	Y+14, r16	; 0x0e
    1f40:	f8 8a       	std	Y+16, r15	; 0x10
    1f42:	ef 86       	std	Y+15, r14	; 0x0f
    1f44:	da 8a       	std	Y+18, r13	; 0x12
    1f46:	c9 8a       	std	Y+17, r12	; 0x11
    1f48:	bc 8a       	std	Y+20, r11	; 0x14
    1f4a:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1f4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f50:	29 89       	ldd	r18, Y+17	; 0x11
    1f52:	3a 89       	ldd	r19, Y+18	; 0x12
    1f54:	b9 01       	movw	r22, r18
    1f56:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <prvAllocateTCBAndStack>
    1f5a:	9c 83       	std	Y+4, r25	; 0x04
    1f5c:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <xTaskGenericCreate+0x5e>
    1f66:	99 c0       	rjmp	.+306    	; 0x209a <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1f68:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6c:	27 89       	ldd	r18, Z+23	; 0x17
    1f6e:	30 8d       	ldd	r19, Z+24	; 0x18
    1f70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	82 0f       	add	r24, r18
    1f78:	93 1f       	adc	r25, r19
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	28 85       	ldd	r18, Y+8	; 0x08
    1f84:	39 85       	ldd	r19, Y+9	; 0x09
    1f86:	eb 89       	ldd	r30, Y+19	; 0x13
    1f88:	fc 89       	ldd	r31, Y+20	; 0x14
    1f8a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f8c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f8e:	b9 01       	movw	r22, r18
    1f90:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f92:	9f 01       	movw	r18, r30
    1f94:	8d 01       	movw	r16, r26
    1f96:	0e 94 ef 14 	call	0x29de	; 0x29de <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1fa0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fa2:	4c 85       	ldd	r20, Y+12	; 0x0c
    1fa4:	5d 85       	ldd	r21, Y+13	; 0x0d
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	0e 94 32 08 	call	0x1064	; 0x1064 <pxPortInitialiseStack>
    1fac:	eb 81       	ldd	r30, Y+3	; 0x03
    1fae:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb6:	98 89       	ldd	r25, Y+16	; 0x10
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1fbc:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fbe:	f8 89       	ldd	r31, Y+16	; 0x10
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1fce:	80 91 ff 02 	lds	r24, 0x02FF
    1fd2:	8f 5f       	subi	r24, 0xFF	; 255
    1fd4:	80 93 ff 02 	sts	0x02FF, r24
			if( pxCurrentTCB == NULL )
    1fd8:	80 91 fc 02 	lds	r24, 0x02FC
    1fdc:	90 91 fd 02 	lds	r25, 0x02FD
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	69 f4       	brne	.+26     	; 0x1ffe <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	90 93 fd 02 	sts	0x02FD, r25
    1fec:	80 93 fc 02 	sts	0x02FC, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1ff0:	80 91 ff 02 	lds	r24, 0x02FF
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	a9 f4       	brne	.+42     	; 0x2022 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1ff8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <prvInitialiseTaskLists>
    1ffc:	12 c0       	rjmp	.+36     	; 0x2022 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1ffe:	80 91 04 03 	lds	r24, 0x0304
    2002:	88 23       	and	r24, r24
    2004:	71 f4       	brne	.+28     	; 0x2022 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2006:	e0 91 fc 02 	lds	r30, 0x02FC
    200a:	f0 91 fd 02 	lds	r31, 0x02FD
    200e:	96 89       	ldd	r25, Z+22	; 0x16
    2010:	8e 85       	ldd	r24, Y+14	; 0x0e
    2012:	89 17       	cp	r24, r25
    2014:	30 f0       	brcs	.+12     	; 0x2022 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	90 93 fd 02 	sts	0x02FD, r25
    201e:	80 93 fc 02 	sts	0x02FC, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    2022:	eb 81       	ldd	r30, Y+3	; 0x03
    2024:	fc 81       	ldd	r31, Y+4	; 0x04
    2026:	96 89       	ldd	r25, Z+22	; 0x16
    2028:	80 91 02 03 	lds	r24, 0x0302
    202c:	89 17       	cp	r24, r25
    202e:	28 f4       	brcc	.+10     	; 0x203a <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2030:	eb 81       	ldd	r30, Y+3	; 0x03
    2032:	fc 81       	ldd	r31, Y+4	; 0x04
    2034:	86 89       	ldd	r24, Z+22	; 0x16
    2036:	80 93 02 03 	sts	0x0302, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    203a:	80 91 09 03 	lds	r24, 0x0309
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	80 93 09 03 	sts	0x0309, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    2044:	eb 81       	ldd	r30, Y+3	; 0x03
    2046:	fc 81       	ldd	r31, Y+4	; 0x04
    2048:	96 89       	ldd	r25, Z+22	; 0x16
    204a:	80 91 03 03 	lds	r24, 0x0303
    204e:	89 17       	cp	r24, r25
    2050:	28 f4       	brcc	.+10     	; 0x205c <xTaskGenericCreate+0x152>
    2052:	eb 81       	ldd	r30, Y+3	; 0x03
    2054:	fc 81       	ldd	r31, Y+4	; 0x04
    2056:	86 89       	ldd	r24, Z+22	; 0x16
    2058:	80 93 03 03 	sts	0x0303, r24
    205c:	eb 81       	ldd	r30, Y+3	; 0x03
    205e:	fc 81       	ldd	r31, Y+4	; 0x04
    2060:	86 89       	ldd	r24, Z+22	; 0x16
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	c9 01       	movw	r24, r18
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	82 0f       	add	r24, r18
    2076:	93 1f       	adc	r25, r19
    2078:	ac 01       	movw	r20, r24
    207a:	46 5f       	subi	r20, 0xF6	; 246
    207c:	5c 4f       	sbci	r21, 0xFC	; 252
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	9c 01       	movw	r18, r24
    2084:	2e 5f       	subi	r18, 0xFE	; 254
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	ca 01       	movw	r24, r20
    208a:	b9 01       	movw	r22, r18
    208c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

			xReturn = pdPASS;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2094:	0f 90       	pop	r0
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	02 c0       	rjmp	.+4      	; 0x209e <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    209a:	8f ef       	ldi	r24, 0xFF	; 255
    209c:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	71 f4       	brne	.+28     	; 0x20c0 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    20a4:	80 91 04 03 	lds	r24, 0x0304
    20a8:	88 23       	and	r24, r24
    20aa:	51 f0       	breq	.+20     	; 0x20c0 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    20ac:	e0 91 fc 02 	lds	r30, 0x02FC
    20b0:	f0 91 fd 02 	lds	r31, 0x02FD
    20b4:	96 89       	ldd	r25, Z+22	; 0x16
    20b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b8:	98 17       	cp	r25, r24
    20ba:	10 f4       	brcc	.+4      	; 0x20c0 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    20bc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
			}
		}
	}

	return xReturn;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20c2:	64 96       	adiw	r28, 0x14	; 20
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	df 90       	pop	r13
    20dc:	cf 90       	pop	r12
    20de:	bf 90       	pop	r11
    20e0:	af 90       	pop	r10
    20e2:	08 95       	ret

000020e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <vTaskDelete+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <vTaskDelete+0x8>
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <vTaskDelete+0xa>
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	9c 83       	std	Y+4, r25	; 0x04
    20f4:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    20fc:	20 91 fc 02 	lds	r18, 0x02FC
    2100:	30 91 fd 02 	lds	r19, 0x02FD
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	82 17       	cp	r24, r18
    210a:	93 07       	cpc	r25, r19
    210c:	11 f4       	brne	.+4      	; 0x2112 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    210e:	1c 82       	std	Y+4, r1	; 0x04
    2110:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	39 f4       	brne	.+14     	; 0x2128 <vTaskDelete+0x44>
    211a:	80 91 fc 02 	lds	r24, 0x02FC
    211e:	90 91 fd 02 	lds	r25, 0x02FD
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <vTaskDelete+0x4c>
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	02 96       	adiw	r24, 0x02	; 2
    213e:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	84 89       	ldd	r24, Z+20	; 0x14
    2148:	95 89       	ldd	r25, Z+21	; 0x15
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	29 f0       	breq	.+10     	; 0x2158 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	0c 96       	adiw	r24, 0x0c	; 12
    2154:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	9c 01       	movw	r18, r24
    215e:	2e 5f       	subi	r18, 0xFE	; 254
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	86 e5       	ldi	r24, 0x56	; 86
    2164:	93 e0       	ldi	r25, 0x03	; 3
    2166:	b9 01       	movw	r22, r18
    2168:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    216c:	80 91 fe 02 	lds	r24, 0x02FE
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	80 93 fe 02 	sts	0x02FE, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    2176:	80 91 09 03 	lds	r24, 0x0309
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	80 93 09 03 	sts	0x0309, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2180:	0f 90       	pop	r0
    2182:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    2184:	80 91 04 03 	lds	r24, 0x0304
    2188:	88 23       	and	r24, r24
    218a:	31 f0       	breq	.+12     	; 0x2198 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	11 f4       	brne	.+4      	; 0x2198 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    2194:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
			}
		}
	}
    2198:	26 96       	adiw	r28, 0x06	; 6
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	28 97       	sbiw	r28, 0x08	; 8
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	78 87       	std	Y+8, r23	; 0x08
    21c4:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    21c6:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    21c8:	0e 94 c1 11 	call	0x2382	; 0x2382 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    21cc:	ed 81       	ldd	r30, Y+5	; 0x05
    21ce:	fe 81       	ldd	r31, Y+6	; 0x06
    21d0:	20 81       	ld	r18, Z
    21d2:	31 81       	ldd	r19, Z+1	; 0x01
    21d4:	8f 81       	ldd	r24, Y+7	; 0x07
    21d6:	98 85       	ldd	r25, Y+8	; 0x08
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    21e0:	ed 81       	ldd	r30, Y+5	; 0x05
    21e2:	fe 81       	ldd	r31, Y+6	; 0x06
    21e4:	20 81       	ld	r18, Z
    21e6:	31 81       	ldd	r19, Z+1	; 0x01
    21e8:	80 91 00 03 	lds	r24, 0x0300
    21ec:	90 91 01 03 	lds	r25, 0x0301
    21f0:	82 17       	cp	r24, r18
    21f2:	93 07       	cpc	r25, r19
    21f4:	a8 f4       	brcc	.+42     	; 0x2220 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    21f6:	ed 81       	ldd	r30, Y+5	; 0x05
    21f8:	fe 81       	ldd	r31, Y+6	; 0x06
    21fa:	20 81       	ld	r18, Z
    21fc:	31 81       	ldd	r19, Z+1	; 0x01
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	82 17       	cp	r24, r18
    2204:	93 07       	cpc	r25, r19
    2206:	00 f5       	brcc	.+64     	; 0x2248 <vTaskDelayUntil+0x9e>
    2208:	20 91 00 03 	lds	r18, 0x0300
    220c:	30 91 01 03 	lds	r19, 0x0301
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	28 17       	cp	r18, r24
    2216:	39 07       	cpc	r19, r25
    2218:	b8 f4       	brcc	.+46     	; 0x2248 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2220:	ed 81       	ldd	r30, Y+5	; 0x05
    2222:	fe 81       	ldd	r31, Y+6	; 0x06
    2224:	20 81       	ld	r18, Z
    2226:	31 81       	ldd	r19, Z+1	; 0x01
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	82 17       	cp	r24, r18
    222e:	93 07       	cpc	r25, r19
    2230:	48 f0       	brcs	.+18     	; 0x2244 <vTaskDelayUntil+0x9a>
    2232:	20 91 00 03 	lds	r18, 0x0300
    2236:	30 91 01 03 	lds	r19, 0x0301
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	28 17       	cp	r18, r24
    2240:	39 07       	cpc	r19, r25
    2242:	10 f4       	brcc	.+4      	; 0x2248 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2248:	ed 81       	ldd	r30, Y+5	; 0x05
    224a:	fe 81       	ldd	r31, Y+6	; 0x06
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	88 23       	and	r24, r24
    2258:	59 f0       	breq	.+22     	; 0x2270 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    225a:	80 91 fc 02 	lds	r24, 0x02FC
    225e:	90 91 fd 02 	lds	r25, 0x02FD
    2262:	02 96       	adiw	r24, 0x02	; 2
    2264:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2270:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
    2274:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	88 23       	and	r24, r24
    227a:	11 f4       	brne	.+4      	; 0x2280 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    227c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
		}
	}
    2280:	28 96       	adiw	r28, 0x08	; 8
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <vTaskDelay+0x6>
    2298:	00 d0       	rcall	.+0      	; 0x229a <vTaskDelay+0x8>
    229a:	0f 92       	push	r0
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	9d 83       	std	Y+5, r25	; 0x05
    22a2:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    22a4:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	9d 81       	ldd	r25, Y+5	; 0x05
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	d1 f0       	breq	.+52     	; 0x22e2 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    22ae:	0e 94 c1 11 	call	0x2382	; 0x2382 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    22b2:	20 91 00 03 	lds	r18, 0x0300
    22b6:	30 91 01 03 	lds	r19, 0x0301
    22ba:	8c 81       	ldd	r24, Y+4	; 0x04
    22bc:	9d 81       	ldd	r25, Y+5	; 0x05
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	9b 83       	std	Y+3, r25	; 0x03
    22c4:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    22c6:	80 91 fc 02 	lds	r24, 0x02FC
    22ca:	90 91 fd 02 	lds	r25, 0x02FD
    22ce:	02 96       	adiw	r24, 0x02	; 2
    22d0:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	9b 81       	ldd	r25, Y+3	; 0x03
    22d8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    22dc:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>
    22e0:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	88 23       	and	r24, r24
    22e6:	11 f4       	brne	.+4      	; 0x22ec <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    22e8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
		}
	}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    22fc:	af 92       	push	r10
    22fe:	bf 92       	push	r11
    2300:	cf 92       	push	r12
    2302:	df 92       	push	r13
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	0f 93       	push	r16
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	0f 92       	push	r0
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    2314:	20 e6       	ldi	r18, 0x60	; 96
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	85 ee       	ldi	r24, 0xE5	; 229
    231a:	94 e1       	ldi	r25, 0x14	; 20
    231c:	b9 01       	movw	r22, r18
    231e:	45 e5       	ldi	r20, 0x55	; 85
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	00 e0       	ldi	r16, 0x00	; 0
    2328:	ee 24       	eor	r14, r14
    232a:	ff 24       	eor	r15, r15
    232c:	cc 24       	eor	r12, r12
    232e:	dd 24       	eor	r13, r13
    2330:	aa 24       	eor	r10, r10
    2332:	bb 24       	eor	r11, r11
    2334:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <xTaskGenericCreate>
    2338:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	51 f4       	brne	.+20     	; 0x2354 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    2340:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	80 93 04 03 	sts	0x0304, r24
		xTickCount = ( portTickType ) 0U;
    2348:	10 92 01 03 	sts	0x0301, r1
    234c:	10 92 00 03 	sts	0x0300, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2350:	0e 94 b5 09 	call	0x136a	; 0x136a <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	af 90       	pop	r10
    2368:	08 95       	ret

0000236a <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2372:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2374:	10 92 04 03 	sts	0x0304, r1
	vPortEndScheduler();
    2378:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <vPortEndScheduler>
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    238a:	80 91 05 03 	lds	r24, 0x0305
    238e:	8f 5f       	subi	r24, 0xFF	; 255
    2390:	80 93 05 03 	sts	0x0305, r24
}
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <xTaskResumeAll+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <xTaskResumeAll+0x8>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    23a6:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    23ae:	80 91 05 03 	lds	r24, 0x0305
    23b2:	81 50       	subi	r24, 0x01	; 1
    23b4:	80 93 05 03 	sts	0x0305, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    23b8:	80 91 05 03 	lds	r24, 0x0305
    23bc:	88 23       	and	r24, r24
    23be:	09 f0       	breq	.+2      	; 0x23c2 <xTaskResumeAll+0x28>
    23c0:	6c c0       	rjmp	.+216    	; 0x249a <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    23c2:	80 91 ff 02 	lds	r24, 0x02FF
    23c6:	88 23       	and	r24, r24
    23c8:	09 f4       	brne	.+2      	; 0x23cc <xTaskResumeAll+0x32>
    23ca:	67 c0       	rjmp	.+206    	; 0x249a <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    23cc:	19 82       	std	Y+1, r1	; 0x01
    23ce:	41 c0       	rjmp	.+130    	; 0x2452 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    23d0:	e0 91 52 03 	lds	r30, 0x0352
    23d4:	f0 91 53 03 	lds	r31, 0x0353
    23d8:	86 81       	ldd	r24, Z+6	; 0x06
    23da:	97 81       	ldd	r25, Z+7	; 0x07
    23dc:	9c 83       	std	Y+4, r25	; 0x04
    23de:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	0c 96       	adiw	r24, 0x0c	; 12
    23e6:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	02 96       	adiw	r24, 0x02	; 2
    23f0:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	96 89       	ldd	r25, Z+22	; 0x16
    23fa:	80 91 03 03 	lds	r24, 0x0303
    23fe:	89 17       	cp	r24, r25
    2400:	28 f4       	brcc	.+10     	; 0x240c <xTaskResumeAll+0x72>
    2402:	eb 81       	ldd	r30, Y+3	; 0x03
    2404:	fc 81       	ldd	r31, Y+4	; 0x04
    2406:	86 89       	ldd	r24, Z+22	; 0x16
    2408:	80 93 03 03 	sts	0x0303, r24
    240c:	eb 81       	ldd	r30, Y+3	; 0x03
    240e:	fc 81       	ldd	r31, Y+4	; 0x04
    2410:	86 89       	ldd	r24, Z+22	; 0x16
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	c9 01       	movw	r24, r18
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	86 5f       	subi	r24, 0xF6	; 246
    242a:	9c 4f       	sbci	r25, 0xFC	; 252
    242c:	2b 81       	ldd	r18, Y+3	; 0x03
    242e:	3c 81       	ldd	r19, Y+4	; 0x04
    2430:	2e 5f       	subi	r18, 0xFE	; 254
    2432:	3f 4f       	sbci	r19, 0xFF	; 255
    2434:	b9 01       	movw	r22, r18
    2436:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    243a:	eb 81       	ldd	r30, Y+3	; 0x03
    243c:	fc 81       	ldd	r31, Y+4	; 0x04
    243e:	96 89       	ldd	r25, Z+22	; 0x16
    2440:	e0 91 fc 02 	lds	r30, 0x02FC
    2444:	f0 91 fd 02 	lds	r31, 0x02FD
    2448:	86 89       	ldd	r24, Z+22	; 0x16
    244a:	98 17       	cp	r25, r24
    244c:	10 f0       	brcs	.+4      	; 0x2452 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2452:	80 91 4d 03 	lds	r24, 0x034D
    2456:	88 23       	and	r24, r24
    2458:	09 f0       	breq	.+2      	; 0x245c <xTaskResumeAll+0xc2>
    245a:	ba cf       	rjmp	.-140    	; 0x23d0 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    245c:	80 91 06 03 	lds	r24, 0x0306
    2460:	88 23       	and	r24, r24
    2462:	71 f0       	breq	.+28     	; 0x2480 <xTaskResumeAll+0xe6>
    2464:	07 c0       	rjmp	.+14     	; 0x2474 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2466:	0e 94 8c 12 	call	0x2518	; 0x2518 <vTaskIncrementTick>
						--uxMissedTicks;
    246a:	80 91 06 03 	lds	r24, 0x0306
    246e:	81 50       	subi	r24, 0x01	; 1
    2470:	80 93 06 03 	sts	0x0306, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2474:	80 91 06 03 	lds	r24, 0x0306
    2478:	88 23       	and	r24, r24
    247a:	a9 f7       	brne	.-22     	; 0x2466 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	21 f0       	breq	.+8      	; 0x248e <xTaskResumeAll+0xf4>
    2486:	80 91 07 03 	lds	r24, 0x0307
    248a:	81 30       	cpi	r24, 0x01	; 1
    248c:	31 f4       	brne	.+12     	; 0x249a <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2492:	10 92 07 03 	sts	0x0307, r1
					portYIELD_WITHIN_API();
    2496:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    249a:	0f 90       	pop	r0
    249c:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <xTaskGetTickCount+0x6>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    24be:	80 91 00 03 	lds	r24, 0x0300
    24c2:	90 91 01 03 	lds	r25, 0x0301
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    24ca:	0f 90       	pop	r0
    24cc:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <xTaskGetTickCountFromISR+0x6>
    24e2:	0f 92       	push	r0
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    24e8:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    24ea:	80 91 00 03 	lds	r24, 0x0300
    24ee:	90 91 01 03 	lds	r25, 0x0301
    24f2:	9b 83       	std	Y+3, r25	; 0x03
    24f4:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	9b 81       	ldd	r25, Y+3	; 0x03
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    250e:	80 91 ff 02 	lds	r24, 0x02FF
}
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	00 d0       	rcall	.+0      	; 0x251e <vTaskIncrementTick+0x6>
    251e:	00 d0       	rcall	.+0      	; 0x2520 <vTaskIncrementTick+0x8>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <vTaskIncrementTick+0xa>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2526:	80 91 05 03 	lds	r24, 0x0305
    252a:	88 23       	and	r24, r24
    252c:	09 f0       	breq	.+2      	; 0x2530 <vTaskIncrementTick+0x18>
    252e:	bb c0       	rjmp	.+374    	; 0x26a6 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    2530:	80 91 00 03 	lds	r24, 0x0300
    2534:	90 91 01 03 	lds	r25, 0x0301
    2538:	01 96       	adiw	r24, 0x01	; 1
    253a:	90 93 01 03 	sts	0x0301, r25
    253e:	80 93 00 03 	sts	0x0300, r24
		if( xTickCount == ( portTickType ) 0U )
    2542:	80 91 00 03 	lds	r24, 0x0300
    2546:	90 91 01 03 	lds	r25, 0x0301
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	d1 f5       	brne	.+116    	; 0x25c2 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    254e:	80 91 49 03 	lds	r24, 0x0349
    2552:	90 91 4a 03 	lds	r25, 0x034A
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    255a:	80 91 4b 03 	lds	r24, 0x034B
    255e:	90 91 4c 03 	lds	r25, 0x034C
    2562:	90 93 4a 03 	sts	0x034A, r25
    2566:	80 93 49 03 	sts	0x0349, r24
			pxOverflowDelayedTaskList = pxTemp;
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	9c 81       	ldd	r25, Y+4	; 0x04
    256e:	90 93 4c 03 	sts	0x034C, r25
    2572:	80 93 4b 03 	sts	0x034B, r24
			xNumOfOverflows++;
    2576:	80 91 08 03 	lds	r24, 0x0308
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	80 93 08 03 	sts	0x0308, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2580:	e0 91 49 03 	lds	r30, 0x0349
    2584:	f0 91 4a 03 	lds	r31, 0x034A
    2588:	80 81       	ld	r24, Z
    258a:	88 23       	and	r24, r24
    258c:	39 f4       	brne	.+14     	; 0x259c <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	9f ef       	ldi	r25, 0xFF	; 255
    2592:	90 93 66 00 	sts	0x0066, r25
    2596:	80 93 65 00 	sts	0x0065, r24
    259a:	13 c0       	rjmp	.+38     	; 0x25c2 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    259c:	e0 91 49 03 	lds	r30, 0x0349
    25a0:	f0 91 4a 03 	lds	r31, 0x034A
    25a4:	05 80       	ldd	r0, Z+5	; 0x05
    25a6:	f6 81       	ldd	r31, Z+6	; 0x06
    25a8:	e0 2d       	mov	r30, r0
    25aa:	86 81       	ldd	r24, Z+6	; 0x06
    25ac:	97 81       	ldd	r25, Z+7	; 0x07
    25ae:	9e 83       	std	Y+6, r25	; 0x06
    25b0:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    25b2:	ed 81       	ldd	r30, Y+5	; 0x05
    25b4:	fe 81       	ldd	r31, Y+6	; 0x06
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	90 93 66 00 	sts	0x0066, r25
    25be:	80 93 65 00 	sts	0x0065, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    25c2:	20 91 00 03 	lds	r18, 0x0300
    25c6:	30 91 01 03 	lds	r19, 0x0301
    25ca:	80 91 65 00 	lds	r24, 0x0065
    25ce:	90 91 66 00 	lds	r25, 0x0066
    25d2:	28 17       	cp	r18, r24
    25d4:	39 07       	cpc	r19, r25
    25d6:	08 f4       	brcc	.+2      	; 0x25da <vTaskIncrementTick+0xc2>
    25d8:	6b c0       	rjmp	.+214    	; 0x26b0 <vTaskIncrementTick+0x198>
    25da:	e0 91 49 03 	lds	r30, 0x0349
    25de:	f0 91 4a 03 	lds	r31, 0x034A
    25e2:	80 81       	ld	r24, Z
    25e4:	88 23       	and	r24, r24
    25e6:	39 f4       	brne	.+14     	; 0x25f6 <vTaskIncrementTick+0xde>
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    25ea:	9f ef       	ldi	r25, 0xFF	; 255
    25ec:	90 93 66 00 	sts	0x0066, r25
    25f0:	80 93 65 00 	sts	0x0065, r24
    25f4:	5d c0       	rjmp	.+186    	; 0x26b0 <vTaskIncrementTick+0x198>
    25f6:	e0 91 49 03 	lds	r30, 0x0349
    25fa:	f0 91 4a 03 	lds	r31, 0x034A
    25fe:	05 80       	ldd	r0, Z+5	; 0x05
    2600:	f6 81       	ldd	r31, Z+6	; 0x06
    2602:	e0 2d       	mov	r30, r0
    2604:	86 81       	ldd	r24, Z+6	; 0x06
    2606:	97 81       	ldd	r25, Z+7	; 0x07
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	ed 81       	ldd	r30, Y+5	; 0x05
    260e:	fe 81       	ldd	r31, Y+6	; 0x06
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	20 91 00 03 	lds	r18, 0x0300
    261c:	30 91 01 03 	lds	r19, 0x0301
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	28 17       	cp	r18, r24
    2626:	39 07       	cpc	r19, r25
    2628:	38 f4       	brcc	.+14     	; 0x2638 <vTaskIncrementTick+0x120>
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	90 93 66 00 	sts	0x0066, r25
    2632:	80 93 65 00 	sts	0x0065, r24
    2636:	3c c0       	rjmp	.+120    	; 0x26b0 <vTaskIncrementTick+0x198>
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	9e 81       	ldd	r25, Y+6	; 0x06
    263c:	02 96       	adiw	r24, 0x02	; 2
    263e:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
    2642:	ed 81       	ldd	r30, Y+5	; 0x05
    2644:	fe 81       	ldd	r31, Y+6	; 0x06
    2646:	84 89       	ldd	r24, Z+20	; 0x14
    2648:	95 89       	ldd	r25, Z+21	; 0x15
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	29 f0       	breq	.+10     	; 0x2658 <vTaskIncrementTick+0x140>
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	0c 96       	adiw	r24, 0x0c	; 12
    2654:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
    2658:	ed 81       	ldd	r30, Y+5	; 0x05
    265a:	fe 81       	ldd	r31, Y+6	; 0x06
    265c:	96 89       	ldd	r25, Z+22	; 0x16
    265e:	80 91 03 03 	lds	r24, 0x0303
    2662:	89 17       	cp	r24, r25
    2664:	28 f4       	brcc	.+10     	; 0x2670 <vTaskIncrementTick+0x158>
    2666:	ed 81       	ldd	r30, Y+5	; 0x05
    2668:	fe 81       	ldd	r31, Y+6	; 0x06
    266a:	86 89       	ldd	r24, Z+22	; 0x16
    266c:	80 93 03 03 	sts	0x0303, r24
    2670:	ed 81       	ldd	r30, Y+5	; 0x05
    2672:	fe 81       	ldd	r31, Y+6	; 0x06
    2674:	86 89       	ldd	r24, Z+22	; 0x16
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	c9 01       	movw	r24, r18
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	82 0f       	add	r24, r18
    268a:	93 1f       	adc	r25, r19
    268c:	ac 01       	movw	r20, r24
    268e:	46 5f       	subi	r20, 0xF6	; 246
    2690:	5c 4f       	sbci	r21, 0xFC	; 252
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	9c 01       	movw	r18, r24
    2698:	2e 5f       	subi	r18, 0xFE	; 254
    269a:	3f 4f       	sbci	r19, 0xFF	; 255
    269c:	ca 01       	movw	r24, r20
    269e:	b9 01       	movw	r22, r18
    26a0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
    26a4:	9a cf       	rjmp	.-204    	; 0x25da <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    26a6:	80 91 06 03 	lds	r24, 0x0306
    26aa:	8f 5f       	subi	r24, 0xFF	; 255
    26ac:	80 93 06 03 	sts	0x0306, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    26b0:	26 96       	adiw	r28, 0x06	; 6
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <vTaskSwitchContext+0x6>
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    26cc:	80 91 05 03 	lds	r24, 0x0305
    26d0:	88 23       	and	r24, r24
    26d2:	49 f0       	breq	.+18     	; 0x26e6 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	80 93 07 03 	sts	0x0307, r24
    26da:	54 c0       	rjmp	.+168    	; 0x2784 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    26dc:	80 91 03 03 	lds	r24, 0x0303
    26e0:	81 50       	subi	r24, 0x01	; 1
    26e2:	80 93 03 03 	sts	0x0303, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    26e6:	80 91 03 03 	lds	r24, 0x0303
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	c9 01       	movw	r24, r18
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	82 0f       	add	r24, r18
    26fe:	93 1f       	adc	r25, r19
    2700:	fc 01       	movw	r30, r24
    2702:	e6 5f       	subi	r30, 0xF6	; 246
    2704:	fc 4f       	sbci	r31, 0xFC	; 252
    2706:	80 81       	ld	r24, Z
    2708:	88 23       	and	r24, r24
    270a:	41 f3       	breq	.-48     	; 0x26dc <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    270c:	80 91 03 03 	lds	r24, 0x0303
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	c9 01       	movw	r24, r18
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	82 0f       	add	r24, r18
    2724:	93 1f       	adc	r25, r19
    2726:	86 5f       	subi	r24, 0xF6	; 246
    2728:	9c 4f       	sbci	r25, 0xFC	; 252
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	e9 81       	ldd	r30, Y+1	; 0x01
    2730:	fa 81       	ldd	r31, Y+2	; 0x02
    2732:	01 80       	ldd	r0, Z+1	; 0x01
    2734:	f2 81       	ldd	r31, Z+2	; 0x02
    2736:	e0 2d       	mov	r30, r0
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	e9 81       	ldd	r30, Y+1	; 0x01
    273e:	fa 81       	ldd	r31, Y+2	; 0x02
    2740:	92 83       	std	Z+2, r25	; 0x02
    2742:	81 83       	std	Z+1, r24	; 0x01
    2744:	e9 81       	ldd	r30, Y+1	; 0x01
    2746:	fa 81       	ldd	r31, Y+2	; 0x02
    2748:	21 81       	ldd	r18, Z+1	; 0x01
    274a:	32 81       	ldd	r19, Z+2	; 0x02
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	03 96       	adiw	r24, 0x03	; 3
    2752:	28 17       	cp	r18, r24
    2754:	39 07       	cpc	r19, r25
    2756:	59 f4       	brne	.+22     	; 0x276e <vTaskSwitchContext+0xac>
    2758:	e9 81       	ldd	r30, Y+1	; 0x01
    275a:	fa 81       	ldd	r31, Y+2	; 0x02
    275c:	01 80       	ldd	r0, Z+1	; 0x01
    275e:	f2 81       	ldd	r31, Z+2	; 0x02
    2760:	e0 2d       	mov	r30, r0
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	e9 81       	ldd	r30, Y+1	; 0x01
    2768:	fa 81       	ldd	r31, Y+2	; 0x02
    276a:	92 83       	std	Z+2, r25	; 0x02
    276c:	81 83       	std	Z+1, r24	; 0x01
    276e:	e9 81       	ldd	r30, Y+1	; 0x01
    2770:	fa 81       	ldd	r31, Y+2	; 0x02
    2772:	01 80       	ldd	r0, Z+1	; 0x01
    2774:	f2 81       	ldd	r31, Z+2	; 0x02
    2776:	e0 2d       	mov	r30, r0
    2778:	86 81       	ldd	r24, Z+6	; 0x06
    277a:	97 81       	ldd	r25, Z+7	; 0x07
    277c:	90 93 fd 02 	sts	0x02FD, r25
    2780:	80 93 fc 02 	sts	0x02FC, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <vTaskPlaceOnEventList+0x6>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <vTaskPlaceOnEventList+0x8>
    2796:	00 d0       	rcall	.+0      	; 0x2798 <vTaskPlaceOnEventList+0xa>
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	9c 83       	std	Y+4, r25	; 0x04
    279e:	8b 83       	std	Y+3, r24	; 0x03
    27a0:	7e 83       	std	Y+6, r23	; 0x06
    27a2:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    27a4:	4b 81       	ldd	r20, Y+3	; 0x03
    27a6:	5c 81       	ldd	r21, Y+4	; 0x04
    27a8:	80 91 fc 02 	lds	r24, 0x02FC
    27ac:	90 91 fd 02 	lds	r25, 0x02FD
    27b0:	9c 01       	movw	r18, r24
    27b2:	24 5f       	subi	r18, 0xF4	; 244
    27b4:	3f 4f       	sbci	r19, 0xFF	; 255
    27b6:	ca 01       	movw	r24, r20
    27b8:	b9 01       	movw	r22, r18
    27ba:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    27be:	80 91 fc 02 	lds	r24, 0x02FC
    27c2:	90 91 fd 02 	lds	r25, 0x02FD
    27c6:	02 96       	adiw	r24, 0x02	; 2
    27c8:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    27cc:	20 91 00 03 	lds	r18, 0x0300
    27d0:	30 91 01 03 	lds	r19, 0x0301
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	82 0f       	add	r24, r18
    27da:	93 1f       	adc	r25, r19
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    27e8:	26 96       	adiw	r28, 0x06	; 6
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <xTaskRemoveFromEventList+0x6>
    2800:	00 d0       	rcall	.+0      	; 0x2802 <xTaskRemoveFromEventList+0x8>
    2802:	0f 92       	push	r0
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	9d 83       	std	Y+5, r25	; 0x05
    280a:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    280c:	ec 81       	ldd	r30, Y+4	; 0x04
    280e:	fd 81       	ldd	r31, Y+5	; 0x05
    2810:	05 80       	ldd	r0, Z+5	; 0x05
    2812:	f6 81       	ldd	r31, Z+6	; 0x06
    2814:	e0 2d       	mov	r30, r0
    2816:	86 81       	ldd	r24, Z+6	; 0x06
    2818:	97 81       	ldd	r25, Z+7	; 0x07
    281a:	9b 83       	std	Y+3, r25	; 0x03
    281c:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	0c 96       	adiw	r24, 0x0c	; 12
    2824:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2828:	80 91 05 03 	lds	r24, 0x0305
    282c:	88 23       	and	r24, r24
    282e:	61 f5       	brne	.+88     	; 0x2888 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	9b 81       	ldd	r25, Y+3	; 0x03
    2834:	02 96       	adiw	r24, 0x02	; 2
    2836:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    283a:	ea 81       	ldd	r30, Y+2	; 0x02
    283c:	fb 81       	ldd	r31, Y+3	; 0x03
    283e:	96 89       	ldd	r25, Z+22	; 0x16
    2840:	80 91 03 03 	lds	r24, 0x0303
    2844:	89 17       	cp	r24, r25
    2846:	28 f4       	brcc	.+10     	; 0x2852 <xTaskRemoveFromEventList+0x58>
    2848:	ea 81       	ldd	r30, Y+2	; 0x02
    284a:	fb 81       	ldd	r31, Y+3	; 0x03
    284c:	86 89       	ldd	r24, Z+22	; 0x16
    284e:	80 93 03 03 	sts	0x0303, r24
    2852:	ea 81       	ldd	r30, Y+2	; 0x02
    2854:	fb 81       	ldd	r31, Y+3	; 0x03
    2856:	86 89       	ldd	r24, Z+22	; 0x16
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	c9 01       	movw	r24, r18
    285e:	88 0f       	add	r24, r24
    2860:	99 1f       	adc	r25, r25
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	82 0f       	add	r24, r18
    286c:	93 1f       	adc	r25, r19
    286e:	ac 01       	movw	r20, r24
    2870:	46 5f       	subi	r20, 0xF6	; 246
    2872:	5c 4f       	sbci	r21, 0xFC	; 252
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	9b 81       	ldd	r25, Y+3	; 0x03
    2878:	9c 01       	movw	r18, r24
    287a:	2e 5f       	subi	r18, 0xFE	; 254
    287c:	3f 4f       	sbci	r19, 0xFF	; 255
    287e:	ca 01       	movw	r24, r20
    2880:	b9 01       	movw	r22, r18
    2882:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
    2886:	0a c0       	rjmp	.+20     	; 0x289c <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	9b 81       	ldd	r25, Y+3	; 0x03
    288c:	9c 01       	movw	r18, r24
    288e:	24 5f       	subi	r18, 0xF4	; 244
    2890:	3f 4f       	sbci	r19, 0xFF	; 255
    2892:	8d e4       	ldi	r24, 0x4D	; 77
    2894:	93 e0       	ldi	r25, 0x03	; 3
    2896:	b9 01       	movw	r22, r18
    2898:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    289c:	ea 81       	ldd	r30, Y+2	; 0x02
    289e:	fb 81       	ldd	r31, Y+3	; 0x03
    28a0:	96 89       	ldd	r25, Z+22	; 0x16
    28a2:	e0 91 fc 02 	lds	r30, 0x02FC
    28a6:	f0 91 fd 02 	lds	r31, 0x02FD
    28aa:	86 89       	ldd	r24, Z+22	; 0x16
    28ac:	98 17       	cp	r25, r24
    28ae:	18 f0       	brcs	.+6      	; 0x28b6 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	01 c0       	rjmp	.+2      	; 0x28b8 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    28b6:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <vTaskSetTimeOutState+0x6>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    28d8:	80 91 08 03 	lds	r24, 0x0308
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    28e2:	80 91 00 03 	lds	r24, 0x0300
    28e6:	90 91 01 03 	lds	r25, 0x0301
    28ea:	e9 81       	ldd	r30, Y+1	; 0x01
    28ec:	fa 81       	ldd	r31, Y+2	; 0x02
    28ee:	92 83       	std	Z+2, r25	; 0x02
    28f0:	81 83       	std	Z+1, r24	; 0x01
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	00 d0       	rcall	.+0      	; 0x2902 <xTaskCheckForTimeOut+0x6>
    2902:	00 d0       	rcall	.+0      	; 0x2904 <xTaskCheckForTimeOut+0x8>
    2904:	0f 92       	push	r0
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9b 83       	std	Y+3, r25	; 0x03
    290c:	8a 83       	std	Y+2, r24	; 0x02
    290e:	7d 83       	std	Y+5, r23	; 0x05
    2910:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2918:	ea 81       	ldd	r30, Y+2	; 0x02
    291a:	fb 81       	ldd	r31, Y+3	; 0x03
    291c:	90 81       	ld	r25, Z
    291e:	80 91 08 03 	lds	r24, 0x0308
    2922:	98 17       	cp	r25, r24
    2924:	71 f0       	breq	.+28     	; 0x2942 <xTaskCheckForTimeOut+0x46>
    2926:	ea 81       	ldd	r30, Y+2	; 0x02
    2928:	fb 81       	ldd	r31, Y+3	; 0x03
    292a:	21 81       	ldd	r18, Z+1	; 0x01
    292c:	32 81       	ldd	r19, Z+2	; 0x02
    292e:	80 91 00 03 	lds	r24, 0x0300
    2932:	90 91 01 03 	lds	r25, 0x0301
    2936:	82 17       	cp	r24, r18
    2938:	93 07       	cpc	r25, r19
    293a:	18 f0       	brcs	.+6      	; 0x2942 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	2f c0       	rjmp	.+94     	; 0x29a0 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2942:	20 91 00 03 	lds	r18, 0x0300
    2946:	30 91 01 03 	lds	r19, 0x0301
    294a:	ea 81       	ldd	r30, Y+2	; 0x02
    294c:	fb 81       	ldd	r31, Y+3	; 0x03
    294e:	81 81       	ldd	r24, Z+1	; 0x01
    2950:	92 81       	ldd	r25, Z+2	; 0x02
    2952:	28 1b       	sub	r18, r24
    2954:	39 0b       	sbc	r19, r25
    2956:	ec 81       	ldd	r30, Y+4	; 0x04
    2958:	fd 81       	ldd	r31, Y+5	; 0x05
    295a:	80 81       	ld	r24, Z
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	28 17       	cp	r18, r24
    2960:	39 07       	cpc	r19, r25
    2962:	e0 f4       	brcc	.+56     	; 0x299c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2964:	ec 81       	ldd	r30, Y+4	; 0x04
    2966:	fd 81       	ldd	r31, Y+5	; 0x05
    2968:	40 81       	ld	r20, Z
    296a:	51 81       	ldd	r21, Z+1	; 0x01
    296c:	ea 81       	ldd	r30, Y+2	; 0x02
    296e:	fb 81       	ldd	r31, Y+3	; 0x03
    2970:	21 81       	ldd	r18, Z+1	; 0x01
    2972:	32 81       	ldd	r19, Z+2	; 0x02
    2974:	80 91 00 03 	lds	r24, 0x0300
    2978:	90 91 01 03 	lds	r25, 0x0301
    297c:	b9 01       	movw	r22, r18
    297e:	68 1b       	sub	r22, r24
    2980:	79 0b       	sbc	r23, r25
    2982:	cb 01       	movw	r24, r22
    2984:	84 0f       	add	r24, r20
    2986:	95 1f       	adc	r25, r21
    2988:	ec 81       	ldd	r30, Y+4	; 0x04
    298a:	fd 81       	ldd	r31, Y+5	; 0x05
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	9b 81       	ldd	r25, Y+3	; 0x03
    2994:	0e 94 65 14 	call	0x28ca	; 0x28ca <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2998:	19 82       	std	Y+1, r1	; 0x01
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    29a0:	0f 90       	pop	r0
    29a2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	80 93 07 03 	sts	0x0307, r24
}
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <prvIdleTask+0x6>
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	9a 83       	std	Y+2, r25	; 0x02
    29d6:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    29d8:	0e 94 83 15 	call	0x2b06	; 0x2b06 <prvCheckTasksWaitingTermination>
    29dc:	fd cf       	rjmp	.-6      	; 0x29d8 <prvIdleTask+0xe>

000029de <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	29 97       	sbiw	r28, 0x09	; 9
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	7c 83       	std	Y+4, r23	; 0x04
    29fc:	6b 83       	std	Y+3, r22	; 0x03
    29fe:	4d 83       	std	Y+5, r20	; 0x05
    2a00:	3f 83       	std	Y+7, r19	; 0x07
    2a02:	2e 83       	std	Y+6, r18	; 0x06
    2a04:	19 87       	std	Y+9, r17	; 0x09
    2a06:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0c:	49 96       	adiw	r24, 0x19	; 25
    2a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a10:	3c 81       	ldd	r19, Y+4	; 0x04
    2a12:	b9 01       	movw	r22, r18
    2a14:	48 e0       	ldi	r20, 0x08	; 8
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	85 30       	cpi	r24, 0x05	; 5
    2a26:	10 f0       	brcs	.+4      	; 0x2a2c <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    2a28:	84 e0       	ldi	r24, 0x04	; 4
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    2a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	02 96       	adiw	r24, 0x02	; 2
    2a3a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	9a 81       	ldd	r25, Y+2	; 0x02
    2a42:	0c 96       	adiw	r24, 0x0c	; 12
    2a44:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	91 87       	std	Z+9, r25	; 0x09
    2a52:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	85 e0       	ldi	r24, 0x05	; 5
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	82 1b       	sub	r24, r18
    2a60:	93 0b       	sbc	r25, r19
    2a62:	e9 81       	ldd	r30, Y+1	; 0x01
    2a64:	fa 81       	ldd	r31, Y+2	; 0x02
    2a66:	95 87       	std	Z+13, r25	; 0x0d
    2a68:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	93 8b       	std	Z+19, r25	; 0x13
    2a74:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2a76:	29 96       	adiw	r28, 0x09	; 9
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	08 95       	ret

00002a8c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	0f 92       	push	r0
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2a96:	19 82       	std	Y+1, r1	; 0x01
    2a98:	13 c0       	rjmp	.+38     	; 0x2ac0 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	c9 01       	movw	r24, r18
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	82 0f       	add	r24, r18
    2ab0:	93 1f       	adc	r25, r19
    2ab2:	86 5f       	subi	r24, 0xF6	; 246
    2ab4:	9c 4f       	sbci	r25, 0xFC	; 252
    2ab6:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	85 30       	cpi	r24, 0x05	; 5
    2ac4:	50 f3       	brcs	.-44     	; 0x2a9a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2ac6:	87 e3       	ldi	r24, 0x37	; 55
    2ac8:	93 e0       	ldi	r25, 0x03	; 3
    2aca:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    2ace:	80 e4       	ldi	r24, 0x40	; 64
    2ad0:	93 e0       	ldi	r25, 0x03	; 3
    2ad2:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2ad6:	8d e4       	ldi	r24, 0x4D	; 77
    2ad8:	93 e0       	ldi	r25, 0x03	; 3
    2ada:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    2ade:	86 e5       	ldi	r24, 0x56	; 86
    2ae0:	93 e0       	ldi	r25, 0x03	; 3
    2ae2:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2ae6:	87 e3       	ldi	r24, 0x37	; 55
    2ae8:	93 e0       	ldi	r25, 0x03	; 3
    2aea:	90 93 4a 03 	sts	0x034A, r25
    2aee:	80 93 49 03 	sts	0x0349, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2af2:	80 e4       	ldi	r24, 0x40	; 64
    2af4:	93 e0       	ldi	r25, 0x03	; 3
    2af6:	90 93 4c 03 	sts	0x034C, r25
    2afa:	80 93 4b 03 	sts	0x034B, r24
}
    2afe:	0f 90       	pop	r0
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <prvCheckTasksWaitingTermination+0x6>
    2b0c:	0f 92       	push	r0
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2b12:	80 91 fe 02 	lds	r24, 0x02FE
    2b16:	88 23       	and	r24, r24
    2b18:	71 f1       	breq	.+92     	; 0x2b76 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    2b1a:	0e 94 c1 11 	call	0x2382	; 0x2382 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2b1e:	80 91 56 03 	lds	r24, 0x0356
    2b22:	1b 82       	std	Y+3, r1	; 0x03
    2b24:	88 23       	and	r24, r24
    2b26:	11 f4       	brne	.+4      	; 0x2b2c <prvCheckTasksWaitingTermination+0x26>
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    2b2c:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	88 23       	and	r24, r24
    2b34:	01 f5       	brne	.+64     	; 0x2b76 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2b3c:	e0 91 5b 03 	lds	r30, 0x035B
    2b40:	f0 91 5c 03 	lds	r31, 0x035C
    2b44:	86 81       	ldd	r24, Z+6	; 0x06
    2b46:	97 81       	ldd	r25, Z+7	; 0x07
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	02 96       	adiw	r24, 0x02	; 2
    2b52:	0e 94 33 07 	call	0xe66	; 0xe66 <vListRemove>
					--uxCurrentNumberOfTasks;
    2b56:	80 91 ff 02 	lds	r24, 0x02FF
    2b5a:	81 50       	subi	r24, 0x01	; 1
    2b5c:	80 93 ff 02 	sts	0x02FF, r24
					--uxTasksDeleted;
    2b60:	80 91 fe 02 	lds	r24, 0x02FE
    2b64:	81 50       	subi	r24, 0x01	; 1
    2b66:	80 93 fe 02 	sts	0x02FE, r24
				}
				taskEXIT_CRITICAL();
    2b6a:	0f 90       	pop	r0
    2b6c:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <prvAddCurrentTaskToDelayedList+0x6>
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2b90:	e0 91 fc 02 	lds	r30, 0x02FC
    2b94:	f0 91 fd 02 	lds	r31, 0x02FD
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	93 83       	std	Z+3, r25	; 0x03
    2b9e:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    2ba0:	20 91 00 03 	lds	r18, 0x0300
    2ba4:	30 91 01 03 	lds	r19, 0x0301
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	82 17       	cp	r24, r18
    2bae:	93 07       	cpc	r25, r19
    2bb0:	70 f4       	brcc	.+28     	; 0x2bce <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2bb2:	80 91 4b 03 	lds	r24, 0x034B
    2bb6:	90 91 4c 03 	lds	r25, 0x034C
    2bba:	20 91 fc 02 	lds	r18, 0x02FC
    2bbe:	30 91 fd 02 	lds	r19, 0x02FD
    2bc2:	2e 5f       	subi	r18, 0xFE	; 254
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	b9 01       	movw	r22, r18
    2bc8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>
    2bcc:	1e c0       	rjmp	.+60     	; 0x2c0a <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2bce:	40 91 49 03 	lds	r20, 0x0349
    2bd2:	50 91 4a 03 	lds	r21, 0x034A
    2bd6:	80 91 fc 02 	lds	r24, 0x02FC
    2bda:	90 91 fd 02 	lds	r25, 0x02FD
    2bde:	9c 01       	movw	r18, r24
    2be0:	2e 5f       	subi	r18, 0xFE	; 254
    2be2:	3f 4f       	sbci	r19, 0xFF	; 255
    2be4:	ca 01       	movw	r24, r20
    2be6:	b9 01       	movw	r22, r18
    2be8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2bec:	20 91 65 00 	lds	r18, 0x0065
    2bf0:	30 91 66 00 	lds	r19, 0x0066
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	82 17       	cp	r24, r18
    2bfa:	93 07       	cpc	r25, r19
    2bfc:	30 f4       	brcc	.+12     	; 0x2c0a <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	90 93 66 00 	sts	0x0066, r25
    2c06:	80 93 65 00 	sts	0x0065, r24
		}
	}
}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	28 97       	sbiw	r28, 0x08	; 8
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	9c 83       	std	Y+4, r25	; 0x04
    2c2a:	8b 83       	std	Y+3, r24	; 0x03
    2c2c:	7e 83       	std	Y+6, r23	; 0x06
    2c2e:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    2c30:	81 e2       	ldi	r24, 0x21	; 33
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	69 f1       	breq	.+90     	; 0x2c9e <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	39 f4       	brne	.+14     	; 0x2c5a <prvAllocateTCBAndStack+0x46>
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pvPortMalloc>
    2c54:	98 87       	std	Y+8, r25	; 0x08
    2c56:	8f 83       	std	Y+7, r24	; 0x07
    2c58:	04 c0       	rjmp	.+8      	; 0x2c62 <prvAllocateTCBAndStack+0x4e>
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	98 87       	std	Y+8, r25	; 0x08
    2c60:	8f 83       	std	Y+7, r24	; 0x07
    2c62:	e9 81       	ldd	r30, Y+1	; 0x01
    2c64:	fa 81       	ldd	r31, Y+2	; 0x02
    2c66:	8f 81       	ldd	r24, Y+7	; 0x07
    2c68:	98 85       	ldd	r25, Y+8	; 0x08
    2c6a:	90 8f       	std	Z+24, r25	; 0x18
    2c6c:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    2c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c70:	fa 81       	ldd	r31, Y+2	; 0x02
    2c72:	87 89       	ldd	r24, Z+23	; 0x17
    2c74:	90 8d       	ldd	r25, Z+24	; 0x18
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	39 f4       	brne	.+14     	; 0x2c88 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
			pxNewTCB = NULL;
    2c82:	1a 82       	std	Y+2, r1	; 0x02
    2c84:	19 82       	std	Y+1, r1	; 0x01
    2c86:	0b c0       	rjmp	.+22     	; 0x2c9e <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2c88:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8c:	87 89       	ldd	r24, Z+23	; 0x17
    2c8e:	90 8d       	ldd	r25, Z+24	; 0x18
    2c90:	2b 81       	ldd	r18, Y+3	; 0x03
    2c92:	3c 81       	ldd	r19, Y+4	; 0x04
    2c94:	65 ea       	ldi	r22, 0xA5	; 165
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	a9 01       	movw	r20, r18
    2c9a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <memset>
		}
	}

	return pxNewTCB;
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ca2:	28 96       	adiw	r28, 0x08	; 8
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	cf 91       	pop	r28
    2cb0:	df 91       	pop	r29
    2cb2:	08 95       	ret

00002cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    2cb4:	df 93       	push	r29
    2cb6:	cf 93       	push	r28
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <prvDeleteTCB+0x6>
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc6:	87 89       	ldd	r24, Z+23	; 0x17
    2cc8:	90 8d       	ldd	r25, Z+24	; 0x18
    2cca:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
		vPortFree( pxTCB );
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	0e 94 1b 06 	call	0xc36	; 0xc36 <vPortFree>
	}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <memcpy>:
    2ce0:	fb 01       	movw	r30, r22
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <memcpy+0xa>
    2ce6:	01 90       	ld	r0, Z+
    2ce8:	0d 92       	st	X+, r0
    2cea:	41 50       	subi	r20, 0x01	; 1
    2cec:	50 40       	sbci	r21, 0x00	; 0
    2cee:	d8 f7       	brcc	.-10     	; 0x2ce6 <memcpy+0x6>
    2cf0:	08 95       	ret

00002cf2 <memset>:
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <memset+0x6>
    2cf6:	6d 93       	st	X+, r22
    2cf8:	41 50       	subi	r20, 0x01	; 1
    2cfa:	50 40       	sbci	r21, 0x00	; 0
    2cfc:	e0 f7       	brcc	.-8      	; 0x2cf6 <memset+0x4>
    2cfe:	08 95       	ret

00002d00 <strncpy>:
    2d00:	fb 01       	movw	r30, r22
    2d02:	dc 01       	movw	r26, r24
    2d04:	41 50       	subi	r20, 0x01	; 1
    2d06:	50 40       	sbci	r21, 0x00	; 0
    2d08:	48 f0       	brcs	.+18     	; 0x2d1c <strncpy+0x1c>
    2d0a:	01 90       	ld	r0, Z+
    2d0c:	0d 92       	st	X+, r0
    2d0e:	00 20       	and	r0, r0
    2d10:	c9 f7       	brne	.-14     	; 0x2d04 <strncpy+0x4>
    2d12:	01 c0       	rjmp	.+2      	; 0x2d16 <strncpy+0x16>
    2d14:	1d 92       	st	X+, r1
    2d16:	41 50       	subi	r20, 0x01	; 1
    2d18:	50 40       	sbci	r21, 0x00	; 0
    2d1a:	e0 f7       	brcc	.-8      	; 0x2d14 <strncpy+0x14>
    2d1c:	08 95       	ret

00002d1e <_exit>:
    2d1e:	f8 94       	cli

00002d20 <__stop_program>:
    2d20:	ff cf       	rjmp	.-2      	; 0x2d20 <__stop_program>
